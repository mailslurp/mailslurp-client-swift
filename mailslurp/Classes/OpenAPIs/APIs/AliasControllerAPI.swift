//
// AliasControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class AliasControllerAPI : NSObject {
    /**
     Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     
     - parameter createAliasOptions: (body) createAliasOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AliasDto>
     */
    open class func createAlias( createAliasOptions: CreateAliasOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<AliasDto> {
        let deferred = Promise<AliasDto>.pending()
        createAliasWithRequestBuilder(createAliasOptions: createAliasOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     - POST /aliases
     - Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createAliasOptions: (body) createAliasOptions 
     - returns: RequestBuilder<AliasDto> 
     */
    open class func createAliasWithRequestBuilder(createAliasOptions: CreateAliasOptions) -> RequestBuilder<AliasDto> {
        let path = "/aliases"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAliasOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AliasDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete an email alias
     
     - parameter aliasId: (path) aliasId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAlias( aliasId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAliasWithRequestBuilder(aliasId: aliasId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an email alias
     - DELETE /aliases/{aliasId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAliasWithRequestBuilder(aliasId: UUID) -> RequestBuilder<Void> {
        var path = "/aliases/{aliasId}"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get an email alias
     
     - parameter aliasId: (path) aliasId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AliasDto>
     */
    open class func getAlias( aliasId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<AliasDto> {
        let deferred = Promise<AliasDto>.pending()
        getAliasWithRequestBuilder(aliasId: aliasId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an email alias
     - GET /aliases/{aliasId}
     - Get an email alias by ID
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - returns: RequestBuilder<AliasDto> 
     */
    open class func getAliasWithRequestBuilder(aliasId: UUID) -> RequestBuilder<AliasDto> {
        var path = "/aliases/{aliasId}"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AliasDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAliasEmails: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get emails for an alias
     
     - parameter aliasId: (path) aliasId 
     - parameter before: (query) Optional filter by sent before given date time (optional)
     - parameter page: (query) Optional page index alias email list pagination (optional, default to 0)
     - parameter since: (query) Optional filter by sent after given date time (optional)
     - parameter size: (query) Optional page size alias email list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageEmailProjection>
     */
    open class func getAliasEmails( aliasId: UUID,  before: Date? = nil,  page: Int? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getAliasEmails? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageEmailProjection> {
        let deferred = Promise<PageEmailProjection>.pending()
        getAliasEmailsWithRequestBuilder(aliasId: aliasId, before: before, page: page, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get emails for an alias
     - GET /aliases/{aliasId}/emails
     - Get paginated emails for an alias by ID
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - parameter before: (query) Optional filter by sent before given date time (optional)
     - parameter page: (query) Optional page index alias email list pagination (optional, default to 0)
     - parameter since: (query) Optional filter by sent after given date time (optional)
     - parameter size: (query) Optional page size alias email list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageEmailProjection> 
     */
    open class func getAliasEmailsWithRequestBuilder(aliasId: UUID, before: Date? = nil, page: Int? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getAliasEmails? = nil) -> RequestBuilder<PageEmailProjection> {
        var path = "/aliases/{aliasId}/emails"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageEmailProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAliasThreads: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get threads created for an alias
     
     - parameter aliasId: (path) aliasId 
     - parameter before: (query) Optional filter by sent before given date time (optional)
     - parameter page: (query) Optional page index in thread list pagination (optional, default to 0)
     - parameter since: (query) Optional filter by sent after given date time (optional)
     - parameter size: (query) Optional page size in thread list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageThreadProjection>
     */
    open class func getAliasThreads( aliasId: UUID,  before: Date? = nil,  page: Int? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getAliasThreads? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageThreadProjection> {
        let deferred = Promise<PageThreadProjection>.pending()
        getAliasThreadsWithRequestBuilder(aliasId: aliasId, before: before, page: page, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get threads created for an alias
     - GET /aliases/{aliasId}/threads
     - Returns threads created for an email alias in paginated form
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - parameter before: (query) Optional filter by sent before given date time (optional)
     - parameter page: (query) Optional page index in thread list pagination (optional, default to 0)
     - parameter since: (query) Optional filter by sent after given date time (optional)
     - parameter size: (query) Optional page size in thread list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageThreadProjection> 
     */
    open class func getAliasThreadsWithRequestBuilder(aliasId: UUID, before: Date? = nil, page: Int? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getAliasThreads? = nil) -> RequestBuilder<PageThreadProjection> {
        var path = "/aliases/{aliasId}/threads"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageThreadProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAliases: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all email aliases you have created
     
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in alias list pagination (optional, default to 0)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in alias list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageAlias>
     */
    open class func getAliases( before: Date? = nil,  page: Int? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getAliases? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageAlias> {
        let deferred = Promise<PageAlias>.pending()
        getAliasesWithRequestBuilder(before: before, page: page, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all email aliases you have created
     - GET /aliases
     - Get all email aliases in paginated form
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in alias list pagination (optional, default to 0)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in alias list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageAlias> 
     */
    open class func getAliasesWithRequestBuilder(before: Date? = nil, page: Int? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getAliases? = nil) -> RequestBuilder<PageAlias> {
        let path = "/aliases"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageAlias>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Reply to an email
     
     - parameter aliasId: (path) ID of the alias that email belongs to 
     - parameter emailId: (path) ID of the email that should be replied to 
     - parameter replyToAliasEmailOptions: (body) replyToAliasEmailOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<SentEmailDto>
     */
    open class func replyToAliasEmail( aliasId: UUID,  emailId: UUID,  replyToAliasEmailOptions: ReplyToAliasEmailOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<SentEmailDto> {
        let deferred = Promise<SentEmailDto>.pending()
        replyToAliasEmailWithRequestBuilder(aliasId: aliasId, emailId: emailId, replyToAliasEmailOptions: replyToAliasEmailOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Reply to an email
     - PUT /aliases/{aliasId}/emails/{emailId}
     - Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails `to`, `cc`, and `bcc`.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) ID of the alias that email belongs to 
     - parameter emailId: (path) ID of the email that should be replied to 
     - parameter replyToAliasEmailOptions: (body) replyToAliasEmailOptions 
     - returns: RequestBuilder<SentEmailDto> 
     */
    open class func replyToAliasEmailWithRequestBuilder(aliasId: UUID, emailId: UUID, replyToAliasEmailOptions: ReplyToAliasEmailOptions) -> RequestBuilder<SentEmailDto> {
        var path = "/aliases/{aliasId}/emails/{emailId}"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: replyToAliasEmailOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SentEmailDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Send an email from an alias inbox
     
     - parameter aliasId: (path) aliasId 
     - parameter sendEmailOptions: (body) Options for the email to be sent (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<SentEmailDto>
     */
    open class func sendAliasEmail( aliasId: UUID,  sendEmailOptions: SendEmailOptions? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<SentEmailDto> {
        let deferred = Promise<SentEmailDto>.pending()
        sendAliasEmailWithRequestBuilder(aliasId: aliasId, sendEmailOptions: sendEmailOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Send an email from an alias inbox
     - POST /aliases/{aliasId}/emails
     - Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - parameter sendEmailOptions: (body) Options for the email to be sent (optional)
     - returns: RequestBuilder<SentEmailDto> 
     */
    open class func sendAliasEmailWithRequestBuilder(aliasId: UUID, sendEmailOptions: SendEmailOptions? = nil) -> RequestBuilder<SentEmailDto> {
        var path = "/aliases/{aliasId}/emails"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendEmailOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SentEmailDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update an email alias
     
     - parameter aliasId: (path) aliasId 
     - parameter updateAliasOptions: (body) updateAliasOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateAlias( aliasId: UUID,  updateAliasOptions: UpdateAliasOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateAliasWithRequestBuilder(aliasId: aliasId, updateAliasOptions: updateAliasOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Update an email alias
     - PUT /aliases/{aliasId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - parameter updateAliasOptions: (body) updateAliasOptions 
     - returns: RequestBuilder<Void> 
     */
    open class func updateAliasWithRequestBuilder(aliasId: UUID, updateAliasOptions: UpdateAliasOptions) -> RequestBuilder<Void> {
        var path = "/aliases/{aliasId}"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateAliasOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
