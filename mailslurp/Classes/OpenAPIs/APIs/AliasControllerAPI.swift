//
// AliasControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



@objc open class AliasControllerAPI : NSObject {
    /**
     Create an email alias
     
     - parameter createOwnedAliasOptions: (body) createOwnedAliasOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAlias(createOwnedAliasOptions: CreateOwnedAliasOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createAliasWithRequestBuilder(createOwnedAliasOptions: createOwnedAliasOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an email alias
     - POST /aliases
     - Create an email alias belonging to a user ID. To create anonymous aliases use the `createAnonymousAlias` method.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createOwnedAliasOptions: (body) createOwnedAliasOptions 
     - returns: RequestBuilder<Void> 
     */
    open class func createAliasWithRequestBuilder(createOwnedAliasOptions: CreateOwnedAliasOptions) -> RequestBuilder<Void> {
        let path = "/aliases"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOwnedAliasOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an anonymous email alias
     
     - parameter createAnonymousAliasOptions: (body) createAnonymousAliasOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAnonymousAlias(createAnonymousAliasOptions: CreateAnonymousAliasOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Alias?,_ error: Error?) -> Void)) {
        createAnonymousAliasWithRequestBuilder(createAnonymousAliasOptions: createAnonymousAliasOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an anonymous email alias
     - POST /aliases/anonymous
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createAnonymousAliasOptions: (body) createAnonymousAliasOptions 
     - returns: RequestBuilder<Alias> 
     */
    open class func createAnonymousAliasWithRequestBuilder(createAnonymousAliasOptions: CreateAnonymousAliasOptions) -> RequestBuilder<Alias> {
        let path = "/aliases/anonymous"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAnonymousAliasOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Alias>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an owned alias
     
     - parameter aliasId: (path) aliasId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAlias(aliasId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAliasWithRequestBuilder(aliasId: aliasId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an owned alias
     - DELETE /aliases/{aliasId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAliasWithRequestBuilder(aliasId: UUID) -> RequestBuilder<Void> {
        var path = "/aliases/{aliasId}"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an email alias
     
     - parameter aliasId: (path) aliasId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlias(aliasId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Alias?,_ error: Error?) -> Void)) {
        getAliasWithRequestBuilder(aliasId: aliasId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an email alias
     - GET /aliases/{aliasId}
     - Get an email alias by ID
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - returns: RequestBuilder<Alias> 
     */
    open class func getAliasWithRequestBuilder(aliasId: UUID) -> RequestBuilder<Alias> {
        var path = "/aliases/{aliasId}"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Alias>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAliases: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all email aliases
     
     - parameter page: (query) Optional page index in alias list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in alias list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAliases(page: Int? = nil, size: Int? = nil, sort: Sort_getAliases? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: PageAlias?,_ error: Error?) -> Void)) {
        getAliasesWithRequestBuilder(page: page, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all email aliases
     - GET /aliases
     - Get all email aliases in paginated form
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in alias list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in alias list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageAlias> 
     */
    open class func getAliasesWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAliases? = nil) -> RequestBuilder<PageAlias> {
        let path = "/aliases"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageAlias>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an owned alias
     
     - parameter aliasId: (path) aliasId 
     - parameter createOwnedAliasOptions: (body) createOwnedAliasOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAlias(aliasId: UUID, createOwnedAliasOptions: CreateOwnedAliasOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateAliasWithRequestBuilder(aliasId: aliasId, createOwnedAliasOptions: createOwnedAliasOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an owned alias
     - PUT /aliases/{aliasId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter aliasId: (path) aliasId 
     - parameter createOwnedAliasOptions: (body) createOwnedAliasOptions 
     - returns: RequestBuilder<Void> 
     */
    open class func updateAliasWithRequestBuilder(aliasId: UUID, createOwnedAliasOptions: CreateOwnedAliasOptions) -> RequestBuilder<Void> {
        var path = "/aliases/{aliasId}"
        let aliasIdPreEscape = "\(APIHelper.mapValueToPathItem(aliasId))"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOwnedAliasOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
