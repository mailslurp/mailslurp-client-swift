//
// InboxForwarderControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class InboxForwarderControllerAPI : NSObject {
    /**
     Create an inbox forwarder
     
     - parameter createInboxForwarderOptions: (body) createInboxForwarderOptions 
     - parameter inboxId: (query) Inbox id to attach forwarder to (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxForwarderDto>
     */
    open class func createNewInboxForwarder( createInboxForwarderOptions: CreateInboxForwarderOptions,  inboxId: UUID? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxForwarderDto> {
        let deferred = Promise<InboxForwarderDto>.pending()
        createNewInboxForwarderWithRequestBuilder(createInboxForwarderOptions: createInboxForwarderOptions, inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an inbox forwarder
     - POST /forwarders
     - Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createInboxForwarderOptions: (body) createInboxForwarderOptions 
     - parameter inboxId: (query) Inbox id to attach forwarder to (optional)
     - returns: RequestBuilder<InboxForwarderDto> 
     */
    open class func createNewInboxForwarderWithRequestBuilder(createInboxForwarderOptions: CreateInboxForwarderOptions, inboxId: UUID? = nil) -> RequestBuilder<InboxForwarderDto> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInboxForwarderOptions)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteInboxForwarder( _id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxForwarderWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an inbox forwarder
     - DELETE /forwarders/{id}
     - Delete inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxForwarderWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/forwarders/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete inbox forwarders
     
     - parameter inboxId: (query) Optional inbox id to attach forwarder to (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteInboxForwarders( inboxId: UUID? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxForwardersWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete inbox forwarders
     - DELETE /forwarders
     - Delete inbox forwarders. Accepts optional inboxId filter.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to attach forwarder to (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxForwardersWithRequestBuilder(inboxId: UUID? = nil) -> RequestBuilder<Void> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxForwarderDto>
     */
    open class func getInboxForwarder( _id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxForwarderDto> {
        let deferred = Promise<InboxForwarderDto>.pending()
        getInboxForwarderWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox forwarder
     - GET /forwarders/{id}
     - Get inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - returns: RequestBuilder<InboxForwarderDto> 
     */
    open class func getInboxForwarderWithRequestBuilder(_id: UUID) -> RequestBuilder<InboxForwarderDto> {
        var path = "/forwarders/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxForwarders: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List inbox forwarders
     
     - parameter inboxId: (query) Optional inbox id to get forwarders from (optional)
     - parameter page: (query) Optional page index in inbox forwarder list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter size: (query) Optional page size in inbox forwarder list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageInboxForwarderDto>
     */
    open class func getInboxForwarders( inboxId: UUID? = nil,  page: Int? = nil,  searchFilter: String? = nil,  size: Int? = nil,  sort: Sort_getInboxForwarders? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageInboxForwarderDto> {
        let deferred = Promise<PageInboxForwarderDto>.pending()
        getInboxForwardersWithRequestBuilder(inboxId: inboxId, page: page, searchFilter: searchFilter, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List inbox forwarders
     - GET /forwarders
     - List all forwarders attached to an inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to get forwarders from (optional)
     - parameter page: (query) Optional page index in inbox forwarder list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter size: (query) Optional page size in inbox forwarder list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageInboxForwarderDto> 
     */
    open class func getInboxForwardersWithRequestBuilder(inboxId: UUID? = nil, page: Int? = nil, searchFilter: String? = nil, size: Int? = nil, sort: Sort_getInboxForwarders? = nil) -> RequestBuilder<PageInboxForwarderDto> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "searchFilter": searchFilter?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageInboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter inboxForwarderTestOptions: (body) inboxForwarderTestOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxForwarderTestResult>
     */
    open class func testInboxForwarder( _id: UUID,  inboxForwarderTestOptions: InboxForwarderTestOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxForwarderTestResult> {
        let deferred = Promise<InboxForwarderTestResult>.pending()
        testInboxForwarderWithRequestBuilder(_id: _id, inboxForwarderTestOptions: inboxForwarderTestOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test an inbox forwarder
     - POST /forwarders/{id}/test
     - Test an inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - parameter inboxForwarderTestOptions: (body) inboxForwarderTestOptions 
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testInboxForwarderWithRequestBuilder(_id: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions) -> RequestBuilder<InboxForwarderTestResult> {
        var path = "/forwarders/{id}/test"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxForwarderTestOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test inbox forwarders for inbox
     
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxForwarderTestOptions: (body) inboxForwarderTestOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxForwarderTestResult>
     */
    open class func testInboxForwardersForInbox( inboxId: UUID,  inboxForwarderTestOptions: InboxForwarderTestOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxForwarderTestResult> {
        let deferred = Promise<InboxForwarderTestResult>.pending()
        testInboxForwardersForInboxWithRequestBuilder(inboxId: inboxId, inboxForwarderTestOptions: inboxForwarderTestOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test inbox forwarders for inbox
     - PUT /forwarders
     - Test inbox forwarders for inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxForwarderTestOptions: (body) inboxForwarderTestOptions 
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testInboxForwardersForInboxWithRequestBuilder(inboxId: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions) -> RequestBuilder<InboxForwarderTestResult> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxForwarderTestOptions)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test new inbox forwarder
     
     - parameter testNewInboxForwarderOptions: (body) testNewInboxForwarderOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxForwarderTestResult>
     */
    open class func testNewInboxForwarder( testNewInboxForwarderOptions: TestNewInboxForwarderOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxForwarderTestResult> {
        let deferred = Promise<InboxForwarderTestResult>.pending()
        testNewInboxForwarderWithRequestBuilder(testNewInboxForwarderOptions: testNewInboxForwarderOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test new inbox forwarder
     - PATCH /forwarders
     - Test new inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter testNewInboxForwarderOptions: (body) testNewInboxForwarderOptions 
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testNewInboxForwarderWithRequestBuilder(testNewInboxForwarderOptions: TestNewInboxForwarderOptions) -> RequestBuilder<InboxForwarderTestResult> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testNewInboxForwarderOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
