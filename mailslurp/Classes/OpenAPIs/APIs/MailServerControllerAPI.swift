//
// MailServerControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



@objc open class MailServerControllerAPI : NSObject {
    /**
     Get DNS Mail Server records for a domain
     
     - parameter describeOptions: (body) describeOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func describeMailServerDomain(describeOptions: DescribeDomainOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: DescribeMailServerDomainResult?,_ error: Error?) -> Void)) {
        describeMailServerDomainWithRequestBuilder(describeOptions: describeOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get DNS Mail Server records for a domain
     - POST /mail-server/describe/domain
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter describeOptions: (body) describeOptions 
     - returns: RequestBuilder<DescribeMailServerDomainResult> 
     */
    open class func describeMailServerDomainWithRequestBuilder(describeOptions: DescribeDomainOptions) -> RequestBuilder<DescribeMailServerDomainResult> {
        let path = "/mail-server/describe/domain"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: describeOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DescribeMailServerDomainResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Verify the existence of an email address at a given mail server.
     
     - parameter verifyOptions: (body) verifyOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyEmailAddress(verifyOptions: VerifyEmailAddressOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: EmailVerificationResult?,_ error: Error?) -> Void)) {
        verifyEmailAddressWithRequestBuilder(verifyOptions: verifyOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Verify the existence of an email address at a given mail server.
     - POST /mail-server/verify/email-address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter verifyOptions: (body) verifyOptions 
     - returns: RequestBuilder<EmailVerificationResult> 
     */
    open class func verifyEmailAddressWithRequestBuilder(verifyOptions: VerifyEmailAddressOptions) -> RequestBuilder<EmailVerificationResult> {
        let path = "/mail-server/verify/email-address"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailVerificationResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
