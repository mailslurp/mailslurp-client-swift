//
// MailServerControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class MailServerControllerAPI : NSObject {
    /**
     Get DNS Mail Server records for a domain
     
     - parameter describeOptions: (body) describeOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<DescribeMailServerDomainResult>
     */
    open class func describeMailServerDomain( describeOptions: DescribeDomainOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<DescribeMailServerDomainResult> {
        let deferred = Promise<DescribeMailServerDomainResult>.pending()
        describeMailServerDomainWithRequestBuilder(describeOptions: describeOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get DNS Mail Server records for a domain
     - POST /mail-server/describe/domain
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter describeOptions: (body) describeOptions 
     - returns: RequestBuilder<DescribeMailServerDomainResult> 
     */
    open class func describeMailServerDomainWithRequestBuilder(describeOptions: DescribeDomainOptions) -> RequestBuilder<DescribeMailServerDomainResult> {
        let path = "/mail-server/describe/domain"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: describeOptions)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DescribeMailServerDomainResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Lookup DNS records for a domain
     
     - parameter dnsLookupOptions: (body) dnsLookupOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<DNSLookupResults>
     */
    open class func getDnsLookup( dnsLookupOptions: DNSLookupOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<DNSLookupResults> {
        let deferred = Promise<DNSLookupResults>.pending()
        getDnsLookupWithRequestBuilder(dnsLookupOptions: dnsLookupOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup DNS records for a domain
     - POST /mail-server/describe/dns-lookup
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter dnsLookupOptions: (body) dnsLookupOptions 
     - returns: RequestBuilder<DNSLookupResults> 
     */
    open class func getDnsLookupWithRequestBuilder(dnsLookupOptions: DNSLookupOptions) -> RequestBuilder<DNSLookupResults> {
        let path = "/mail-server/describe/dns-lookup"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dnsLookupOptions)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DNSLookupResults>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get IP address for a domain
     
     - parameter name: (query) name 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<IPAddressResult>
     */
    open class func getIpAddress( name: String, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<IPAddressResult> {
        let deferred = Promise<IPAddressResult>.pending()
        getIpAddressWithRequestBuilder(name: name).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get IP address for a domain
     - POST /mail-server/describe/ip-address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter name: (query) name 
     - returns: RequestBuilder<IPAddressResult> 
     */
    open class func getIpAddressWithRequestBuilder(name: String) -> RequestBuilder<IPAddressResult> {
        let path = "/mail-server/describe/ip-address"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IPAddressResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Verify the existence of an email address at a given mail server.
     
     - parameter verifyOptions: (body) verifyOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<EmailVerificationResult>
     */
    open class func verifyEmailAddress( verifyOptions: VerifyEmailAddressOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<EmailVerificationResult> {
        let deferred = Promise<EmailVerificationResult>.pending()
        verifyEmailAddressWithRequestBuilder(verifyOptions: verifyOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Verify the existence of an email address at a given mail server.
     - POST /mail-server/verify/email-address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter verifyOptions: (body) verifyOptions 
     - returns: RequestBuilder<EmailVerificationResult> 
     */
    open class func verifyEmailAddressWithRequestBuilder(verifyOptions: VerifyEmailAddressOptions) -> RequestBuilder<EmailVerificationResult> {
        let path = "/mail-server/verify/email-address"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyOptions)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<EmailVerificationResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
