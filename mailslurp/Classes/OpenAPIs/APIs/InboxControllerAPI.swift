//
// InboxControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



@objc open class InboxControllerAPI : NSObject {
    /**
     Create an inbox email address. An inbox has a real email address and can send and receive emails.
     
     - parameter allowTeamAccess: (query) Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)
     - parameter _description: (query) Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)
     - parameter emailAddress: (query) A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)
     - parameter expiresAt: (query) Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)
     - parameter expiresIn: (query) Number of milliseconds that inbox should exist for (optional)
     - parameter favourite: (query) Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)
     - parameter name: (query) Optional name of the inbox. Displayed in the dashboard for easier search (optional)
     - parameter tags: (query) Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)
     - parameter useDomainPool: (query) Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createInbox(allowTeamAccess: Bool? = nil, _description: String? = nil, emailAddress: String? = nil, expiresAt: Date? = nil, expiresIn: Int64? = nil, favourite: Bool? = nil, name: String? = nil, tags: [String]? = nil, useDomainPool: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        createInboxWithRequestBuilder(allowTeamAccess: allowTeamAccess, _description: _description, emailAddress: emailAddress, expiresAt: expiresAt, expiresIn: expiresIn, favourite: favourite, name: name, tags: tags, useDomainPool: useDomainPool).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an inbox email address. An inbox has a real email address and can send and receive emails.
     - POST /inboxes
     - Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter allowTeamAccess: (query) Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)
     - parameter _description: (query) Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)
     - parameter emailAddress: (query) A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)
     - parameter expiresAt: (query) Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)
     - parameter expiresIn: (query) Number of milliseconds that inbox should exist for (optional)
     - parameter favourite: (query) Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)
     - parameter name: (query) Optional name of the inbox. Displayed in the dashboard for easier search (optional)
     - parameter tags: (query) Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)
     - parameter useDomainPool: (query) Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)
     - returns: RequestBuilder<Inbox> 
     */
    open class func createInboxWithRequestBuilder(allowTeamAccess: Bool? = nil, _description: String? = nil, emailAddress: String? = nil, expiresAt: Date? = nil, expiresIn: Int64? = nil, favourite: Bool? = nil, name: String? = nil, tags: [String]? = nil, useDomainPool: Bool? = nil) -> RequestBuilder<Inbox> {
        let path = "/inboxes"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "allowTeamAccess": allowTeamAccess?.encodeToJSON(), 
            "description": _description?.encodeToJSON(), 
            "emailAddress": emailAddress?.encodeToJSON(), 
            "expiresAt": expiresAt?.encodeToJSON(), 
            "expiresIn": expiresIn?.encodeToJSON(), 
            "favourite": favourite?.encodeToJSON(), 
            "name": name?.encodeToJSON(), 
            "tags": tags?.encodeToJSON(), 
            "useDomainPool": useDomainPool?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an inbox with default options. Uses MailSlurp domain pool address and is private.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createInboxWithDefaults(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        createInboxWithDefaultsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an inbox with default options. Uses MailSlurp domain pool address and is private.
     - POST /inboxes/withDefaults
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<Inbox> 
     */
    open class func createInboxWithDefaultsWithRequestBuilder() -> RequestBuilder<Inbox> {
        let path = "/inboxes/withDefaults"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an inbox with options. Extended options for inbox creation.
     
     - parameter createInboxDto: (body) createInboxDto 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createInboxWithOptions(createInboxDto: CreateInboxDto, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        createInboxWithOptionsWithRequestBuilder(createInboxDto: createInboxDto).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an inbox with options. Extended options for inbox creation.
     - POST /inboxes/withOptions
     - Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createInboxDto: (body) createInboxDto 
     - returns: RequestBuilder<Inbox> 
     */
    open class func createInboxWithOptionsWithRequestBuilder(createInboxDto: CreateInboxDto) -> RequestBuilder<Inbox> {
        let path = "/inboxes/withOptions"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInboxDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete all inboxes
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAllInboxes(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAllInboxesWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete all inboxes
     - DELETE /inboxes
     - Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllInboxesWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/inboxes"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteInbox(inboxId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteInboxWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete inbox
     - DELETE /inboxes/{inboxId}
     - Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxWithRequestBuilder(inboxId: UUID) -> RequestBuilder<Void> {
        var path = "/inboxes/{inboxId}"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllInboxes: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List All Inboxes Paginated
     
     - parameter favourite: (query) Optionally filter results for favourites only (optional, default to false)
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter search: (query) Optionally filter by search words partial matching ID, tags, name, and email address (optional)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter tag: (query) Optionally filter by tags. Will return inboxes that include given tags (optional)
     - parameter teamAccess: (query) Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllInboxes(favourite: Bool? = nil, page: Int? = nil, search: String? = nil, size: Int? = nil, sort: Sort_getAllInboxes? = nil, tag: String? = nil, teamAccess: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: PageInboxProjection?,_ error: Error?) -> Void)) {
        getAllInboxesWithRequestBuilder(favourite: favourite, page: page, search: search, size: size, sort: sort, tag: tag, teamAccess: teamAccess).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Inboxes Paginated
     - GET /inboxes/paginated
     - List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set `teamAccess` to true.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter favourite: (query) Optionally filter results for favourites only (optional, default to false)
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter search: (query) Optionally filter by search words partial matching ID, tags, name, and email address (optional)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter tag: (query) Optionally filter by tags. Will return inboxes that include given tags (optional)
     - parameter teamAccess: (query) Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)
     - returns: RequestBuilder<PageInboxProjection> 
     */
    open class func getAllInboxesWithRequestBuilder(favourite: Bool? = nil, page: Int? = nil, search: String? = nil, size: Int? = nil, sort: Sort_getAllInboxes? = nil, tag: String? = nil, teamAccess: Bool? = nil) -> RequestBuilder<PageInboxProjection> {
        let path = "/inboxes/paginated"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "favourite": favourite?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "search": search?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.encodeToJSON(), 
            "tag": tag?.encodeToJSON(), 
            "teamAccess": teamAccess?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageInboxProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getEmails: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter limit: (query) Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)
     - parameter minCount: (query) Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
     - parameter retryTimeout: (query) Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
     - parameter since: (query) Exclude emails received before this ISO 8601 date time (optional)
     - parameter size: (query) Alias for limit. Assessed first before assessing any passed limit. (optional)
     - parameter sort: (query) Sort the results by received date and direction ASC or DESC (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmails(inboxId: UUID, limit: Int? = nil, minCount: Int64? = nil, retryTimeout: Int64? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getEmails? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: [EmailPreview]?,_ error: Error?) -> Void)) {
        getEmailsWithRequestBuilder(inboxId: inboxId, limit: limit, minCount: minCount, retryTimeout: retryTimeout, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     - GET /inboxes/{inboxId}/emails
     - List emails that an inbox has received. Only emails that are sent to the inbox's email address will appear in the inbox. It may take several seconds for any email you send to an inbox's email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter limit: (query) Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)
     - parameter minCount: (query) Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
     - parameter retryTimeout: (query) Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
     - parameter since: (query) Exclude emails received before this ISO 8601 date time (optional)
     - parameter size: (query) Alias for limit. Assessed first before assessing any passed limit. (optional)
     - parameter sort: (query) Sort the results by received date and direction ASC or DESC (optional)
     - returns: RequestBuilder<[EmailPreview]> 
     */
    open class func getEmailsWithRequestBuilder(inboxId: UUID, limit: Int? = nil, minCount: Int64? = nil, retryTimeout: Int64? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getEmails? = nil) -> RequestBuilder<[EmailPreview]> {
        var path = "/inboxes/{inboxId}/emails"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "minCount": minCount?.encodeToJSON(), 
            "retryTimeout": retryTimeout?.encodeToJSON(), 
            "since": since?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[EmailPreview]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Inbox. Returns properties of an inbox.
     
     - parameter inboxId: (path) inboxId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInbox(inboxId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        getInboxWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Inbox. Returns properties of an inbox.
     - GET /inboxes/{inboxId}
     - Returns an inbox's properties, including its email address and ID.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - returns: RequestBuilder<Inbox> 
     */
    open class func getInboxWithRequestBuilder(inboxId: UUID) -> RequestBuilder<Inbox> {
        var path = "/inboxes/{inboxId}"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxEmailsPaginated: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get inbox emails paginated
     
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter page: (query) Optional page index in inbox emails list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox emails list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInboxEmailsPaginated(inboxId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxEmailsPaginated? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: PageEmailPreview?,_ error: Error?) -> Void)) {
        getInboxEmailsPaginatedWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get inbox emails paginated
     - GET /inboxes/{inboxId}/emails/paginated
     - Get a paginated list of emails in an inbox. Does not hold connections open.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter page: (query) Optional page index in inbox emails list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox emails list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageEmailPreview> 
     */
    open class func getInboxEmailsPaginatedWithRequestBuilder(inboxId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxEmailsPaginated? = nil) -> RequestBuilder<PageEmailPreview> {
        var path = "/inboxes/{inboxId}/emails/paginated"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageEmailPreview>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxSentEmails: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get Inbox Sent Emails
     
     - parameter inboxId: (path) inboxId 
     - parameter page: (query) Optional page index in inbox sent email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox sent email list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInboxSentEmails(inboxId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxSentEmails? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: PageSentEmailProjection?,_ error: Error?) -> Void)) {
        getInboxSentEmailsWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Inbox Sent Emails
     - GET /inboxes/{inboxId}/sent
     - Returns an inbox's sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - parameter page: (query) Optional page index in inbox sent email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox sent email list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageSentEmailProjection> 
     */
    open class func getInboxSentEmailsWithRequestBuilder(inboxId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxSentEmails? = nil) -> RequestBuilder<PageSentEmailProjection> {
        var path = "/inboxes/{inboxId}/sent"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageSentEmailProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get inbox tags
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInboxTags(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getInboxTagsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get inbox tags
     - GET /inboxes/tags
     - Get all inbox tags
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<[String]> 
     */
    open class func getInboxTagsWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/inboxes/tags"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxes: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List Inboxes and email eddresses
     
     - parameter size: (query) Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInboxes(size: Int? = nil, sort: Sort_getInboxes? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: [Inbox]?,_ error: Error?) -> Void)) {
        getInboxesWithRequestBuilder(size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Inboxes and email eddresses
     - GET /inboxes
     - List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended. You can provide a limit and sort parameter.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter size: (query) Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<[Inbox]> 
     */
    open class func getInboxesWithRequestBuilder(size: Int? = nil, sort: Sort_getInboxes? = nil) -> RequestBuilder<[Inbox]> {
        let path = "/inboxes"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "size": size?.encodeToJSON(), 
            "sort": sort?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Inbox]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getOrganizationInboxes: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List Organization Inboxes Paginated
     
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganizationInboxes(page: Int? = nil, size: Int? = nil, sort: Sort_getOrganizationInboxes? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: PageOrganizationInboxProjection?,_ error: Error?) -> Void)) {
        getOrganizationInboxesWithRequestBuilder(page: page, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Organization Inboxes Paginated
     - GET /inboxes/organization
     - List organization inboxes in paginated form. These are inboxes created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly` for non-admin users. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageOrganizationInboxProjection> 
     */
    open class func getOrganizationInboxesWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getOrganizationInboxes? = nil) -> RequestBuilder<PageOrganizationInboxProjection> {
        let path = "/inboxes/organization"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PageOrganizationInboxProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send Email
     
     - parameter inboxId: (path) ID of the inbox you want to send the email from 
     - parameter sendEmailOptions: (body) Options for the email (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendEmail(inboxId: UUID, sendEmailOptions: SendEmailOptions? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendEmailWithRequestBuilder(inboxId: inboxId, sendEmailOptions: sendEmailOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send Email
     - POST /inboxes/{inboxId}
     - Send an email from an inbox's email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox's id not the inbox's email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) ID of the inbox you want to send the email from 
     - parameter sendEmailOptions: (body) Options for the email (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func sendEmailWithRequestBuilder(inboxId: UUID, sendEmailOptions: SendEmailOptions? = nil) -> RequestBuilder<Void> {
        var path = "/inboxes/{inboxId}"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendEmailOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Send email and return sent confirmation
     
     - parameter inboxId: (path) ID of the inbox you want to send the email from 
     - parameter sendEmailOptions: (body) Options for the email (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendEmailAndConfirm(inboxId: UUID, sendEmailOptions: SendEmailOptions? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: SentEmailDto?,_ error: Error?) -> Void)) {
        sendEmailAndConfirmWithRequestBuilder(inboxId: inboxId, sendEmailOptions: sendEmailOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send email and return sent confirmation
     - POST /inboxes/{inboxId}/confirm
     - Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with a link to the sent object created for it.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) ID of the inbox you want to send the email from 
     - parameter sendEmailOptions: (body) Options for the email (optional)
     - returns: RequestBuilder<SentEmailDto> 
     */
    open class func sendEmailAndConfirmWithRequestBuilder(inboxId: UUID, sendEmailOptions: SendEmailOptions? = nil) -> RequestBuilder<SentEmailDto> {
        var path = "/inboxes/{inboxId}/confirm"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendEmailOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SentEmailDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Send a test email to inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendTestEmail(inboxId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendTestEmailWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send a test email to inbox
     - POST /inboxes/{inboxId}/send-test-email
     - Send an inbox a test email to test email receiving is working
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - returns: RequestBuilder<Void> 
     */
    open class func sendTestEmailWithRequestBuilder(inboxId: UUID) -> RequestBuilder<Void> {
        var path = "/inboxes/{inboxId}/send-test-email"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set inbox favourited state
     
     - parameter inboxId: (path) inboxId 
     - parameter setInboxFavouritedOptions: (body) setInboxFavouritedOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setInboxFavourited(inboxId: UUID, setInboxFavouritedOptions: SetInboxFavouritedOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        setInboxFavouritedWithRequestBuilder(inboxId: inboxId, setInboxFavouritedOptions: setInboxFavouritedOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set inbox favourited state
     - PUT /inboxes/{inboxId}/favourite
     - Set and return new favourite state for an inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - parameter setInboxFavouritedOptions: (body) setInboxFavouritedOptions 
     - returns: RequestBuilder<Inbox> 
     */
    open class func setInboxFavouritedWithRequestBuilder(inboxId: UUID, setInboxFavouritedOptions: SetInboxFavouritedOptions) -> RequestBuilder<Inbox> {
        var path = "/inboxes/{inboxId}/favourite"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setInboxFavouritedOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update Inbox. Change name and description. Email address is not editable.
     
     - parameter inboxId: (path) inboxId 
     - parameter updateInboxOptions: (body) updateInboxOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateInbox(inboxId: UUID, updateInboxOptions: UpdateInboxOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        updateInboxWithRequestBuilder(inboxId: inboxId, updateInboxOptions: updateInboxOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Inbox. Change name and description. Email address is not editable.
     - PATCH /inboxes/{inboxId}
     - Update editable fields on an inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - parameter updateInboxOptions: (body) updateInboxOptions 
     - returns: RequestBuilder<Inbox> 
     */
    open class func updateInboxWithRequestBuilder(inboxId: UUID, updateInboxOptions: UpdateInboxOptions) -> RequestBuilder<Inbox> {
        var path = "/inboxes/{inboxId}"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateInboxOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
