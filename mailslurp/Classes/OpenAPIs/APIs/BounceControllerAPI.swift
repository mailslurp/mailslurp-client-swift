//
// BounceControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class BounceControllerAPI : NSObject {
    /**
     Get a bounced email.
     
     - parameter _id: (path) ID of the bounced email to fetch 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BouncedEmailDto>
     */
    open class func getBouncedEmail( _id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<BouncedEmailDto> {
        let deferred = Promise<BouncedEmailDto>.pending()
        getBouncedEmailWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a bounced email.
     - GET /bounce/emails/{id}
     - Bounced emails are email you have sent that were rejected by a recipient
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of the bounced email to fetch 
     - returns: RequestBuilder<BouncedEmailDto> 
     */
    open class func getBouncedEmailWithRequestBuilder(_id: UUID) -> RequestBuilder<BouncedEmailDto> {
        var path = "/bounce/emails/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BouncedEmailDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getBouncedEmails: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get paginated list of bounced emails.
     
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index  (optional, default to 0)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size  (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageBouncedEmail>
     */
    open class func getBouncedEmails( before: Date? = nil,  page: Int? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getBouncedEmails? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageBouncedEmail> {
        let deferred = Promise<PageBouncedEmail>.pending()
        getBouncedEmailsWithRequestBuilder(before: before, page: page, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get paginated list of bounced emails.
     - GET /bounce/emails
     - Bounced emails are email you have sent that were rejected by a recipient
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index  (optional, default to 0)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size  (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageBouncedEmail> 
     */
    open class func getBouncedEmailsWithRequestBuilder(before: Date? = nil, page: Int? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getBouncedEmails? = nil) -> RequestBuilder<PageBouncedEmail> {
        let path = "/bounce/emails"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageBouncedEmail>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a bounced email.
     
     - parameter _id: (path) ID of the bounced recipient 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BouncedRecipientDto>
     */
    open class func getBouncedRecipient( _id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<BouncedRecipientDto> {
        let deferred = Promise<BouncedRecipientDto>.pending()
        getBouncedRecipientWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a bounced email.
     - GET /bounce/recipients/{id}
     - Bounced emails are email you have sent that were rejected by a recipient
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of the bounced recipient 
     - returns: RequestBuilder<BouncedRecipientDto> 
     */
    open class func getBouncedRecipientWithRequestBuilder(_id: UUID) -> RequestBuilder<BouncedRecipientDto> {
        var path = "/bounce/recipients/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BouncedRecipientDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getBouncedRecipients: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get paginated list of bounced recipients.
     
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index  (optional, default to 0)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size  (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageBouncedRecipients>
     */
    open class func getBouncedRecipients( before: Date? = nil,  page: Int? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getBouncedRecipients? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageBouncedRecipients> {
        let deferred = Promise<PageBouncedRecipients>.pending()
        getBouncedRecipientsWithRequestBuilder(before: before, page: page, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get paginated list of bounced recipients.
     - GET /bounce/recipients
     - Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index  (optional, default to 0)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size  (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageBouncedRecipients> 
     */
    open class func getBouncedRecipientsWithRequestBuilder(before: Date? = nil, page: Int? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getBouncedRecipients? = nil) -> RequestBuilder<PageBouncedRecipients> {
        let path = "/bounce/recipients"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageBouncedRecipients>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
