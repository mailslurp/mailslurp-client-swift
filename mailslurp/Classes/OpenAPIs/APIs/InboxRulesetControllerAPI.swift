//
// InboxRulesetControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class InboxRulesetControllerAPI : NSObject {
    /**
     Create an inbox ruleset
     
     - parameter createInboxRulesetOptions: (body) createInboxRulesetOptions 
     - parameter inboxId: (query) Inbox id to attach ruleset to (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxRulesetDto>
     */
    open class func createNewInboxRuleset( createInboxRulesetOptions: CreateInboxRulesetOptions,  inboxId: UUID? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxRulesetDto> {
        let deferred = Promise<InboxRulesetDto>.pending()
        createNewInboxRulesetWithRequestBuilder(createInboxRulesetOptions: createInboxRulesetOptions, inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an inbox ruleset
     - POST /rulesets
     - Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter createInboxRulesetOptions: (body) createInboxRulesetOptions 
     - parameter inboxId: (query) Inbox id to attach ruleset to (optional)
     - returns: RequestBuilder<InboxRulesetDto> 
     */
    open class func createNewInboxRulesetWithRequestBuilder(createInboxRulesetOptions: CreateInboxRulesetOptions, inboxId: UUID? = nil) -> RequestBuilder<InboxRulesetDto> {
        let path = "/rulesets"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInboxRulesetOptions)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxRulesetDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete an inbox ruleset
     
     - parameter _id: (path) ID of inbox ruleset 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteInboxRuleset( _id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxRulesetWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an inbox ruleset
     - DELETE /rulesets/{id}
     - Delete inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox ruleset 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxRulesetWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/rulesets/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete inbox rulesets
     
     - parameter inboxId: (query) Optional inbox id to attach ruleset to (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteInboxRulesets( inboxId: UUID? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteInboxRulesetsWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete inbox rulesets
     - DELETE /rulesets
     - Delete inbox rulesets. Accepts optional inboxId filter.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to attach ruleset to (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxRulesetsWithRequestBuilder(inboxId: UUID? = nil) -> RequestBuilder<Void> {
        let path = "/rulesets"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get an inbox ruleset
     
     - parameter _id: (path) ID of inbox ruleset 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxRulesetDto>
     */
    open class func getInboxRuleset( _id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxRulesetDto> {
        let deferred = Promise<InboxRulesetDto>.pending()
        getInboxRulesetWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an inbox ruleset
     - GET /rulesets/{id}
     - Get inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox ruleset 
     - returns: RequestBuilder<InboxRulesetDto> 
     */
    open class func getInboxRulesetWithRequestBuilder(_id: UUID) -> RequestBuilder<InboxRulesetDto> {
        var path = "/rulesets/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxRulesetDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxRulesets: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List inbox rulesets
     
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inbox id to get rulesets from (optional)
     - parameter page: (query) Optional page index in inbox ruleset list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in inbox ruleset list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageInboxRulesetDto>
     */
    open class func getInboxRulesets( before: Date? = nil,  inboxId: UUID? = nil,  page: Int? = nil,  searchFilter: String? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getInboxRulesets? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageInboxRulesetDto> {
        let deferred = Promise<PageInboxRulesetDto>.pending()
        getInboxRulesetsWithRequestBuilder(before: before, inboxId: inboxId, page: page, searchFilter: searchFilter, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List inbox rulesets
     - GET /rulesets
     - List all rulesets attached to an inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inbox id to get rulesets from (optional)
     - parameter page: (query) Optional page index in inbox ruleset list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in inbox ruleset list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageInboxRulesetDto> 
     */
    open class func getInboxRulesetsWithRequestBuilder(before: Date? = nil, inboxId: UUID? = nil, page: Int? = nil, searchFilter: String? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getInboxRulesets? = nil) -> RequestBuilder<PageInboxRulesetDto> {
        let path = "/rulesets"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "inboxId": inboxId?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "searchFilter": searchFilter?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageInboxRulesetDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test an inbox ruleset
     
     - parameter _id: (path) ID of inbox ruleset 
     - parameter inboxRulesetTestOptions: (body) inboxRulesetTestOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxRulesetTestResult>
     */
    open class func testInboxRuleset( _id: UUID,  inboxRulesetTestOptions: InboxRulesetTestOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxRulesetTestResult> {
        let deferred = Promise<InboxRulesetTestResult>.pending()
        testInboxRulesetWithRequestBuilder(_id: _id, inboxRulesetTestOptions: inboxRulesetTestOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test an inbox ruleset
     - POST /rulesets/{id}/test
     - Test an inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox ruleset 
     - parameter inboxRulesetTestOptions: (body) inboxRulesetTestOptions 
     - returns: RequestBuilder<InboxRulesetTestResult> 
     */
    open class func testInboxRulesetWithRequestBuilder(_id: UUID, inboxRulesetTestOptions: InboxRulesetTestOptions) -> RequestBuilder<InboxRulesetTestResult> {
        var path = "/rulesets/{id}/test"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxRulesetTestOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxRulesetTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test inbox rulesets for inbox
     
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxRulesetTestOptions: (body) inboxRulesetTestOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxRulesetTestResult>
     */
    open class func testInboxRulesetsForInbox( inboxId: UUID,  inboxRulesetTestOptions: InboxRulesetTestOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxRulesetTestResult> {
        let deferred = Promise<InboxRulesetTestResult>.pending()
        testInboxRulesetsForInboxWithRequestBuilder(inboxId: inboxId, inboxRulesetTestOptions: inboxRulesetTestOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test inbox rulesets for inbox
     - PUT /rulesets
     - Test inbox rulesets for inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxRulesetTestOptions: (body) inboxRulesetTestOptions 
     - returns: RequestBuilder<InboxRulesetTestResult> 
     */
    open class func testInboxRulesetsForInboxWithRequestBuilder(inboxId: UUID, inboxRulesetTestOptions: InboxRulesetTestOptions) -> RequestBuilder<InboxRulesetTestResult> {
        let path = "/rulesets"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxRulesetTestOptions)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxRulesetTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test new inbox ruleset
     
     - parameter testNewInboxRulesetOptions: (body) testNewInboxRulesetOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InboxRulesetTestResult>
     */
    open class func testNewInboxRuleset( testNewInboxRulesetOptions: TestNewInboxRulesetOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<InboxRulesetTestResult> {
        let deferred = Promise<InboxRulesetTestResult>.pending()
        testNewInboxRulesetWithRequestBuilder(testNewInboxRulesetOptions: testNewInboxRulesetOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test new inbox ruleset
     - PATCH /rulesets
     - Test new inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter testNewInboxRulesetOptions: (body) testNewInboxRulesetOptions 
     - returns: RequestBuilder<InboxRulesetTestResult> 
     */
    open class func testNewInboxRulesetWithRequestBuilder(testNewInboxRulesetOptions: TestNewInboxRulesetOptions) -> RequestBuilder<InboxRulesetTestResult> {
        let path = "/rulesets"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testNewInboxRulesetOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxRulesetTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
