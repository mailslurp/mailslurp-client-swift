//
// CommonActionsControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



@objc open class CommonActionsControllerAPI : NSObject {
    /**
     Create new random inbox
     
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewEmailAddress(expiresAt: Date? = nil, expiresIn: Int64? = nil, useDomainPool: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        createNewEmailAddressWithRequestBuilder(expiresAt: expiresAt, expiresIn: expiresIn, useDomainPool: useDomainPool).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create new random inbox
     - POST /createInbox
     - Returns an Inbox with an `id` and an `emailAddress`
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - returns: RequestBuilder<Inbox> 
     */
    open class func createNewEmailAddressWithRequestBuilder(expiresAt: Date? = nil, expiresIn: Int64? = nil, useDomainPool: Bool? = nil) -> RequestBuilder<Inbox> {
        let path = "/createInbox"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expiresAt": expiresAt?.encodeToJSON(), 
            "expiresIn": expiresIn?.encodeToJSON(), 
            "useDomainPool": useDomainPool?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create new random inbox
     
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewEmailAddress1(expiresAt: Date? = nil, expiresIn: Int64? = nil, useDomainPool: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        createNewEmailAddress1WithRequestBuilder(expiresAt: expiresAt, expiresIn: expiresIn, useDomainPool: useDomainPool).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create new random inbox
     - POST /newEmailAddress
     - Returns an Inbox with an `id` and an `emailAddress`
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - returns: RequestBuilder<Inbox> 
     */
    open class func createNewEmailAddress1WithRequestBuilder(expiresAt: Date? = nil, expiresIn: Int64? = nil, useDomainPool: Bool? = nil) -> RequestBuilder<Inbox> {
        let path = "/newEmailAddress"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expiresAt": expiresAt?.encodeToJSON(), 
            "expiresIn": expiresIn?.encodeToJSON(), 
            "useDomainPool": useDomainPool?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete all emails in an inbox
     
     - parameter inboxId: (query) inboxId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emptyInbox(inboxId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        emptyInboxWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete all emails in an inbox
     - DELETE /emptyInbox
     - Deletes all emails
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) inboxId 
     - returns: RequestBuilder<Void> 
     */
    open class func emptyInboxWithRequestBuilder(inboxId: UUID) -> RequestBuilder<Void> {
        let path = "/emptyInbox"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send an email
     
     - parameter emailOptions: (body) emailOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendEmailSimple(emailOptions: SimpleSendEmailOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendEmailSimpleWithRequestBuilder(emailOptions: emailOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send an email
     - POST /sendEmail
     - If no senderId or inboxId provided a random email address will be used to send from.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter emailOptions: (body) emailOptions 
     - returns: RequestBuilder<Void> 
     */
    open class func sendEmailSimpleWithRequestBuilder(emailOptions: SimpleSendEmailOptions) -> RequestBuilder<Void> {
        let path = "/sendEmail"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
