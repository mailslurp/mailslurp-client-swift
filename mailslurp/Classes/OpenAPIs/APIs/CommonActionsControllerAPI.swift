//
// CommonActionsControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class CommonActionsControllerAPI : NSObject {
    /**
     Create new random inbox
     
     - parameter allowTeamAccess: (query) allowTeamAccess (optional)
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Inbox>
     */
    open class func createNewEmailAddress( allowTeamAccess: Bool? = nil,  expiresAt: Date? = nil,  expiresIn: Int64? = nil,  useDomainPool: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Inbox> {
        let deferred = Promise<Inbox>.pending()
        createNewEmailAddressWithRequestBuilder(allowTeamAccess: allowTeamAccess, expiresAt: expiresAt, expiresIn: expiresIn, useDomainPool: useDomainPool).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create new random inbox
     - POST /createInbox
     - Returns an Inbox with an `id` and an `emailAddress`
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter allowTeamAccess: (query) allowTeamAccess (optional)
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - returns: RequestBuilder<Inbox> 
     */
    open class func createNewEmailAddressWithRequestBuilder(allowTeamAccess: Bool? = nil, expiresAt: Date? = nil, expiresIn: Int64? = nil, useDomainPool: Bool? = nil) -> RequestBuilder<Inbox> {
        let path = "/createInbox"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "allowTeamAccess": allowTeamAccess?.encodeToJSON(),
            "expiresAt": expiresAt?.encodeToJSON(),
            "expiresIn": expiresIn?.encodeToJSON(),
            "useDomainPool": useDomainPool?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create new random inbox
     
     - parameter allowTeamAccess: (query) allowTeamAccess (optional)
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Inbox>
     */
    open class func createNewEmailAddress1( allowTeamAccess: Bool? = nil,  expiresAt: Date? = nil,  expiresIn: Int64? = nil,  useDomainPool: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Inbox> {
        let deferred = Promise<Inbox>.pending()
        createNewEmailAddress1WithRequestBuilder(allowTeamAccess: allowTeamAccess, expiresAt: expiresAt, expiresIn: expiresIn, useDomainPool: useDomainPool).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create new random inbox
     - POST /newEmailAddress
     - Returns an Inbox with an `id` and an `emailAddress`
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter allowTeamAccess: (query) allowTeamAccess (optional)
     - parameter expiresAt: (query) expiresAt (optional)
     - parameter expiresIn: (query) expiresIn (optional)
     - parameter useDomainPool: (query) useDomainPool (optional)
     - returns: RequestBuilder<Inbox> 
     */
    open class func createNewEmailAddress1WithRequestBuilder(allowTeamAccess: Bool? = nil, expiresAt: Date? = nil, expiresIn: Int64? = nil, useDomainPool: Bool? = nil) -> RequestBuilder<Inbox> {
        let path = "/newEmailAddress"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "allowTeamAccess": allowTeamAccess?.encodeToJSON(),
            "expiresAt": expiresAt?.encodeToJSON(),
            "expiresIn": expiresIn?.encodeToJSON(),
            "useDomainPool": useDomainPool?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Inbox>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete all emails in an inbox
     
     - parameter inboxId: (query) inboxId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func emptyInbox( inboxId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        emptyInboxWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete all emails in an inbox
     - DELETE /emptyInbox
     - Deletes all emails
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) inboxId 
     - returns: RequestBuilder<Void> 
     */
    open class func emptyInboxWithRequestBuilder(inboxId: UUID) -> RequestBuilder<Void> {
        let path = "/emptyInbox"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Send an email
     
     - parameter emailOptions: (body) emailOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func sendEmailSimple( emailOptions: SimpleSendEmailOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        sendEmailSimpleWithRequestBuilder(emailOptions: emailOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Send an email
     - POST /sendEmail
     - If no senderId or inboxId provided a random email address will be used to send from.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter emailOptions: (body) emailOptions 
     - returns: RequestBuilder<Void> 
     */
    open class func sendEmailSimpleWithRequestBuilder(emailOptions: SimpleSendEmailOptions) -> RequestBuilder<Void> {
        let path = "/sendEmail"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailOptions)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
