//
// WaitForControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class WaitForControllerAPI : NSObject {
    /**
     Wait for an email to match the provided filter conditions such as subject contains keyword.
     
     - parameter waitForConditions: (body) Conditions to apply to emails that you are waiting for (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[EmailPreview]>
     */
    open class func waitFor( waitForConditions: WaitForConditions? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<[EmailPreview]> {
        let deferred = Promise<[EmailPreview]>.pending()
        waitForWithRequestBuilder(waitForConditions: waitForConditions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Wait for an email to match the provided filter conditions such as subject contains keyword.
     - POST /waitFor
     - Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter waitForConditions: (body) Conditions to apply to emails that you are waiting for (optional)
     - returns: RequestBuilder<[EmailPreview]> 
     */
    open class func waitForWithRequestBuilder(waitForConditions: WaitForConditions? = nil) -> RequestBuilder<[EmailPreview]> {
        let path = "/waitFor"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: waitForConditions)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[EmailPreview]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
     
     - parameter count: (query) Number of emails to wait for. Must be greater that 1 (optional)
     - parameter inboxId: (query) Id of the inbox we are fetching emails from (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[EmailPreview]>
     */
    open class func waitForEmailCount( count: Int? = nil,  inboxId: UUID? = nil,  timeout: Int64? = nil,  unreadOnly: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<[EmailPreview]> {
        let deferred = Promise<[EmailPreview]>.pending()
        waitForEmailCountWithRequestBuilder(count: count, inboxId: inboxId, timeout: timeout, unreadOnly: unreadOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
     - GET /waitForEmailCount
     - If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter count: (query) Number of emails to wait for. Must be greater that 1 (optional)
     - parameter inboxId: (query) Id of the inbox we are fetching emails from (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - returns: RequestBuilder<[EmailPreview]> 
     */
    open class func waitForEmailCountWithRequestBuilder(count: Int? = nil, inboxId: UUID? = nil, timeout: Int64? = nil, unreadOnly: Bool? = nil) -> RequestBuilder<[EmailPreview]> {
        let path = "/waitForEmailCount"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "inboxId": inboxId?.encodeToJSON(),
            "timeout": timeout?.encodeToJSON(),
            "unreadOnly": unreadOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[EmailPreview]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Fetch inbox's latest email or if empty wait for an email to arrive
     
     - parameter inboxId: (query) Id of the inbox we are fetching emails from (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Email>
     */
    open class func waitForLatestEmail( inboxId: UUID? = nil,  timeout: Int64? = nil,  unreadOnly: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Email> {
        let deferred = Promise<Email>.pending()
        waitForLatestEmailWithRequestBuilder(inboxId: inboxId, timeout: timeout, unreadOnly: unreadOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Fetch inbox's latest email or if empty wait for an email to arrive
     - GET /waitForLatestEmail
     - Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox set `unreadOnly=true` or see the other receive methods such as `waitForNthEmail` or `waitForEmailCount`.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Id of the inbox we are fetching emails from (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only. (optional, default to false)
     - returns: RequestBuilder<Email> 
     */
    open class func waitForLatestEmailWithRequestBuilder(inboxId: UUID? = nil, timeout: Int64? = nil, unreadOnly: Bool? = nil) -> RequestBuilder<Email> {
        let path = "/waitForLatestEmail"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
            "timeout": timeout?.encodeToJSON(),
            "unreadOnly": unreadOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Email>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Wait or return list of emails that match simple matching patterns
     
     - parameter matchOptions: (body) matchOptions 
     - parameter count: (query) Number of emails to wait for. Must be greater that 1 (optional)
     - parameter inboxId: (query) Id of the inbox we are fetching emails from (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[EmailPreview]>
     */
    open class func waitForMatchingEmail( matchOptions: MatchOptions,  count: Int? = nil,  inboxId: UUID? = nil,  timeout: Int64? = nil,  unreadOnly: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<[EmailPreview]> {
        let deferred = Promise<[EmailPreview]>.pending()
        waitForMatchingEmailWithRequestBuilder(matchOptions: matchOptions, count: count, inboxId: inboxId, timeout: timeout, unreadOnly: unreadOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Wait or return list of emails that match simple matching patterns
     - POST /waitForMatchingEmails
     - Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object for options. An example payload is `{ matches: [{field: 'SUBJECT',should:'CONTAIN',value:'needle'}] }`. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController `getEmailContentMatch` method.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter matchOptions: (body) matchOptions 
     - parameter count: (query) Number of emails to wait for. Must be greater that 1 (optional)
     - parameter inboxId: (query) Id of the inbox we are fetching emails from (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - returns: RequestBuilder<[EmailPreview]> 
     */
    open class func waitForMatchingEmailWithRequestBuilder(matchOptions: MatchOptions, count: Int? = nil, inboxId: UUID? = nil, timeout: Int64? = nil, unreadOnly: Bool? = nil) -> RequestBuilder<[EmailPreview]> {
        let path = "/waitForMatchingEmails"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: matchOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count?.encodeToJSON(),
            "inboxId": inboxId?.encodeToJSON(),
            "timeout": timeout?.encodeToJSON(),
            "unreadOnly": unreadOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[EmailPreview]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Wait for or return the first email that matches provided MatchOptions array
     
     - parameter matchOptions: (body) matchOptions 
     - parameter inboxId: (query) Id of the inbox we are matching an email for (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Email>
     */
    open class func waitForMatchingFirstEmail( matchOptions: MatchOptions,  inboxId: UUID? = nil,  timeout: Int64? = nil,  unreadOnly: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Email> {
        let deferred = Promise<Email>.pending()
        waitForMatchingFirstEmailWithRequestBuilder(matchOptions: matchOptions, inboxId: inboxId, timeout: timeout, unreadOnly: unreadOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Wait for or return the first email that matches provided MatchOptions array
     - POST /waitForMatchingFirstEmail
     - Perform a search of emails in an inbox with the given patterns. If a result if found then return or else retry the search until a result is found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object for options. An example payload is `{ matches: [{field: 'SUBJECT',should:'CONTAIN',value:'needle'}] }`. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController `getEmailContentMatch` method.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter matchOptions: (body) matchOptions 
     - parameter inboxId: (query) Id of the inbox we are matching an email for (optional)
     - parameter timeout: (query) Max milliseconds to wait (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - returns: RequestBuilder<Email> 
     */
    open class func waitForMatchingFirstEmailWithRequestBuilder(matchOptions: MatchOptions, inboxId: UUID? = nil, timeout: Int64? = nil, unreadOnly: Bool? = nil) -> RequestBuilder<Email> {
        let path = "/waitForMatchingFirstEmail"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: matchOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
            "timeout": timeout?.encodeToJSON(),
            "unreadOnly": unreadOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Email>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Wait for or fetch the email with a given index in the inbox specified. IF indx doesn't exist waits for it to exist or timeout to occur.
     
     - parameter inboxId: (query) Id of the inbox you are fetching emails from (optional)
     - parameter index: (query) Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)
     - parameter timeout: (query) Max milliseconds to wait for the nth email if not already present (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Email>
     */
    open class func waitForNthEmail( inboxId: UUID? = nil,  index: Int? = nil,  timeout: Int64? = nil,  unreadOnly: Bool? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Email> {
        let deferred = Promise<Email>.pending()
        waitForNthEmailWithRequestBuilder(inboxId: inboxId, index: index, timeout: timeout, unreadOnly: unreadOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Wait for or fetch the email with a given index in the inbox specified. IF indx doesn't exist waits for it to exist or timeout to occur.
     - GET /waitForNthEmail
     - If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Id of the inbox you are fetching emails from (optional)
     - parameter index: (query) Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)
     - parameter timeout: (query) Max milliseconds to wait for the nth email if not already present (optional)
     - parameter unreadOnly: (query) Optional filter for unread only (optional, default to false)
     - returns: RequestBuilder<Email> 
     */
    open class func waitForNthEmailWithRequestBuilder(inboxId: UUID? = nil, index: Int? = nil, timeout: Int64? = nil, unreadOnly: Bool? = nil) -> RequestBuilder<Email> {
        let path = "/waitForNthEmail"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
            "index": index?.encodeToJSON(),
            "timeout": timeout?.encodeToJSON(),
            "unreadOnly": unreadOnly?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Email>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
