//
// WebhookControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

@objc open class WebhookControllerAPI : NSObject {
    /**
     Attach a WebHook URL to an inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter webhookOptions: (body) webhookOptions 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookDto>
     */
    open class func createWebhook( inboxId: UUID,  webhookOptions: CreateWebhookOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookDto> {
        let deferred = Promise<WebhookDto>.pending()
        createWebhookWithRequestBuilder(inboxId: inboxId, webhookOptions: webhookOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Attach a WebHook URL to an inbox
     - POST /inboxes/{inboxId}/webhooks
     - Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - parameter webhookOptions: (body) webhookOptions 
     - returns: RequestBuilder<WebhookDto> 
     */
    open class func createWebhookWithRequestBuilder(inboxId: UUID, webhookOptions: CreateWebhookOptions) -> RequestBuilder<WebhookDto> {
        var path = "/inboxes/{inboxId}/webhooks"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: webhookOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete and disable a Webhook for an Inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter webhookId: (path) webhookId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteWebhook( inboxId: UUID,  webhookId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteWebhookWithRequestBuilder(inboxId: inboxId, webhookId: webhookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete and disable a Webhook for an Inbox
     - DELETE /inboxes/{inboxId}/webhooks/{webhookId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - parameter webhookId: (path) webhookId 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebhookWithRequestBuilder(inboxId: UUID, webhookId: UUID) -> RequestBuilder<Void> {
        var path = "/inboxes/{inboxId}/webhooks/{webhookId}"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllWebhookResults: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get results for all webhooks
     
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageWebhookResult>
     */
    open class func getAllWebhookResults( before: Date? = nil,  page: Int? = nil,  searchFilter: String? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getAllWebhookResults? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageWebhookResult> {
        let deferred = Promise<PageWebhookResult>.pending()
        getAllWebhookResultsWithRequestBuilder(before: before, page: page, searchFilter: searchFilter, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get results for all webhooks
     - GET /webhooks/results
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageWebhookResult> 
     */
    open class func getAllWebhookResultsWithRequestBuilder(before: Date? = nil, page: Int? = nil, searchFilter: String? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getAllWebhookResults? = nil) -> RequestBuilder<PageWebhookResult> {
        let path = "/webhooks/results"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "searchFilter": searchFilter?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageWebhookResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllWebhooks: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List Webhooks Paginated
     
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageWebhookProjection>
     */
    open class func getAllWebhooks( before: Date? = nil,  page: Int? = nil,  searchFilter: String? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getAllWebhooks? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageWebhookProjection> {
        let deferred = Promise<PageWebhookProjection>.pending()
        getAllWebhooksWithRequestBuilder(before: before, page: page, searchFilter: searchFilter, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List Webhooks Paginated
     - GET /webhooks/paginated
     - List webhooks in paginated form. Allows for page index, page size, and sort direction.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - returns: RequestBuilder<PageWebhookProjection> 
     */
    open class func getAllWebhooksWithRequestBuilder(before: Date? = nil, page: Int? = nil, searchFilter: String? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getAllWebhooks? = nil) -> RequestBuilder<PageWebhookProjection> {
        let path = "/webhooks/paginated"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "searchFilter": searchFilter?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageWebhookProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxWebhooksPaginated: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get paginated webhooks for an Inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageWebhookProjection>
     */
    open class func getInboxWebhooksPaginated( inboxId: UUID,  before: Date? = nil,  page: Int? = nil,  searchFilter: String? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getInboxWebhooksPaginated? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageWebhookProjection> {
        let deferred = Promise<PageWebhookProjection>.pending()
        getInboxWebhooksPaginatedWithRequestBuilder(inboxId: inboxId, before: before, page: page, searchFilter: searchFilter, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get paginated webhooks for an Inbox
     - GET /inboxes/{inboxId}/webhooks/paginated
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageWebhookProjection> 
     */
    open class func getInboxWebhooksPaginatedWithRequestBuilder(inboxId: UUID, before: Date? = nil, page: Int? = nil, searchFilter: String? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getInboxWebhooksPaginated? = nil) -> RequestBuilder<PageWebhookProjection> {
        var path = "/inboxes/{inboxId}/webhooks/paginated"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "searchFilter": searchFilter?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageWebhookProjection>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get JSON Schema definition for webhook payload
     
     - parameter webhookId: (path) webhookId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<JSONSchemaDto>
     */
    open class func getJsonSchemaForWebhookPayload( webhookId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<JSONSchemaDto> {
        let deferred = Promise<JSONSchemaDto>.pending()
        getJsonSchemaForWebhookPayloadWithRequestBuilder(webhookId: webhookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get JSON Schema definition for webhook payload
     - POST /webhooks/{webhookId}/schema
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) webhookId 
     - returns: RequestBuilder<JSONSchemaDto> 
     */
    open class func getJsonSchemaForWebhookPayloadWithRequestBuilder(webhookId: UUID) -> RequestBuilder<JSONSchemaDto> {
        var path = "/webhooks/{webhookId}/schema"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<JSONSchemaDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter eventName
     */
    public enum EventName_getTestWebhookPayload: String, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
    }

    /**
     Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     
     - parameter eventName: (query) eventName (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AbstractWebhookPayload>
     */
    open class func getTestWebhookPayload( eventName: EventName_getTestWebhookPayload? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<AbstractWebhookPayload> {
        let deferred = Promise<AbstractWebhookPayload>.pending()
        getTestWebhookPayloadWithRequestBuilder(eventName: eventName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     - GET /webhooks/test
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter eventName: (query) eventName (optional)
     - returns: RequestBuilder<AbstractWebhookPayload> 
     */
    open class func getTestWebhookPayloadWithRequestBuilder(eventName: EventName_getTestWebhookPayload? = nil) -> RequestBuilder<AbstractWebhookPayload> {
        let path = "/webhooks/test"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eventName": eventName?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AbstractWebhookPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get webhook test payload for email opened event
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookEmailOpenedPayload>
     */
    open class func getTestWebhookPayloadEmailOpened(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookEmailOpenedPayload> {
        let deferred = Promise<WebhookEmailOpenedPayload>.pending()
        getTestWebhookPayloadEmailOpenedWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for email opened event
     - GET /webhooks/test/email-opened-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookEmailOpenedPayload> 
     */
    open class func getTestWebhookPayloadEmailOpenedWithRequestBuilder() -> RequestBuilder<WebhookEmailOpenedPayload> {
        let path = "/webhooks/test/email-opened-payload"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookEmailOpenedPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get webhook test payload for email opened event
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookEmailReadPayload>
     */
    open class func getTestWebhookPayloadEmailRead(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookEmailReadPayload> {
        let deferred = Promise<WebhookEmailReadPayload>.pending()
        getTestWebhookPayloadEmailReadWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for email opened event
     - GET /webhooks/test/email-read-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookEmailReadPayload> 
     */
    open class func getTestWebhookPayloadEmailReadWithRequestBuilder() -> RequestBuilder<WebhookEmailReadPayload> {
        let path = "/webhooks/test/email-read-payload"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookEmailReadPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get example payload for webhook
     
     - parameter webhookId: (path) webhookId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AbstractWebhookPayload>
     */
    open class func getTestWebhookPayloadForWebhook( webhookId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<AbstractWebhookPayload> {
        let deferred = Promise<AbstractWebhookPayload>.pending()
        getTestWebhookPayloadForWebhookWithRequestBuilder(webhookId: webhookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get example payload for webhook
     - POST /webhooks/{webhookId}/example
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) webhookId 
     - returns: RequestBuilder<AbstractWebhookPayload> 
     */
    open class func getTestWebhookPayloadForWebhookWithRequestBuilder(webhookId: UUID) -> RequestBuilder<AbstractWebhookPayload> {
        var path = "/webhooks/{webhookId}/example"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AbstractWebhookPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get webhook test payload for new attachment event
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookNewAttachmentPayload>
     */
    open class func getTestWebhookPayloadNewAttachment(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookNewAttachmentPayload> {
        let deferred = Promise<WebhookNewAttachmentPayload>.pending()
        getTestWebhookPayloadNewAttachmentWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for new attachment event
     - GET /webhooks/test/new-attachment-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookNewAttachmentPayload> 
     */
    open class func getTestWebhookPayloadNewAttachmentWithRequestBuilder() -> RequestBuilder<WebhookNewAttachmentPayload> {
        let path = "/webhooks/test/new-attachment-payload"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookNewAttachmentPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get webhook test payload for new contact event
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookNewContactPayload>
     */
    open class func getTestWebhookPayloadNewContact(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookNewContactPayload> {
        let deferred = Promise<WebhookNewContactPayload>.pending()
        getTestWebhookPayloadNewContactWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for new contact event
     - GET /webhooks/test/new-contact-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookNewContactPayload> 
     */
    open class func getTestWebhookPayloadNewContactWithRequestBuilder() -> RequestBuilder<WebhookNewContactPayload> {
        let path = "/webhooks/test/new-contact-payload"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookNewContactPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get webhook test payload for new email event
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookNewEmailPayload>
     */
    open class func getTestWebhookPayloadNewEmail(apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookNewEmailPayload> {
        let deferred = Promise<WebhookNewEmailPayload>.pending()
        getTestWebhookPayloadNewEmailWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get webhook test payload for new email event
     - GET /webhooks/test/new-email-payload
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - returns: RequestBuilder<WebhookNewEmailPayload> 
     */
    open class func getTestWebhookPayloadNewEmailWithRequestBuilder() -> RequestBuilder<WebhookNewEmailPayload> {
        let path = "/webhooks/test/new-email-payload"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookNewEmailPayload>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a webhook for an Inbox
     
     - parameter webhookId: (path) webhookId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookDto>
     */
    open class func getWebhook( webhookId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookDto> {
        let deferred = Promise<WebhookDto>.pending()
        getWebhookWithRequestBuilder(webhookId: webhookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook for an Inbox
     - GET /webhooks/{webhookId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) webhookId 
     - returns: RequestBuilder<WebhookDto> 
     */
    open class func getWebhookWithRequestBuilder(webhookId: UUID) -> RequestBuilder<WebhookDto> {
        var path = "/webhooks/{webhookId}"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a webhook result for a webhook
     
     - parameter webhookResultId: (path) Webhook Result ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookResultDto>
     */
    open class func getWebhookResult( webhookResultId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookResultDto> {
        let deferred = Promise<WebhookResultDto>.pending()
        getWebhookResultWithRequestBuilder(webhookResultId: webhookResultId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook result for a webhook
     - GET /webhooks/results/{webhookResultId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookResultId: (path) Webhook Result ID 
     - returns: RequestBuilder<WebhookResultDto> 
     */
    open class func getWebhookResultWithRequestBuilder(webhookResultId: UUID) -> RequestBuilder<WebhookResultDto> {
        var path = "/webhooks/results/{webhookResultId}"
        let webhookResultIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookResultId))"
        let webhookResultIdPostEscape = webhookResultIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookResultId}", with: webhookResultIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookResultDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getWebhookResults: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get a webhook results for a webhook
     
     - parameter webhookId: (path) ID of webhook to get results for 
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<PageWebhookResult>
     */
    open class func getWebhookResults( webhookId: UUID,  before: Date? = nil,  page: Int? = nil,  searchFilter: String? = nil,  since: Date? = nil,  size: Int? = nil,  sort: Sort_getWebhookResults? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<PageWebhookResult> {
        let deferred = Promise<PageWebhookResult>.pending()
        getWebhookResultsWithRequestBuilder(webhookId: webhookId, before: before, page: page, searchFilter: searchFilter, since: since, size: size, sort: sort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook results for a webhook
     - GET /webhooks/{webhookId}/results
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) ID of webhook to get results for 
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - returns: RequestBuilder<PageWebhookResult> 
     */
    open class func getWebhookResultsWithRequestBuilder(webhookId: UUID, before: Date? = nil, page: Int? = nil, searchFilter: String? = nil, since: Date? = nil, size: Int? = nil, sort: Sort_getWebhookResults? = nil) -> RequestBuilder<PageWebhookResult> {
        var path = "/webhooks/{webhookId}/results"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "searchFilter": searchFilter?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageWebhookResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get all webhooks for an Inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[WebhookDto]>
     */
    open class func getWebhooks( inboxId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<[WebhookDto]> {
        let deferred = Promise<[WebhookDto]>.pending()
        getWebhooksWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all webhooks for an Inbox
     - GET /inboxes/{inboxId}/webhooks
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (path) inboxId 
     - returns: RequestBuilder<[WebhookDto]> 
     */
    open class func getWebhooksWithRequestBuilder(inboxId: UUID) -> RequestBuilder<[WebhookDto]> {
        var path = "/inboxes/{inboxId}/webhooks"
        let inboxIdPreEscape = "\(APIHelper.mapValueToPathItem(inboxId))"
        let inboxIdPostEscape = inboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inboxId}", with: inboxIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[WebhookDto]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get a webhook result and try to resend the original webhook payload
     
     - parameter webhookResultId: (path) Webhook Result ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookRedriveResult>
     */
    open class func redriveWebhookResult( webhookResultId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookRedriveResult> {
        let deferred = Promise<WebhookRedriveResult>.pending()
        redriveWebhookResultWithRequestBuilder(webhookResultId: webhookResultId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a webhook result and try to resend the original webhook payload
     - POST /webhooks/results/{webhookResultId}/redrive
     - Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookResultId: (path) Webhook Result ID 
     - returns: RequestBuilder<WebhookRedriveResult> 
     */
    open class func redriveWebhookResultWithRequestBuilder(webhookResultId: UUID) -> RequestBuilder<WebhookRedriveResult> {
        var path = "/webhooks/results/{webhookResultId}/redrive"
        let webhookResultIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookResultId))"
        let webhookResultIdPostEscape = webhookResultIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookResultId}", with: webhookResultIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookRedriveResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Send webhook test data
     
     - parameter webhookId: (path) webhookId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WebhookTestResult>
     */
    open class func sendTestData( webhookId: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue) -> Promise<WebhookTestResult> {
        let deferred = Promise<WebhookTestResult>.pending()
        sendTestDataWithRequestBuilder(webhookId: webhookId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Send webhook test data
     - POST /webhooks/{webhookId}/test
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter webhookId: (path) webhookId 
     - returns: RequestBuilder<WebhookTestResult> 
     */
    open class func sendTestDataWithRequestBuilder(webhookId: UUID) -> RequestBuilder<WebhookTestResult> {
        var path = "/webhooks/{webhookId}/test"
        let webhookIdPreEscape = "\(APIHelper.mapValueToPathItem(webhookId))"
        let webhookIdPostEscape = webhookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{webhookId}", with: webhookIdPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WebhookTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
