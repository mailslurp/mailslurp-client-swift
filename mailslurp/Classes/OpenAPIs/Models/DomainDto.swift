//
// DomainDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Domain plus verification records and status */
@objc public class DomainDto: NSObject, Codable {

    public enum DomainType: String, Codable, CaseIterable {
        case httpInbox = "HTTP_INBOX"
        case smtpDomain = "SMTP_DOMAIN"
    }
    /** The optional catch all inbox that will receive emails sent to the domain that cannot be matched. */
    public var catchAllInboxId: UUID?
    public var createdAt: Date
    /** Unique token DKIM tokens */
    public var dkimTokens: [String]?
    /** Custom domain name */
    public var domain: String?
    /** List of DNS domain name records (C, MX, TXT) etc that you must add to the DNS server associated with your domain provider. */
    public var domainNameRecords: [DomainNameRecord]?
    /** The type of domain. SMTP or HTTP domains differ in what inboxes can be used with them. */
    public var domainType: DomainType?
    public var _id: UUID
    /** Whether domain has been verified or not. If the domain is not verified after 72 hours there is most likely an issue with the domains DNS records. */
    public var isVerified: Bool?
    public var isVerifiedNum: NSNumber? {
        get {
            return isVerified as NSNumber?
        }
    }
    public var updatedAt: Date
    public var userId: UUID
    /** Verification tokens */
    public var verificationToken: String?

    public init(catchAllInboxId: UUID? = nil, createdAt: Date, dkimTokens: [String]? = nil, domain: String? = nil, domainNameRecords: [DomainNameRecord]? = nil, domainType: DomainType? = nil, _id: UUID, isVerified: Bool? = nil, updatedAt: Date, userId: UUID, verificationToken: String? = nil) {
        self.catchAllInboxId = catchAllInboxId
        self.createdAt = createdAt
        self.dkimTokens = dkimTokens
        self.domain = domain
        self.domainNameRecords = domainNameRecords
        self.domainType = domainType
        self._id = _id
        self.isVerified = isVerified
        self.updatedAt = updatedAt
        self.userId = userId
        self.verificationToken = verificationToken
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case catchAllInboxId
        case createdAt
        case dkimTokens
        case domain
        case domainNameRecords
        case domainType
        case _id = "id"
        case isVerified
        case updatedAt
        case userId
        case verificationToken
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(catchAllInboxId, forKey: .catchAllInboxId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(dkimTokens, forKey: .dkimTokens)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(domainNameRecords, forKey: .domainNameRecords)
        try container.encodeIfPresent(domainType, forKey: .domainType)
        try container.encode(_id, forKey: ._id)
        try container.encodeIfPresent(isVerified, forKey: .isVerified)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(verificationToken, forKey: .verificationToken)
    }



}
