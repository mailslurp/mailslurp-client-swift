//
// AliasDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

/** Email alias representation */
@objc public class AliasDto: NSObject, Codable {

    public var _id: UUID?
    /** The alias&#39;s email address for receiving email */
    public var emailAddress: String?
    /** The underlying email address that is hidden and will received forwarded email */
    public var maskedEmailAddress: String?
    public var userId: UUID?
    /** Inbox that is associated with the alias */
    public var inboxId: UUID?
    public var name: String?
    /** If alias will generate response threads or not when email are received by it */
    public var useThreads: Bool?
    public var useThreadsNum: NSNumber? {
        get {
            return useThreads as NSNumber?
        }
    }
    public var createdAt: Date?
    public var updatedAt: Date?
    public var verified: Bool?
    public var verifiedNum: NSNumber? {
        get {
            return verified as NSNumber?
        }
    }

    public init(_id: UUID? = nil, emailAddress: String? = nil, maskedEmailAddress: String? = nil, userId: UUID? = nil, inboxId: UUID? = nil, name: String? = nil, useThreads: Bool? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, verified: Bool? = nil) {
        self._id = _id
        self.emailAddress = emailAddress
        self.maskedEmailAddress = maskedEmailAddress
        self.userId = userId
        self.inboxId = inboxId
        self.name = name
        self.useThreads = useThreads
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.verified = verified
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case emailAddress
        case maskedEmailAddress
        case userId
        case inboxId
        case name
        case useThreads
        case createdAt
        case updatedAt
        case verified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_id, forKey: ._id)
        try container.encodeIfPresent(emailAddress, forKey: .emailAddress)
        try container.encodeIfPresent(maskedEmailAddress, forKey: .maskedEmailAddress)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(useThreads, forKey: .useThreads)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(verified, forKey: .verified)
    }



}
