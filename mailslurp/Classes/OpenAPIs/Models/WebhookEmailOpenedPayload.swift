//
// WebhookEmailOpenedPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

/** EMAIL_OPENED webhook payload. Sent to your webhook url endpoint via HTTP POST when an email containing a tracking pixel is opened and the pixel image is loaded by a reader. */
@objc public class WebhookEmailOpenedPayload: NSObject, Codable {

    public enum EventName: String, Codable, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
    }
    /** Date time of event creation */
    public var createdAt: Date?
    /** Name of the event type webhook is being triggered for. */
    public var eventName: EventName?
    /** Id of the inbox that received an email */
    public var inboxId: UUID?
    /** Idempotent message ID. Store this ID locally or in a database to prevent message duplication. */
    public var messageId: String?
    /** ID of the tracking pixel */
    public var pixelId: UUID?
    /** Email address for the recipient of the tracking pixel */
    public var recipient: String?
    /** ID of sent email */
    public var sentEmailId: UUID?
    /** ID of webhook entity being triggered */
    public var webhookId: UUID?
    /** Name of the webhook being triggered */
    public var webhookName: String?

    public init(createdAt: Date? = nil, eventName: EventName? = nil, inboxId: UUID? = nil, messageId: String? = nil, pixelId: UUID? = nil, recipient: String? = nil, sentEmailId: UUID? = nil, webhookId: UUID? = nil, webhookName: String? = nil) {
        self.createdAt = createdAt
        self.eventName = eventName
        self.inboxId = inboxId
        self.messageId = messageId
        self.pixelId = pixelId
        self.recipient = recipient
        self.sentEmailId = sentEmailId
        self.webhookId = webhookId
        self.webhookName = webhookName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt
        case eventName
        case inboxId
        case messageId
        case pixelId
        case recipient
        case sentEmailId
        case webhookId
        case webhookName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(messageId, forKey: .messageId)
        try container.encodeIfPresent(pixelId, forKey: .pixelId)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encodeIfPresent(sentEmailId, forKey: .sentEmailId)
        try container.encodeIfPresent(webhookId, forKey: .webhookId)
        try container.encodeIfPresent(webhookName, forKey: .webhookName)
    }



}
