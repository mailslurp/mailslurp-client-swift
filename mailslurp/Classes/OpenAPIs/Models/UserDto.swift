//
// UserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

/** Representation a user&#39;s account */
@objc public class UserDto: NSObject, Codable {

    public enum UserType: String, Codable, CaseIterable {
        case solo = "SOLO"
        case childSolo = "CHILD_SOLO"
        case childTeam = "CHILD_TEAM"
    }
    public enum Verified: String, Codable, CaseIterable {
        case verified = "VERIFIED"
        case pending = "PENDING"
    }
    public var _id: UUID
    public var apiKey: String
    public var emailAddress: String
    public var emailAddressMd5: String
    public var created: Date?
    public var userType: UserType?
    /** Does user belong to an organization */
    public var organization: UUID?
    /** Has user accepted an organization invite */
    public var verified: Verified?
    public var hasPassword: Bool
    public var isFrozen: Bool
    public var addNewContacts: Bool?
    public var addNewContactsNum: NSNumber? {
        get {
            return addNewContacts as NSNumber?
        }
    }
    public var ssoProvider: String?
    public var customerId: String?
    public var hasOnboarded: Bool?
    public var hasOnboardedNum: NSNumber? {
        get {
            return hasOnboarded as NSNumber?
        }
    }
    public var imapUsername: String?
    public var imapPassword: String?
    public var smtpUsername: String?
    public var smtpPassword: String?

    public init(_id: UUID, apiKey: String, emailAddress: String, emailAddressMd5: String, created: Date? = nil, userType: UserType? = nil, organization: UUID? = nil, verified: Verified? = nil, hasPassword: Bool, isFrozen: Bool, addNewContacts: Bool? = nil, ssoProvider: String? = nil, customerId: String? = nil, hasOnboarded: Bool? = nil, imapUsername: String? = nil, imapPassword: String? = nil, smtpUsername: String? = nil, smtpPassword: String? = nil) {
        self._id = _id
        self.apiKey = apiKey
        self.emailAddress = emailAddress
        self.emailAddressMd5 = emailAddressMd5
        self.created = created
        self.userType = userType
        self.organization = organization
        self.verified = verified
        self.hasPassword = hasPassword
        self.isFrozen = isFrozen
        self.addNewContacts = addNewContacts
        self.ssoProvider = ssoProvider
        self.customerId = customerId
        self.hasOnboarded = hasOnboarded
        self.imapUsername = imapUsername
        self.imapPassword = imapPassword
        self.smtpUsername = smtpUsername
        self.smtpPassword = smtpPassword
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case apiKey
        case emailAddress
        case emailAddressMd5
        case created
        case userType
        case organization
        case verified
        case hasPassword
        case isFrozen
        case addNewContacts
        case ssoProvider
        case customerId
        case hasOnboarded
        case imapUsername
        case imapPassword
        case smtpUsername
        case smtpPassword
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(apiKey, forKey: .apiKey)
        try container.encode(emailAddress, forKey: .emailAddress)
        try container.encode(emailAddressMd5, forKey: .emailAddressMd5)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(userType, forKey: .userType)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(verified, forKey: .verified)
        try container.encode(hasPassword, forKey: .hasPassword)
        try container.encode(isFrozen, forKey: .isFrozen)
        try container.encodeIfPresent(addNewContacts, forKey: .addNewContacts)
        try container.encodeIfPresent(ssoProvider, forKey: .ssoProvider)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(hasOnboarded, forKey: .hasOnboarded)
        try container.encodeIfPresent(imapUsername, forKey: .imapUsername)
        try container.encodeIfPresent(imapPassword, forKey: .imapPassword)
        try container.encodeIfPresent(smtpUsername, forKey: .smtpUsername)
        try container.encodeIfPresent(smtpPassword, forKey: .smtpPassword)
    }



}
