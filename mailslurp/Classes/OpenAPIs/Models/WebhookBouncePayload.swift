//
// WebhookBouncePayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

/** EMAIL_READ webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is read. This happens when an email is requested in full from the API or a user views the email in the dashboard. */
@objc public class WebhookBouncePayload: NSObject, Codable {

    public enum EventName: String, Codable, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
    }
    /** Idempotent message ID. Store this ID locally or in a database to prevent message duplication. */
    public var messageId: String
    /** ID of webhook entity being triggered */
    public var webhookId: UUID
    /** Name of the event type webhook is being triggered for. */
    public var eventName: EventName
    /** Name of the webhook being triggered */
    public var webhookName: String?
    /** ID of the bounce email record. Use the ID with the bounce controller to view more information */
    public var bounceId: UUID
    public var sentToRecipients: [String]?
    public var sender: String
    /** Email addresses that resulted in a bounce or email being rejected. Please save these recipients and avoid emailing them in the future to maintain your reputation. */
    public var bounceRecipients: [String]?

    public init(messageId: String, webhookId: UUID, eventName: EventName, webhookName: String? = nil, bounceId: UUID, sentToRecipients: [String]? = nil, sender: String, bounceRecipients: [String]? = nil) {
        self.messageId = messageId
        self.webhookId = webhookId
        self.eventName = eventName
        self.webhookName = webhookName
        self.bounceId = bounceId
        self.sentToRecipients = sentToRecipients
        self.sender = sender
        self.bounceRecipients = bounceRecipients
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messageId
        case webhookId
        case eventName
        case webhookName
        case bounceId
        case sentToRecipients
        case sender
        case bounceRecipients
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(messageId, forKey: .messageId)
        try container.encode(webhookId, forKey: .webhookId)
        try container.encode(eventName, forKey: .eventName)
        try container.encodeIfPresent(webhookName, forKey: .webhookName)
        try container.encode(bounceId, forKey: .bounceId)
        try container.encodeIfPresent(sentToRecipients, forKey: .sentToRecipients)
        try container.encode(sender, forKey: .sender)
        try container.encodeIfPresent(bounceRecipients, forKey: .bounceRecipients)
    }



}
