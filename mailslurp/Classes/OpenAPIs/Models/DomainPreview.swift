//
// DomainPreview.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

/** Preview object for domain entity */
@objc public class DomainPreview: NSObject, Codable {

    public enum DomainType: String, Codable, CaseIterable {
        case httpInbox = "HTTP_INBOX"
        case smtpDomain = "SMTP_DOMAIN"
    }
    public var _id: UUID?
    public var domain: String?
    public var catchAllInboxId: UUID?
    public var createdAt: Date?
    /** Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails. */
    public var domainType: DomainType?
    public var verified: Bool?
    public var verifiedNum: NSNumber? {
        get {
            return verified as NSNumber?
        }
    }

    public init(_id: UUID? = nil, domain: String? = nil, catchAllInboxId: UUID? = nil, createdAt: Date? = nil, domainType: DomainType? = nil, verified: Bool? = nil) {
        self._id = _id
        self.domain = domain
        self.catchAllInboxId = catchAllInboxId
        self.createdAt = createdAt
        self.domainType = domainType
        self.verified = verified
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case domain
        case catchAllInboxId
        case createdAt
        case domainType
        case verified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_id, forKey: ._id)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(catchAllInboxId, forKey: .catchAllInboxId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(domainType, forKey: .domainType)
        try container.encodeIfPresent(verified, forKey: .verified)
    }



}
