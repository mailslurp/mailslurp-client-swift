//
// SentEmailDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Sent email details */
@objc public class SentEmailDto: NSObject, Codable {

    /** Array of IDs of attachments that were sent with this email */
    public var attachments: [String]?
    public var bcc: [String]?
    public var body: String?
    /** MD5 Hash */
    public var bodyMD5Hash: String?
    public var cc: [String]?
    public var charset: String?
    public var from: String?
    /** ID of sent email */
    public var _id: UUID?
    /** Inbox ID email was sent from */
    public var inboxId: UUID?
    public var isHTML: Bool?
    public var isHTMLNum: NSNumber? {
        get {
            return isHTML as NSNumber?
        }
    }
    public var replyTo: String?
    public var sentAt: Date
    public var subject: String?
    /** Recipients email was sent to */
    public var to: [String]?
    /** User ID */
    public var userId: UUID?

    public init(attachments: [String]? = nil, bcc: [String]? = nil, body: String? = nil, bodyMD5Hash: String? = nil, cc: [String]? = nil, charset: String? = nil, from: String? = nil, _id: UUID? = nil, inboxId: UUID? = nil, isHTML: Bool? = nil, replyTo: String? = nil, sentAt: Date, subject: String? = nil, to: [String]? = nil, userId: UUID? = nil) {
        self.attachments = attachments
        self.bcc = bcc
        self.body = body
        self.bodyMD5Hash = bodyMD5Hash
        self.cc = cc
        self.charset = charset
        self.from = from
        self._id = _id
        self.inboxId = inboxId
        self.isHTML = isHTML
        self.replyTo = replyTo
        self.sentAt = sentAt
        self.subject = subject
        self.to = to
        self.userId = userId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attachments
        case bcc
        case body
        case bodyMD5Hash
        case cc
        case charset
        case from
        case _id = "id"
        case inboxId
        case isHTML
        case replyTo
        case sentAt
        case subject
        case to
        case userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(bodyMD5Hash, forKey: .bodyMD5Hash)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encodeIfPresent(charset, forKey: .charset)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(_id, forKey: ._id)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(isHTML, forKey: .isHTML)
        try container.encodeIfPresent(replyTo, forKey: .replyTo)
        try container.encode(sentAt, forKey: .sentAt)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(userId, forKey: .userId)
    }



}
