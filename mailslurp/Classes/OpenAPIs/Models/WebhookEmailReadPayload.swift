//
// WebhookEmailReadPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

/** EMAIL_READ webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is read. This happens when an email is requested in full from the API or a user views the email in the dashboard. */
@objc public class WebhookEmailReadPayload: NSObject, Codable {

    public enum EventName: String, Codable, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
    }
    /** Date time of event creation */
    public var createdAt: Date?
    /** ID of the email that was received. Use this ID for fetching the email with the &#x60;EmailController&#x60;. */
    public var emailId: UUID?
    /** Is the email read */
    public var emailIsRead: Bool?
    public var emailIsReadNum: NSNumber? {
        get {
            return emailIsRead as NSNumber?
        }
    }
    /** Name of the event type webhook is being triggered for. */
    public var eventName: EventName?
    /** Id of the inbox that received an email */
    public var inboxId: UUID?
    /** Idempotent message ID. Store this ID locally or in a database to prevent message duplication. */
    public var messageId: String?
    /** ID of webhook entity being triggered */
    public var webhookId: UUID?
    /** Name of the webhook being triggered */
    public var webhookName: String?

    public init(createdAt: Date? = nil, emailId: UUID? = nil, emailIsRead: Bool? = nil, eventName: EventName? = nil, inboxId: UUID? = nil, messageId: String? = nil, webhookId: UUID? = nil, webhookName: String? = nil) {
        self.createdAt = createdAt
        self.emailId = emailId
        self.emailIsRead = emailIsRead
        self.eventName = eventName
        self.inboxId = inboxId
        self.messageId = messageId
        self.webhookId = webhookId
        self.webhookName = webhookName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt
        case emailId
        case emailIsRead
        case eventName
        case inboxId
        case messageId
        case webhookId
        case webhookName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(emailId, forKey: .emailId)
        try container.encodeIfPresent(emailIsRead, forKey: .emailIsRead)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(messageId, forKey: .messageId)
        try container.encodeIfPresent(webhookId, forKey: .webhookId)
        try container.encodeIfPresent(webhookName, forKey: .webhookName)
    }



}
