//
// BouncedEmailDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

/** Bounced email */
@objc public class BouncedEmailDto: NSObject, Codable {

    public var bounceMta: String?
    public var bounceRecipients: [String]?
    public var bounceSubType: String?
    public var bounceType: String?
    public var createdAt: Date
    public var _id: UUID?
    public var notificationType: String
    public var sender: String
    public var sentToRecipients: [String]?
    public var userId: UUID

    public init(bounceMta: String? = nil, bounceRecipients: [String]? = nil, bounceSubType: String? = nil, bounceType: String? = nil, createdAt: Date, _id: UUID? = nil, notificationType: String, sender: String, sentToRecipients: [String]? = nil, userId: UUID) {
        self.bounceMta = bounceMta
        self.bounceRecipients = bounceRecipients
        self.bounceSubType = bounceSubType
        self.bounceType = bounceType
        self.createdAt = createdAt
        self._id = _id
        self.notificationType = notificationType
        self.sender = sender
        self.sentToRecipients = sentToRecipients
        self.userId = userId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bounceMta
        case bounceRecipients
        case bounceSubType
        case bounceType
        case createdAt
        case _id = "id"
        case notificationType
        case sender
        case sentToRecipients
        case userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bounceMta, forKey: .bounceMta)
        try container.encodeIfPresent(bounceRecipients, forKey: .bounceRecipients)
        try container.encodeIfPresent(bounceSubType, forKey: .bounceSubType)
        try container.encodeIfPresent(bounceType, forKey: .bounceType)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(_id, forKey: ._id)
        try container.encode(notificationType, forKey: .notificationType)
        try container.encode(sender, forKey: .sender)
        try container.encodeIfPresent(sentToRecipients, forKey: .sentToRecipients)
        try container.encode(userId, forKey: .userId)
    }



}
