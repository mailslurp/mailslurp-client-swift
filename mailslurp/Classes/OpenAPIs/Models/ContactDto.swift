//
// ContactDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable
import AnyCodable

@objc public class ContactDto: NSObject, Codable {

    public var company: String?
    public var createdAt: Date
    public var emailAddresses: [String]
    public var firstName: String?
    public var groupId: UUID?
    public var _id: UUID
    public var lastName: String?
    public var metaData: AnyCodable?
    public var optOut: Bool?
    public var optOutNum: NSNumber? {
        get {
            return optOut as NSNumber?
        }
    }
    public var primaryEmailAddress: String?
    public var tags: [String]

    public init(company: String? = nil, createdAt: Date, emailAddresses: [String], firstName: String? = nil, groupId: UUID? = nil, _id: UUID, lastName: String? = nil, metaData: AnyCodable? = nil, optOut: Bool? = nil, primaryEmailAddress: String? = nil, tags: [String]) {
        self.company = company
        self.createdAt = createdAt
        self.emailAddresses = emailAddresses
        self.firstName = firstName
        self.groupId = groupId
        self._id = _id
        self.lastName = lastName
        self.metaData = metaData
        self.optOut = optOut
        self.primaryEmailAddress = primaryEmailAddress
        self.tags = tags
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case company
        case createdAt
        case emailAddresses
        case firstName
        case groupId
        case _id = "id"
        case lastName
        case metaData
        case optOut
        case primaryEmailAddress
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(emailAddresses, forKey: .emailAddresses)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encode(_id, forKey: ._id)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(metaData, forKey: .metaData)
        try container.encodeIfPresent(optOut, forKey: .optOut)
        try container.encodeIfPresent(primaryEmailAddress, forKey: .primaryEmailAddress)
        try container.encode(tags, forKey: .tags)
    }



}
