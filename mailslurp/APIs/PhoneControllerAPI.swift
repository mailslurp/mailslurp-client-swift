//
// PhoneControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class PhoneControllerAPI : NSObject {

    /**
     Create an emergency address
     
     - parameter createEmergencyAddressOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmergencyAddress>
     */
    open class func createEmergencyAddress(createEmergencyAddressOptions: CreateEmergencyAddressOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmergencyAddress> {
        let deferred = Promise<EmergencyAddress>.pending()
        createEmergencyAddressWithRequestBuilder(createEmergencyAddressOptions: createEmergencyAddressOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an emergency address
     - POST /phone/emergency-addresses
     - Add an emergency address to a phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createEmergencyAddressOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmergencyAddress> 
     */
    open class func createEmergencyAddressWithRequestBuilder(createEmergencyAddressOptions: CreateEmergencyAddressOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmergencyAddress> {
        let localVariablePath = "/phone/emergency-addresses"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createEmergencyAddressOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmergencyAddress>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
     
     - parameter createPhoneNumberOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhoneNumberDto>
     */
    open class func createPhoneNumber(createPhoneNumberOptions: CreatePhoneNumberOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhoneNumberDto> {
        let deferred = Promise<PhoneNumberDto>.pending()
        createPhoneNumberWithRequestBuilder(createPhoneNumberOptions: createPhoneNumberOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
     - POST /phone
     - Create new phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createPhoneNumberOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhoneNumberDto> 
     */
    open class func createPhoneNumberWithRequestBuilder(createPhoneNumberOptions: CreatePhoneNumberOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhoneNumberDto> {
        let localVariablePath = "/phone"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPhoneNumberOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneNumberDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an emergency address
     
     - parameter addressId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmptyResponseDto>
     */
    open class func deleteEmergencyAddress(addressId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmptyResponseDto> {
        let deferred = Promise<EmptyResponseDto>.pending()
        deleteEmergencyAddressWithRequestBuilder(addressId: addressId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an emergency address
     - DELETE /phone/emergency-addresses/{addressId}
     - Delete an emergency address
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter addressId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmptyResponseDto> 
     */
    open class func deleteEmergencyAddressWithRequestBuilder(addressId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmptyResponseDto> {
        var localVariablePath = "/phone/emergency-addresses/{addressId}"
        let addressIdPreEscape = "\(APIHelper.mapValueToPathItem(addressId))"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyResponseDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a phone number
     
     - parameter phoneNumberId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deletePhoneNumber(phoneNumberId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deletePhoneNumberWithRequestBuilder(phoneNumberId: phoneNumberId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete a phone number
     - DELETE /phone/numbers/{phoneNumberId}
     - Remove phone number from account
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deletePhoneNumberWithRequestBuilder(phoneNumberId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get the latest messages for all phones
     
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query)  (optional, default to 20)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PagePhoneMessageThreadProjection>
     */
    open class func getAllPhoneMessageThreads(page: Int? = nil, size: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PagePhoneMessageThreadProjection> {
        let deferred = Promise<PagePhoneMessageThreadProjection>.pending()
        getAllPhoneMessageThreadsWithRequestBuilder(page: page, size: size, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get the latest messages for all phones
     - GET /phone/numbers/message-threads
     - List all message threads for all phones
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query)  (optional, default to 20)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PagePhoneMessageThreadProjection> 
     */
    open class func getAllPhoneMessageThreadsWithRequestBuilder(page: Int? = nil, size: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PagePhoneMessageThreadProjection> {
        let localVariablePath = "/phone/numbers/message-threads"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PagePhoneMessageThreadProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get consent status
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<ConsentStatusDto>
     */
    open class func getConsentStatus(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<ConsentStatusDto> {
        let deferred = Promise<ConsentStatusDto>.pending()
        getConsentStatusWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get consent status
     - GET /phone/consent
     - Get the status of phone usage consent
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConsentStatusDto> 
     */
    open class func getConsentStatusWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<ConsentStatusDto> {
        let localVariablePath = "/phone/consent"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStatusDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get an emergency address
     
     - parameter addressId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmergencyAddress>
     */
    open class func getEmergencyAddress(addressId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmergencyAddress> {
        let deferred = Promise<EmergencyAddress>.pending()
        getEmergencyAddressWithRequestBuilder(addressId: addressId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an emergency address
     - GET /phone/emergency-addresses/{addressId}
     - Fetch an emergency address by ID
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter addressId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmergencyAddress> 
     */
    open class func getEmergencyAddressWithRequestBuilder(addressId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmergencyAddress> {
        var localVariablePath = "/phone/emergency-addresses/{addressId}"
        let addressIdPreEscape = "\(APIHelper.mapValueToPathItem(addressId))"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmergencyAddress>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get emergency addresses
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[EmergencyAddressDto]>
     */
    open class func getEmergencyAddresses(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[EmergencyAddressDto]> {
        let deferred = Promise<[EmergencyAddressDto]>.pending()
        getEmergencyAddressesWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get emergency addresses
     - GET /phone/emergency-addresses
     - List emergency addresses
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[EmergencyAddressDto]> 
     */
    open class func getEmergencyAddressesWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[EmergencyAddressDto]> {
        let localVariablePath = "/phone/emergency-addresses"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EmergencyAddressDto]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get messages in a phone thread
     
     - parameter phoneNumberId: (path)  
     - parameter otherNumber: (path)  
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query)  (optional, default to 20)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PagePhoneMessageThreadItemProjection>
     */
    open class func getPhoneMessageThreadItems(phoneNumberId: UUID, otherNumber: String, page: Int? = nil, size: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PagePhoneMessageThreadItemProjection> {
        let deferred = Promise<PagePhoneMessageThreadItemProjection>.pending()
        getPhoneMessageThreadItemsWithRequestBuilder(phoneNumberId: phoneNumberId, otherNumber: otherNumber, page: page, size: size, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get messages in a phone thread
     - GET /phone/numbers/{phoneNumberId}/message-threads/{otherNumber}
     - List message thread messages for a phone message thread
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter otherNumber: (path)  
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query)  (optional, default to 20)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PagePhoneMessageThreadItemProjection> 
     */
    open class func getPhoneMessageThreadItemsWithRequestBuilder(phoneNumberId: UUID, otherNumber: String, page: Int? = nil, size: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PagePhoneMessageThreadItemProjection> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let otherNumberPreEscape = "\(APIHelper.mapValueToPathItem(otherNumber))"
        let otherNumberPostEscape = otherNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{otherNumber}", with: otherNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PagePhoneMessageThreadItemProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get the latest message preview for a thread
     
     - parameter phoneNumberId: (path)  
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query)  (optional, default to 20)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PagePhoneMessageThreadProjection>
     */
    open class func getPhoneMessageThreads(phoneNumberId: UUID, page: Int? = nil, size: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PagePhoneMessageThreadProjection> {
        let deferred = Promise<PagePhoneMessageThreadProjection>.pending()
        getPhoneMessageThreadsWithRequestBuilder(phoneNumberId: phoneNumberId, page: page, size: size, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get the latest message preview for a thread
     - GET /phone/numbers/{phoneNumberId}/message-threads
     - List message threads for a phone
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query)  (optional, default to 20)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PagePhoneMessageThreadProjection> 
     */
    open class func getPhoneMessageThreadsWithRequestBuilder(phoneNumberId: UUID, page: Int? = nil, size: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PagePhoneMessageThreadProjection> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/message-threads"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PagePhoneMessageThreadProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a phone number by ID
     
     - parameter phoneNumberId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhoneNumberDto>
     */
    open class func getPhoneNumber(phoneNumberId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhoneNumberDto> {
        let deferred = Promise<PhoneNumberDto>.pending()
        getPhoneNumberWithRequestBuilder(phoneNumberId: phoneNumberId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a phone number by ID
     - GET /phone/numbers/{phoneNumberId}
     - Get a phone number by ID
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhoneNumberDto> 
     */
    open class func getPhoneNumberWithRequestBuilder(phoneNumberId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhoneNumberDto> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneNumberDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a phone number by name
     
     - parameter name: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhoneNumberDto>
     */
    open class func getPhoneNumberByName(name: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhoneNumberDto> {
        let deferred = Promise<PhoneNumberDto>.pending()
        getPhoneNumberByNameWithRequestBuilder(name: name, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a phone number by name
     - GET /phone/numbers/by-name
     - Get a phone number by name
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter name: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhoneNumberDto> 
     */
    open class func getPhoneNumberByNameWithRequestBuilder(name: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhoneNumberDto> {
        let localVariablePath = "/phone/numbers/by-name"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneNumberDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a phone number by phone number
     
     - parameter phoneNumber: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhoneNumberDto>
     */
    open class func getPhoneNumberByPhoneNumber(phoneNumber: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhoneNumberDto> {
        let deferred = Promise<PhoneNumberDto>.pending()
        getPhoneNumberByPhoneNumberWithRequestBuilder(phoneNumber: phoneNumber, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a phone number by phone number
     - GET /phone/numbers/by-phone-number
     - Get a phone number by phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumber: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhoneNumberDto> 
     */
    open class func getPhoneNumberByPhoneNumberWithRequestBuilder(phoneNumber: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhoneNumberDto> {
        let localVariablePath = "/phone/numbers/by-phone-number"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "phoneNumber": (wrappedValue: phoneNumber.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneNumberDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter phoneCountry
     */
    public enum PhoneCountry_getPhoneNumbers: String, Sendable, CaseIterable {
        case us = "US"
        case gb = "GB"
        case au = "AU"
        case ca = "CA"
        case ee = "EE"
        case hk = "HK"
        case pl = "PL"
        case ch = "CH"
        case pt = "PT"
        case nl = "NL"
        case il = "IL"
        case se = "SE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getPhoneNumbers: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get phone numbers
     
     - parameter phoneCountry: (query) Optional phone country (optional)
     - parameter page: (query) Optional page index for list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter search: (query) Optional search filter (optional)
     - parameter include: (query) Optional phoneIds to include in result (optional)
     - parameter favourite: (query) Optionally filter results for favourites only (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PagePhoneNumberProjection>
     */
    open class func getPhoneNumbers(phoneCountry: PhoneCountry_getPhoneNumbers? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getPhoneNumbers? = nil, since: Date? = nil, before: Date? = nil, search: String? = nil, include: [UUID]? = nil, favourite: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PagePhoneNumberProjection> {
        let deferred = Promise<PagePhoneNumberProjection>.pending()
        getPhoneNumbersWithRequestBuilder(phoneCountry: phoneCountry, page: page, size: size, sort: sort, since: since, before: before, search: search, include: include, favourite: favourite, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get phone numbers
     - GET /phone/numbers
     - List phone numbers for account
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneCountry: (query) Optional phone country (optional)
     - parameter page: (query) Optional page index for list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter search: (query) Optional search filter (optional)
     - parameter include: (query) Optional phoneIds to include in result (optional)
     - parameter favourite: (query) Optionally filter results for favourites only (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PagePhoneNumberProjection> 
     */
    open class func getPhoneNumbersWithRequestBuilder(phoneCountry: PhoneCountry_getPhoneNumbers? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getPhoneNumbers? = nil, since: Date? = nil, before: Date? = nil, search: String? = nil, include: [UUID]? = nil, favourite: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PagePhoneNumberProjection> {
        let localVariablePath = "/phone/numbers"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "phoneCountry": (wrappedValue: phoneCountry?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "favourite": (wrappedValue: favourite?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PagePhoneNumberProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get phone plans
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[PhonePlanDto]>
     */
    open class func getPhonePlans(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[PhonePlanDto]> {
        let deferred = Promise<[PhonePlanDto]>.pending()
        getPhonePlansWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get phone plans
     - GET /phone/plans
     - Get phone number plans
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[PhonePlanDto]> 
     */
    open class func getPhonePlansWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[PhonePlanDto]> {
        let localVariablePath = "/phone/plans"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PhonePlanDto]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get phone plans availability
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhonePlanAvailability>
     */
    open class func getPhonePlansAvailability(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhonePlanAvailability> {
        let deferred = Promise<PhonePlanAvailability>.pending()
        getPhonePlansAvailabilityWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get phone plans availability
     - GET /phone/plans/availability
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhonePlanAvailability> 
     */
    open class func getPhonePlansAvailabilityWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhonePlanAvailability> {
        let localVariablePath = "/phone/plans/availability"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhonePlanAvailability>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getSentSmsByPhoneNumber: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List sent TXT messages for a phone number
     
     - parameter phoneNumberId: (path)  
     - parameter page: (query) Optional page index in SMS list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Optional filter SMSs received after given date time (optional)
     - parameter before: (query) Optional filter SMSs received before given date time (optional)
     - parameter search: (query) Optional search filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageSentSmsProjection>
     */
    open class func getSentSmsByPhoneNumber(phoneNumberId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getSentSmsByPhoneNumber? = nil, since: Date? = nil, before: Date? = nil, search: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageSentSmsProjection> {
        let deferred = Promise<PageSentSmsProjection>.pending()
        getSentSmsByPhoneNumberWithRequestBuilder(phoneNumberId: phoneNumberId, page: page, size: size, sort: sort, since: since, before: before, search: search, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List sent TXT messages for a phone number
     - GET /phone/numbers/{phoneNumberId}/sms-sent
     - Get sent SMS messages for a phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter page: (query) Optional page index in SMS list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Optional filter SMSs received after given date time (optional)
     - parameter before: (query) Optional filter SMSs received before given date time (optional)
     - parameter search: (query) Optional search filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageSentSmsProjection> 
     */
    open class func getSentSmsByPhoneNumberWithRequestBuilder(phoneNumberId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getSentSmsByPhoneNumber? = nil, since: Date? = nil, before: Date? = nil, search: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageSentSmsProjection> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/sms-sent"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageSentSmsProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getSmsByPhoneNumber: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List SMS messages for a phone number
     
     - parameter phoneNumberId: (path)  
     - parameter page: (query) Optional page index in SMS list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter since: (query) Optional filter SMSs received after given date time (optional)
     - parameter before: (query) Optional filter SMSs received before given date time (optional)
     - parameter search: (query) Optional search filter (optional)
     - parameter favourite: (query) Optionally filter results for favourites only (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageSmsProjection>
     */
    open class func getSmsByPhoneNumber(phoneNumberId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getSmsByPhoneNumber? = nil, unreadOnly: Bool? = nil, since: Date? = nil, before: Date? = nil, search: String? = nil, favourite: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageSmsProjection> {
        let deferred = Promise<PageSmsProjection>.pending()
        getSmsByPhoneNumberWithRequestBuilder(phoneNumberId: phoneNumberId, page: page, size: size, sort: sort, unreadOnly: unreadOnly, since: since, before: before, search: search, favourite: favourite, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List SMS messages for a phone number
     - GET /phone/numbers/{phoneNumberId}/sms
     - Get SMS messages for a phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter page: (query) Optional page index in SMS list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter since: (query) Optional filter SMSs received after given date time (optional)
     - parameter before: (query) Optional filter SMSs received before given date time (optional)
     - parameter search: (query) Optional search filter (optional)
     - parameter favourite: (query) Optionally filter results for favourites only (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageSmsProjection> 
     */
    open class func getSmsByPhoneNumberWithRequestBuilder(phoneNumberId: UUID, page: Int? = nil, size: Int? = nil, sort: Sort_getSmsByPhoneNumber? = nil, unreadOnly: Bool? = nil, since: Date? = nil, before: Date? = nil, search: String? = nil, favourite: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageSmsProjection> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/sms"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "unreadOnly": (wrappedValue: unreadOnly?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "search": (wrappedValue: search?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "favourite": (wrappedValue: favourite?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageSmsProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Send TXT message from a phone number
     
     - parameter phoneNumberId: (path)  
     - parameter smsSendOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<SentSmsDto>
     */
    open class func sendSmsFromPhoneNumber(phoneNumberId: UUID, smsSendOptions: SmsSendOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<SentSmsDto> {
        let deferred = Promise<SentSmsDto>.pending()
        sendSmsFromPhoneNumberWithRequestBuilder(phoneNumberId: phoneNumberId, smsSendOptions: smsSendOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Send TXT message from a phone number
     - POST /phone/numbers/{phoneNumberId}/sms
     - Send SMS from a phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter smsSendOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SentSmsDto> 
     */
    open class func sendSmsFromPhoneNumberWithRequestBuilder(phoneNumberId: UUID, smsSendOptions: SmsSendOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<SentSmsDto> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/sms"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsSendOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SentSmsDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Set consent status
     
     - parameter agree: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<ConsentStatusDto>
     */
    open class func setConsentStatus(agree: Bool, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<ConsentStatusDto> {
        let deferred = Promise<ConsentStatusDto>.pending()
        setConsentStatusWithRequestBuilder(agree: agree, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Set consent status
     - POST /phone/consent
     - Give or revoke consent for phone usage
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter agree: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConsentStatusDto> 
     */
    open class func setConsentStatusWithRequestBuilder(agree: Bool, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<ConsentStatusDto> {
        let localVariablePath = "/phone/consent"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "agree": (wrappedValue: agree.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentStatusDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Set phone favourited state
     
     - parameter phoneNumberId: (path) ID of phone to set favourite state 
     - parameter setPhoneFavouritedOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhoneNumberDto>
     */
    open class func setPhoneFavourited(phoneNumberId: UUID, setPhoneFavouritedOptions: SetPhoneFavouritedOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhoneNumberDto> {
        let deferred = Promise<PhoneNumberDto>.pending()
        setPhoneFavouritedWithRequestBuilder(phoneNumberId: phoneNumberId, setPhoneFavouritedOptions: setPhoneFavouritedOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Set phone favourited state
     - PUT /phone/numbers/{phoneNumberId}/favourite
     - Set and return new favorite state for a phone
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path) ID of phone to set favourite state 
     - parameter setPhoneFavouritedOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhoneNumberDto> 
     */
    open class func setPhoneFavouritedWithRequestBuilder(phoneNumberId: UUID, setPhoneFavouritedOptions: SetPhoneFavouritedOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhoneNumberDto> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/favourite"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setPhoneFavouritedOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneNumberDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Test sending an SMS to a number
     
     - parameter phoneNumberId: (path)  
     - parameter testPhoneNumberOptions: (body)  
     - parameter xTestId: (header)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func testPhoneNumberSendSms(phoneNumberId: UUID, testPhoneNumberOptions: TestPhoneNumberOptions, xTestId: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        testPhoneNumberSendSmsWithRequestBuilder(phoneNumberId: phoneNumberId, testPhoneNumberOptions: testPhoneNumberOptions, xTestId: xTestId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test sending an SMS to a number
     - POST /phone/numbers/{phoneNumberId}/test
     - Test a phone number by sending an SMS to it
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path)  
     - parameter testPhoneNumberOptions: (body)  
     - parameter xTestId: (header)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func testPhoneNumberSendSmsWithRequestBuilder(phoneNumberId: UUID, testPhoneNumberOptions: TestPhoneNumberOptions, xTestId: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}/test"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testPhoneNumberOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
            "x-test-id": xTestId?.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update a phone number
     
     - parameter phoneNumberId: (path) ID of phone to set favourite state 
     - parameter updatePhoneNumberOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhoneNumberDto>
     */
    open class func updatePhoneNumber(phoneNumberId: UUID, updatePhoneNumberOptions: UpdatePhoneNumberOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhoneNumberDto> {
        let deferred = Promise<PhoneNumberDto>.pending()
        updatePhoneNumberWithRequestBuilder(phoneNumberId: phoneNumberId, updatePhoneNumberOptions: updatePhoneNumberOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Update a phone number
     - PUT /phone/numbers/{phoneNumberId}
     - Set field for phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter phoneNumberId: (path) ID of phone to set favourite state 
     - parameter updatePhoneNumberOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhoneNumberDto> 
     */
    open class func updatePhoneNumberWithRequestBuilder(phoneNumberId: UUID, updatePhoneNumberOptions: UpdatePhoneNumberOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhoneNumberDto> {
        var localVariablePath = "/phone/numbers/{phoneNumberId}"
        let phoneNumberIdPreEscape = "\(APIHelper.mapValueToPathItem(phoneNumberId))"
        let phoneNumberIdPostEscape = phoneNumberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{phoneNumberId}", with: phoneNumberIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePhoneNumberOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneNumberDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Verify validity of a phone number
     
     - parameter validatePhoneNumberOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PhoneNumberValidationDto>
     */
    open class func validatePhoneNumber(validatePhoneNumberOptions: ValidatePhoneNumberOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PhoneNumberValidationDto> {
        let deferred = Promise<PhoneNumberValidationDto>.pending()
        validatePhoneNumberWithRequestBuilder(validatePhoneNumberOptions: validatePhoneNumberOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Verify validity of a phone number
     - POST /phone/validate
     - Validate a phone number
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter validatePhoneNumberOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PhoneNumberValidationDto> 
     */
    open class func validatePhoneNumberWithRequestBuilder(validatePhoneNumberOptions: ValidatePhoneNumberOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PhoneNumberValidationDto> {
        let localVariablePath = "/phone/validate"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: validatePhoneNumberOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneNumberValidationDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
