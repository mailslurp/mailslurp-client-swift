//
// MFAControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class MFAControllerAPI : NSObject {

    /**
     Create a TOTP device from an base32 secret key
     
     - parameter createTotpDeviceBase32SecretKeyOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TotpDeviceDto>
     */
    open class func createTotpDeviceForBase32SecretKey(createTotpDeviceBase32SecretKeyOptions: CreateTotpDeviceBase32SecretKeyOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TotpDeviceDto> {
        let deferred = Promise<TotpDeviceDto>.pending()
        createTotpDeviceForBase32SecretKeyWithRequestBuilder(createTotpDeviceBase32SecretKeyOptions: createTotpDeviceBase32SecretKeyOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a TOTP device from an base32 secret key
     - POST /mfa/totp/device/base32SecretKey
     - Create a virtual TOTP device for a given secret key. This is usually present as an alternative login option when pairing OTP devices.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createTotpDeviceBase32SecretKeyOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TotpDeviceDto> 
     */
    open class func createTotpDeviceForBase32SecretKeyWithRequestBuilder(createTotpDeviceBase32SecretKeyOptions: CreateTotpDeviceBase32SecretKeyOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TotpDeviceDto> {
        let localVariablePath = "/mfa/totp/device/base32SecretKey"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createTotpDeviceBase32SecretKeyOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TotpDeviceDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a TOTP device from custom options
     
     - parameter createTotpDeviceCustomOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TotpDeviceDto>
     */
    open class func createTotpDeviceForCustom(createTotpDeviceCustomOptions: CreateTotpDeviceCustomOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TotpDeviceDto> {
        let deferred = Promise<TotpDeviceDto>.pending()
        createTotpDeviceForCustomWithRequestBuilder(createTotpDeviceCustomOptions: createTotpDeviceCustomOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a TOTP device from custom options
     - POST /mfa/totp/device/custom
     - Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createTotpDeviceCustomOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TotpDeviceDto> 
     */
    open class func createTotpDeviceForCustomWithRequestBuilder(createTotpDeviceCustomOptions: CreateTotpDeviceCustomOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TotpDeviceDto> {
        let localVariablePath = "/mfa/totp/device/custom"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createTotpDeviceCustomOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TotpDeviceDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a TOTP device from an OTP Auth URL
     
     - parameter createTotpDeviceOtpAuthUrlOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TotpDeviceDto>
     */
    open class func createTotpDeviceForOtpAuthUrl(createTotpDeviceOtpAuthUrlOptions: CreateTotpDeviceOtpAuthUrlOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TotpDeviceDto> {
        let deferred = Promise<TotpDeviceDto>.pending()
        createTotpDeviceForOtpAuthUrlWithRequestBuilder(createTotpDeviceOtpAuthUrlOptions: createTotpDeviceOtpAuthUrlOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a TOTP device from an OTP Auth URL
     - POST /mfa/totp/device/otpAuthUrl
     - Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret=ABC123&issuer=MyApp&period=30&digits=6&algorithm=SHA1. You can provider overrides in the options for each component of the URL.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createTotpDeviceOtpAuthUrlOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TotpDeviceDto> 
     */
    open class func createTotpDeviceForOtpAuthUrlWithRequestBuilder(createTotpDeviceOtpAuthUrlOptions: CreateTotpDeviceOtpAuthUrlOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TotpDeviceDto> {
        let localVariablePath = "/mfa/totp/device/otpAuthUrl"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createTotpDeviceOtpAuthUrlOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TotpDeviceDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a TOTP device by ID
     
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TotpDeviceDto>
     */
    open class func getTotpDevice(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TotpDeviceDto> {
        let deferred = Promise<TotpDeviceDto>.pending()
        getTotpDeviceWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a TOTP device by ID
     - GET /mfa/totp/device/{id}
     - Get Time-Based One-Time Password (TOTP) device by its ID.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TotpDeviceDto> 
     */
    open class func getTotpDeviceWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TotpDeviceDto> {
        var localVariablePath = "/mfa/totp/device/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TotpDeviceDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a TOTP device by username, issuer, or name. Returns empty if not found.
     
     - parameter name: (query) Optional name filter (optional)
     - parameter issuer: (query) Optional issuer filter (optional)
     - parameter username: (query) Optional username filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TotpDeviceOptionalDto>
     */
    open class func getTotpDeviceBy(name: String? = nil, issuer: String? = nil, username: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TotpDeviceOptionalDto> {
        let deferred = Promise<TotpDeviceOptionalDto>.pending()
        getTotpDeviceByWithRequestBuilder(name: name, issuer: issuer, username: username, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a TOTP device by username, issuer, or name. Returns empty if not found.
     - GET /mfa/totp/device/by
     - Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter name: (query) Optional name filter (optional)
     - parameter issuer: (query) Optional issuer filter (optional)
     - parameter username: (query) Optional username filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TotpDeviceOptionalDto> 
     */
    open class func getTotpDeviceByWithRequestBuilder(name: String? = nil, issuer: String? = nil, username: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TotpDeviceOptionalDto> {
        let localVariablePath = "/mfa/totp/device/by"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "issuer": (wrappedValue: issuer?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "username": (wrappedValue: username?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TotpDeviceOptionalDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a TOTP device code by device ID
     
     - parameter _id: (path) ID of the TOTP device to get the code for 
     - parameter at: (query) Optional time to get code for. If not provided, current time is used. (optional)
     - parameter minSecondsUntilExpire: (query) Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TotpDeviceCodeDto>
     */
    open class func getTotpDeviceCode(_id: UUID, at: Date? = nil, minSecondsUntilExpire: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TotpDeviceCodeDto> {
        let deferred = Promise<TotpDeviceCodeDto>.pending()
        getTotpDeviceCodeWithRequestBuilder(_id: _id, at: at, minSecondsUntilExpire: minSecondsUntilExpire, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a TOTP device code by device ID
     - GET /mfa/totp/device/{id}/code
     - Get Time-Based One-Time Password for a device by its ID.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path) ID of the TOTP device to get the code for 
     - parameter at: (query) Optional time to get code for. If not provided, current time is used. (optional)
     - parameter minSecondsUntilExpire: (query) Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TotpDeviceCodeDto> 
     */
    open class func getTotpDeviceCodeWithRequestBuilder(_id: UUID, at: Date? = nil, minSecondsUntilExpire: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TotpDeviceCodeDto> {
        var localVariablePath = "/mfa/totp/device/{id}/code"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "at": (wrappedValue: at?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "minSecondsUntilExpire": (wrappedValue: minSecondsUntilExpire?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TotpDeviceCodeDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
