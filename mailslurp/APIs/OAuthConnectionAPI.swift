//
// OAuthConnectionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class OAuthConnectionAPI : NSObject {

    /**
     * enum for parameter oAuthConnectionType
     */
    public enum OAuthConnectionType_createOAuthConnection: String, Sendable, CaseIterable {
        case google = "GOOGLE"
        case microsoft = "MICROSOFT"
    }

    /**
     Create an OAuth connection
     
     - parameter redirectBase: (query)  
     - parameter oAuthConnectionType: (query)  
     - parameter emailAddress: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CreateOAuthConnectionResult>
     */
    open class func createOAuthConnection(redirectBase: String, oAuthConnectionType: OAuthConnectionType_createOAuthConnection, emailAddress: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CreateOAuthConnectionResult> {
        let deferred = Promise<CreateOAuthConnectionResult>.pending()
        createOAuthConnectionWithRequestBuilder(redirectBase: redirectBase, oAuthConnectionType: oAuthConnectionType, emailAddress: emailAddress, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create an OAuth connection
     - POST /oauth-connection
     - Configure an inbox for OAuth sync with MailSlurp
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter redirectBase: (query)  
     - parameter oAuthConnectionType: (query)  
     - parameter emailAddress: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CreateOAuthConnectionResult> 
     */
    open class func createOAuthConnectionWithRequestBuilder(redirectBase: String, oAuthConnectionType: OAuthConnectionType_createOAuthConnection, emailAddress: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CreateOAuthConnectionResult> {
        let localVariablePath = "/oauth-connection"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "redirectBase": (wrappedValue: redirectBase.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "oAuthConnectionType": (wrappedValue: oAuthConnectionType.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "emailAddress": (wrappedValue: emailAddress?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateOAuthConnectionResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Exchange authorization code for access token and create inbox
     
     - parameter authorizationCode: (query)  
     - parameter redirectUri: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CreateOAuthExchangeResult>
     */
    open class func exchangeAuthorizationTokenAndCreateOrUpdateInbox(authorizationCode: String, redirectUri: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CreateOAuthExchangeResult> {
        let deferred = Promise<CreateOAuthExchangeResult>.pending()
        exchangeAuthorizationTokenAndCreateOrUpdateInboxWithRequestBuilder(authorizationCode: authorizationCode, redirectUri: redirectUri, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Exchange authorization code for access token and create inbox
     - POST /oauth-connection/oauth-exchange/google
     - Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter authorizationCode: (query)  
     - parameter redirectUri: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CreateOAuthExchangeResult> 
     */
    open class func exchangeAuthorizationTokenAndCreateOrUpdateInboxWithRequestBuilder(authorizationCode: String, redirectUri: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CreateOAuthExchangeResult> {
        let localVariablePath = "/oauth-connection/oauth-exchange/google"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "authorizationCode": (wrappedValue: authorizationCode.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "redirectUri": (wrappedValue: redirectUri.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateOAuthExchangeResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
