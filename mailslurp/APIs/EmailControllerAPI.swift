//
// EmailControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class EmailControllerAPI : NSObject {

    /**
     Set IMAP flags associated with a message. Only supports '\\Seen' flag.
     
     - parameter emailId: (path)  
     - parameter imapFlagOperationOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailPreview>
     */
    open class func applyImapFlagOperation(emailId: UUID, imapFlagOperationOptions: ImapFlagOperationOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailPreview> {
        let deferred = Promise<EmailPreview>.pending()
        applyImapFlagOperationWithRequestBuilder(emailId: emailId, imapFlagOperationOptions: imapFlagOperationOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Set IMAP flags associated with a message. Only supports '\\Seen' flag.
     - POST /emails/{emailId}/imap-flag-operation
     - Apply RFC3501 section-2.3.2 IMAP flag operations on an email
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter imapFlagOperationOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailPreview> 
     */
    open class func applyImapFlagOperationWithRequestBuilder(emailId: UUID, imapFlagOperationOptions: ImapFlagOperationOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailPreview> {
        var localVariablePath = "/emails/{emailId}/imap-flag-operation"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imapFlagOperationOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailPreview>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Check if email can be sent and options are valid.
     
     - parameter inboxId: (query) ID of the inbox you want to send the email from 
     - parameter sendEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CanSendEmailResults>
     */
    open class func canSend(inboxId: UUID, sendEmailOptions: SendEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CanSendEmailResults> {
        let deferred = Promise<CanSendEmailResults>.pending()
        canSendWithRequestBuilder(inboxId: inboxId, sendEmailOptions: sendEmailOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Check if email can be sent and options are valid.
     - POST /emails/can-send
     - Can user send email to given recipient or is the recipient blocked
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) ID of the inbox you want to send the email from 
     - parameter sendEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CanSendEmailResults> 
     */
    open class func canSendWithRequestBuilder(inboxId: UUID, sendEmailOptions: SendEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CanSendEmailResults> {
        let localVariablePath = "/emails/can-send"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendEmailOptions, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CanSendEmailResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Detect broken links, spelling, and images in email content
     
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CheckEmailBodyResults>
     */
    open class func checkEmailBody(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CheckEmailBodyResults> {
        let deferred = Promise<CheckEmailBodyResults>.pending()
        checkEmailBodyWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Detect broken links, spelling, and images in email content
     - POST /emails/{emailId}/check-email-body
     - Find dead links, broken images, and spelling mistakes in email body. Will call included links via HTTP so do not invoke if your links are sensitive or stateful. Any resource that returns a 4xx or 5xx response or is not reachable via HEAD or GET HTTP operations will be considered unhealthy.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CheckEmailBodyResults> 
     */
    open class func checkEmailBodyWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CheckEmailBodyResults> {
        var localVariablePath = "/emails/{emailId}/check-email-body"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckEmailBodyResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Show which mail clients support the HTML and CSS features used in an email body.
     
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CheckEmailBodyFeatureSupportResults>
     */
    open class func checkEmailBodyFeatureSupport(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CheckEmailBodyFeatureSupportResults> {
        let deferred = Promise<CheckEmailBodyFeatureSupportResults>.pending()
        checkEmailBodyFeatureSupportWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Show which mail clients support the HTML and CSS features used in an email body.
     - POST /emails/{emailId}/check-email-body-feature-support
     - Detect HTML and CSS features inside an email body and return a report of email client support across different platforms and versions.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CheckEmailBodyFeatureSupportResults> 
     */
    open class func checkEmailBodyFeatureSupportWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CheckEmailBodyFeatureSupportResults> {
        var localVariablePath = "/emails/{emailId}/check-email-body-feature-support"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckEmailBodyFeatureSupportResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Show which email programs and devices support the features used in an email body.
     
     - parameter checkEmailClientSupportOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CheckEmailClientSupportResults>
     */
    open class func checkEmailClientSupport(checkEmailClientSupportOptions: CheckEmailClientSupportOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CheckEmailClientSupportResults> {
        let deferred = Promise<CheckEmailClientSupportResults>.pending()
        checkEmailClientSupportWithRequestBuilder(checkEmailClientSupportOptions: checkEmailClientSupportOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Show which email programs and devices support the features used in an email body.
     - POST /emails/check-email-client-support
     - Evaluate the features used in an email body and return a report of email client support across different platforms and versions.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter checkEmailClientSupportOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CheckEmailClientSupportResults> 
     */
    open class func checkEmailClientSupportWithRequestBuilder(checkEmailClientSupportOptions: CheckEmailClientSupportOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CheckEmailClientSupportResults> {
        let localVariablePath = "/emails/check-email-client-support"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: checkEmailClientSupportOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckEmailClientSupportResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete all emails in all inboxes.
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteAllEmails(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAllEmailsWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete all emails in all inboxes.
     - DELETE /emails
     - Deletes all emails in your account. Be careful as emails cannot be recovered
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllEmailsWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/emails"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an email
     
     - parameter emailId: (path) ID of email to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteEmail(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteEmailWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an email
     - DELETE /emails/{emailId}
     - Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteEmailWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/emails/{emailId}"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email attachment bytes. Returned as `octet-stream` with content type header. If you have trouble with byte responses try the `downloadAttachmentBase64` response endpoints and convert the base 64 encoded content to a file or string.
     
     - parameter emailId: (path) ID of email 
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiKey: (query) Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Data>
     */
    open class func downloadAttachment(emailId: UUID, attachmentId: String, apiKey: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Data> {
        let deferred = Promise<Data>.pending()
        downloadAttachmentWithRequestBuilder(emailId: emailId, attachmentId: attachmentId, apiKey: apiKey, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email attachment bytes. Returned as `octet-stream` with content type header. If you have trouble with byte responses try the `downloadAttachmentBase64` response endpoints and convert the base 64 encoded content to a file or string.
     - GET /emails/{emailId}/attachments/{attachmentId}
     - Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiKey: (query) Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Data> 
     */
    open class func downloadAttachmentWithRequestBuilder(emailId: UUID, attachmentId: String, apiKey: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Data> {
        var localVariablePath = "/emails/{emailId}/attachments/{attachmentId}"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "apiKey": (wrappedValue: apiKey?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email attachment as base64 encoded string as an alternative to binary responses. Decode the `base64FileContents` as a `utf-8` encoded string or array of bytes depending on the `contentType`.
     
     - parameter emailId: (path) ID of email 
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DownloadAttachmentDto>
     */
    open class func downloadAttachmentBase64(emailId: UUID, attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DownloadAttachmentDto> {
        let deferred = Promise<DownloadAttachmentDto>.pending()
        downloadAttachmentBase64WithRequestBuilder(emailId: emailId, attachmentId: attachmentId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email attachment as base64 encoded string as an alternative to binary responses. Decode the `base64FileContents` as a `utf-8` encoded string or array of bytes depending on the `contentType`.
     - GET /emails/{emailId}/attachments/{attachmentId}/base64
     - Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the `downloadAttachment` method but allows some clients to get around issues with binary responses.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DownloadAttachmentDto> 
     */
    open class func downloadAttachmentBase64WithRequestBuilder(emailId: UUID, attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DownloadAttachmentDto> {
        var localVariablePath = "/emails/{emailId}/attachments/{attachmentId}/base64"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DownloadAttachmentDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email body as string. Returned as `plain/text` with content type header.
     
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<String>
     */
    open class func downloadBody(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<String> {
        let deferred = Promise<String>.pending()
        downloadBodyWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email body as string. Returned as `plain/text` with content type header.
     - GET /emails/{emailId}/body
     - Returns the specified email body for a given email as a string
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func downloadBodyWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<String> {
        var localVariablePath = "/emails/{emailId}/body"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email body in bytes. Returned as `octet-stream` with content type header.
     
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Data>
     */
    open class func downloadBodyBytes(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Data> {
        let deferred = Promise<Data>.pending()
        downloadBodyBytesWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email body in bytes. Returned as `octet-stream` with content type header.
     - GET /emails/{emailId}/body-bytes
     - Returns the specified email body for a given email as a stream / array of bytes.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Data> 
     */
    open class func downloadBodyBytesWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Data> {
        var localVariablePath = "/emails/{emailId}/body-bytes"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Forward email to recipients
     
     - parameter emailId: (path) ID of email 
     - parameter forwardEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<SentEmailDto>
     */
    open class func forwardEmail(emailId: UUID, forwardEmailOptions: ForwardEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<SentEmailDto> {
        let deferred = Promise<SentEmailDto>.pending()
        forwardEmailWithRequestBuilder(emailId: emailId, forwardEmailOptions: forwardEmailOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Forward email to recipients
     - POST /emails/{emailId}/forward
     - Forward an existing email to new recipients. The sender of the email will be the inbox that received the email you are forwarding. You can override the sender with the `from` option. Note you must have access to the from address in MailSlurp to use the override. For more control consider fetching the email and sending it a new using the send email endpoints.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter forwardEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SentEmailDto> 
     */
    open class func forwardEmailWithRequestBuilder(emailId: UUID, forwardEmailOptions: ForwardEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<SentEmailDto> {
        var localVariablePath = "/emails/{emailId}/forward"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: forwardEmailOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SentEmailDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email attachment metadata. This is the `contentType` and `contentLength` of an attachment. To get the individual attachments  use the `downloadAttachment` methods.
     
     - parameter emailId: (path) ID of email 
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AttachmentMetaData>
     */
    open class func getAttachmentMetaData(emailId: UUID, attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AttachmentMetaData> {
        let deferred = Promise<AttachmentMetaData>.pending()
        getAttachmentMetaDataWithRequestBuilder(emailId: emailId, attachmentId: attachmentId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email attachment metadata. This is the `contentType` and `contentLength` of an attachment. To get the individual attachments  use the `downloadAttachment` methods.
     - GET /emails/{emailId}/attachments/{attachmentId}/metadata
     - Returns the metadata such as name and content-type for a given attachment and email.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttachmentMetaData> 
     */
    open class func getAttachmentMetaDataWithRequestBuilder(emailId: UUID, attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AttachmentMetaData> {
        var localVariablePath = "/emails/{emailId}/attachments/{attachmentId}/metadata"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttachmentMetaData>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email content including headers and body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Email>
     */
    open class func getEmail(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Email> {
        let deferred = Promise<Email>.pending()
        getEmailWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email content including headers and body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     - GET /emails/{emailId}
     - Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Email> 
     */
    open class func getEmailWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Email> {
        var localVariablePath = "/emails/{emailId}"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Email>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get all email attachment metadata. Metadata includes name and size of attachments.
     
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[AttachmentMetaData]>
     */
    open class func getEmailAttachments(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[AttachmentMetaData]> {
        let deferred = Promise<[AttachmentMetaData]>.pending()
        getEmailAttachmentsWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all email attachment metadata. Metadata includes name and size of attachments.
     - GET /emails/{emailId}/attachments
     - Returns an array of attachment metadata such as name and content-type for a given email if present.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[AttachmentMetaData]> 
     */
    open class func getEmailAttachmentsWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[AttachmentMetaData]> {
        var localVariablePath = "/emails/{emailId}/attachments"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AttachmentMetaData]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email content regex pattern match results. Runs regex against email body and returns match groups.
     
     - parameter emailId: (path) ID of email to match against 
     - parameter contentMatchOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailContentMatchResult>
     */
    open class func getEmailContentMatch(emailId: UUID, contentMatchOptions: ContentMatchOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailContentMatchResult> {
        let deferred = Promise<EmailContentMatchResult>.pending()
        getEmailContentMatchWithRequestBuilder(emailId: emailId, contentMatchOptions: contentMatchOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email content regex pattern match results. Runs regex against email body and returns match groups.
     - POST /emails/{emailId}/contentMatch
     - Return the matches for a given Java style regex pattern. Do not include the typical `/` at start or end of regex in some languages. Given an example `your code is: 12345` the pattern to extract match looks like `code is: (\\d{6})`. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: `['code is: 123456', '123456']` See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to match against 
     - parameter contentMatchOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailContentMatchResult> 
     */
    open class func getEmailContentMatchWithRequestBuilder(emailId: UUID, contentMatchOptions: ContentMatchOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailContentMatchResult> {
        var localVariablePath = "/emails/{emailId}/contentMatch"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contentMatchOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailContentMatchResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email content part by content type
     
     - parameter emailId: (path) ID of email to match against 
     - parameter contentType: (query) Content type 
     - parameter strict: (query) Strict content type match (optional)
     - parameter index: (query) Index of content type part if multiple (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailContentPartResult>
     */
    open class func getEmailContentPart(emailId: UUID, contentType: String, strict: Bool? = nil, index: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailContentPartResult> {
        let deferred = Promise<EmailContentPartResult>.pending()
        getEmailContentPartWithRequestBuilder(emailId: emailId, contentType: contentType, strict: strict, index: index, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email content part by content type
     - GET /emails/{emailId}/contentPart
     - Get email body content parts from a multipart email message for a given content type
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to match against 
     - parameter contentType: (query) Content type 
     - parameter strict: (query) Strict content type match (optional)
     - parameter index: (query) Index of content type part if multiple (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailContentPartResult> 
     */
    open class func getEmailContentPartWithRequestBuilder(emailId: UUID, contentType: String, strict: Bool? = nil, index: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailContentPartResult> {
        var localVariablePath = "/emails/{emailId}/contentPart"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentType": (wrappedValue: contentType.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "strict": (wrappedValue: strict?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "index": (wrappedValue: index?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailContentPartResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email content part by content type raw response
     
     - parameter emailId: (path) ID of email to match against 
     - parameter contentType: (query) Content type 
     - parameter strict: (query) Strict content type match (optional)
     - parameter index: (query) Index of content type part if multiple. Starts from 0 and applies to the result list after selecting for your content type. Content type parts are sorted by order found in original MIME message. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<String>
     */
    open class func getEmailContentPartContent(emailId: UUID, contentType: String, strict: Bool? = nil, index: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<String> {
        let deferred = Promise<String>.pending()
        getEmailContentPartContentWithRequestBuilder(emailId: emailId, contentType: contentType, strict: strict, index: index, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email content part by content type raw response
     - GET /emails/{emailId}/contentPart/raw
     - Get email body content parts from a multipart email message for a given content type and return as response
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to match against 
     - parameter contentType: (query) Content type 
     - parameter strict: (query) Strict content type match (optional)
     - parameter index: (query) Index of content type part if multiple. Starts from 0 and applies to the result list after selecting for your content type. Content type parts are sorted by order found in original MIME message. (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func getEmailContentPartContentWithRequestBuilder(emailId: UUID, contentType: String, strict: Bool? = nil, index: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<String> {
        var localVariablePath = "/emails/{emailId}/contentPart/raw"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentType": (wrappedValue: contentType.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "strict": (wrappedValue: strict?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "index": (wrappedValue: index?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email count
     
     - parameter inboxId: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CountDto>
     */
    open class func getEmailCount(inboxId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CountDto> {
        let deferred = Promise<CountDto>.pending()
        getEmailCountWithRequestBuilder(inboxId: inboxId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email count
     - GET /emails/emails/count
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CountDto> 
     */
    open class func getEmailCountWithRequestBuilder(inboxId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CountDto> {
        let localVariablePath = "/emails/emails/count"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CountDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email content as HTML. For displaying emails in browser context.
     
     - parameter emailId: (path)  
     - parameter replaceCidImages: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<String>
     */
    open class func getEmailHTML(emailId: UUID, replaceCidImages: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<String> {
        let deferred = Promise<String>.pending()
        getEmailHTMLWithRequestBuilder(emailId: emailId, replaceCidImages: replaceCidImages, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email content as HTML. For displaying emails in browser context.
     - GET /emails/{emailId}/html
     - Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: `?apiKey=xxx`. Returns content-type `text/html;charset=utf-8` so you must call expecting that content response not JSON. For JSON response see the `getEmailHTMLJson` method.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter replaceCidImages: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func getEmailHTMLWithRequestBuilder(emailId: UUID, replaceCidImages: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<String> {
        var localVariablePath = "/emails/{emailId}/html"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "replaceCidImages": (wrappedValue: replaceCidImages?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email content as HTML in JSON wrapper. For fetching entity decoded HTML content
     
     - parameter emailId: (path)  
     - parameter replaceCidImages: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailHtmlDto>
     */
    open class func getEmailHTMLJson(emailId: UUID, replaceCidImages: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailHtmlDto> {
        let deferred = Promise<EmailHtmlDto>.pending()
        getEmailHTMLJsonWithRequestBuilder(emailId: emailId, replaceCidImages: replaceCidImages, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email content as HTML in JSON wrapper. For fetching entity decoded HTML content
     - GET /emails/{emailId}/html/json
     - Retrieve email content as HTML response. Decodes quoted-printable entities and converts charset to UTF-8. Returns content-type `application/json;charset=utf-8` so you must call expecting that content response not JSON.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter replaceCidImages: (query)  (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailHtmlDto> 
     */
    open class func getEmailHTMLJsonWithRequestBuilder(emailId: UUID, replaceCidImages: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailHtmlDto> {
        var localVariablePath = "/emails/{emailId}/html/json"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "replaceCidImages": (wrappedValue: replaceCidImages?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailHtmlDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Parse and return text from an email, stripping HTML and decoding encoded characters
     
     - parameter emailId: (path) ID of email to perform HTML query on 
     - parameter htmlSelector: (query) HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailTextLinesResult>
     */
    open class func getEmailHTMLQuery(emailId: UUID, htmlSelector: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailTextLinesResult> {
        let deferred = Promise<EmailTextLinesResult>.pending()
        getEmailHTMLQueryWithRequestBuilder(emailId: emailId, htmlSelector: htmlSelector, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Parse and return text from an email, stripping HTML and decoding encoded characters
     - GET /emails/{emailId}/htmlQuery
     - Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to perform HTML query on 
     - parameter htmlSelector: (query) HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailTextLinesResult> 
     */
    open class func getEmailHTMLQueryWithRequestBuilder(emailId: UUID, htmlSelector: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailTextLinesResult> {
        var localVariablePath = "/emails/{emailId}/htmlQuery"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "htmlSelector": (wrappedValue: htmlSelector.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailTextLinesResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Parse and return list of links found in an email (only works for HTML content)
     
     - parameter emailId: (path) ID of email to fetch text for 
     - parameter selector: (query) Optional HTML query selector for links (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailLinksResult>
     */
    open class func getEmailLinks(emailId: UUID, selector: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailLinksResult> {
        let deferred = Promise<EmailLinksResult>.pending()
        getEmailLinksWithRequestBuilder(emailId: emailId, selector: selector, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Parse and return list of links found in an email (only works for HTML content)
     - GET /emails/{emailId}/links
     - HTML parsing uses JSoup and UNIX line separators. Searches content for href attributes
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to fetch text for 
     - parameter selector: (query) Optional HTML query selector for links (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailLinksResult> 
     */
    open class func getEmailLinksWithRequestBuilder(emailId: UUID, selector: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailLinksResult> {
        var localVariablePath = "/emails/{emailId}/links"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "selector": (wrappedValue: selector?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailLinksResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email URLs for viewing in browser or downloading
     
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailPreviewUrls>
     */
    open class func getEmailPreviewURLs(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailPreviewUrls> {
        let deferred = Promise<EmailPreviewUrls>.pending()
        getEmailPreviewURLsWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email URLs for viewing in browser or downloading
     - GET /emails/{emailId}/urls
     - Get a list of URLs for email content as text/html or raw SMTP message for viewing the message in a browser.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailPreviewUrls> 
     */
    open class func getEmailPreviewURLsWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailPreviewUrls> {
        var localVariablePath = "/emails/{emailId}/urls"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailPreviewUrls>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Take a screenshot of an email in a browser and return base64 encoded string
     
     - parameter emailId: (path)  
     - parameter getEmailScreenshotOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailScreenshotResult>
     */
    open class func getEmailScreenshotAsBase64(emailId: UUID, getEmailScreenshotOptions: GetEmailScreenshotOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailScreenshotResult> {
        let deferred = Promise<EmailScreenshotResult>.pending()
        getEmailScreenshotAsBase64WithRequestBuilder(emailId: emailId, getEmailScreenshotOptions: getEmailScreenshotOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Take a screenshot of an email in a browser and return base64 encoded string
     - POST /emails/{emailId}/screenshot/base64
     - Capture image of email screenshot and return as base64 encoded string. Useful for embedding in HTML. Be careful as this may contain sensitive information.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter getEmailScreenshotOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailScreenshotResult> 
     */
    open class func getEmailScreenshotAsBase64WithRequestBuilder(emailId: UUID, getEmailScreenshotOptions: GetEmailScreenshotOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailScreenshotResult> {
        var localVariablePath = "/emails/{emailId}/screenshot/base64"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getEmailScreenshotOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailScreenshotResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Take a screenshot of an email in a browser
     
     - parameter emailId: (path)  
     - parameter getEmailScreenshotOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func getEmailScreenshotAsBinary(emailId: UUID, getEmailScreenshotOptions: GetEmailScreenshotOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getEmailScreenshotAsBinaryWithRequestBuilder(emailId: emailId, getEmailScreenshotOptions: getEmailScreenshotOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Take a screenshot of an email in a browser
     - POST /emails/{emailId}/screenshot/binary
     - Returns binary octet-stream of screenshot of the given email
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter getEmailScreenshotOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func getEmailScreenshotAsBinaryWithRequestBuilder(emailId: UUID, getEmailScreenshotOptions: GetEmailScreenshotOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/emails/{emailId}/screenshot/binary"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getEmailScreenshotOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email data including headers but not body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     
     - parameter emailId: (path)  
     - parameter decode: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailPreview>
     */
    open class func getEmailSummary(emailId: UUID, decode: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailPreview> {
        let deferred = Promise<EmailPreview>.pending()
        getEmailSummaryWithRequestBuilder(emailId: emailId, decode: decode, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email data including headers but not body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     - GET /emails/{emailId}/summary
     - Returns a email summary object with headers. To retrieve the body see getEmail and to get raw unparsed email use the getRawEmail endpoints
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter decode: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailPreview> 
     */
    open class func getEmailSummaryWithRequestBuilder(emailId: UUID, decode: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailPreview> {
        var localVariablePath = "/emails/{emailId}/summary"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "decode": (wrappedValue: decode?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailPreview>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Parse and return text from an email, stripping HTML and decoding encoded characters
     
     - parameter emailId: (path) ID of email to fetch text for 
     - parameter decodeHtmlEntities: (query) Decode HTML entities (optional)
     - parameter lineSeparator: (query) Line separator character (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailTextLinesResult>
     */
    open class func getEmailTextLines(emailId: UUID, decodeHtmlEntities: Bool? = nil, lineSeparator: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailTextLinesResult> {
        let deferred = Promise<EmailTextLinesResult>.pending()
        getEmailTextLinesWithRequestBuilder(emailId: emailId, decodeHtmlEntities: decodeHtmlEntities, lineSeparator: lineSeparator, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Parse and return text from an email, stripping HTML and decoding encoded characters
     - GET /emails/{emailId}/textLines
     - Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to fetch text for 
     - parameter decodeHtmlEntities: (query) Decode HTML entities (optional)
     - parameter lineSeparator: (query) Line separator character (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailTextLinesResult> 
     */
    open class func getEmailTextLinesWithRequestBuilder(emailId: UUID, decodeHtmlEntities: Bool? = nil, lineSeparator: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailTextLinesResult> {
        var localVariablePath = "/emails/{emailId}/textLines"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "decodeHtmlEntities": (wrappedValue: decodeHtmlEntities?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lineSeparator": (wrappedValue: lineSeparator?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailTextLinesResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Return email thread information. Use items endpoints to get messages for thread.
     
     - parameter threadId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailThreadDto>
     */
    open class func getEmailThread(threadId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailThreadDto> {
        let deferred = Promise<EmailThreadDto>.pending()
        getEmailThreadWithRequestBuilder(threadId: threadId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Return email thread information. Use items endpoints to get messages for thread.
     - GET /emails/threads/{threadId}
     - Return email message thread summary from Message-ID, In-Reply-To, and References header. Get messages using items endpoint
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter threadId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailThreadDto> 
     */
    open class func getEmailThreadWithRequestBuilder(threadId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailThreadDto> {
        var localVariablePath = "/emails/threads/{threadId}"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{threadId}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailThreadDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getEmailThreadItems: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Return email thread items.
     
     - parameter threadId: (path)  
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailThreadItemsDto>
     */
    open class func getEmailThreadItems(threadId: UUID, sort: Sort_getEmailThreadItems? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailThreadItemsDto> {
        let deferred = Promise<EmailThreadItemsDto>.pending()
        getEmailThreadItemsWithRequestBuilder(threadId: threadId, sort: sort, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Return email thread items.
     - GET /emails/threads/{threadId}/items
     - Return email thread messages based on Message-ID, In-Reply-To, and References header
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter threadId: (path)  
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailThreadItemsDto> 
     */
    open class func getEmailThreadItemsWithRequestBuilder(threadId: UUID, sort: Sort_getEmailThreadItems? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailThreadItemsDto> {
        var localVariablePath = "/emails/threads/{threadId}/items"
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{threadId}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailThreadItemsDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getEmailThreads: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Return email threads in paginated form
     
     - parameter htmlSelector: (query) Optional inbox filter (optional)
     - parameter page: (query) Optional page index in email thread pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email thread pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter search filter for email threads. (optional)
     - parameter since: (query) Optional filter email threads created since time (optional)
     - parameter before: (query) Optional filter emails threads created before given date time (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEmailThreadProjection>
     */
    open class func getEmailThreads(htmlSelector: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getEmailThreads? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEmailThreadProjection> {
        let deferred = Promise<PageEmailThreadProjection>.pending()
        getEmailThreadsWithRequestBuilder(htmlSelector: htmlSelector, page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Return email threads in paginated form
     - GET /emails/threads
     - Return email message chains built from Message-ID, In-Reply-To, and References header.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter htmlSelector: (query) Optional inbox filter (optional)
     - parameter page: (query) Optional page index in email thread pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email thread pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter search filter for email threads. (optional)
     - parameter since: (query) Optional filter email threads created since time (optional)
     - parameter before: (query) Optional filter emails threads created before given date time (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEmailThreadProjection> 
     */
    open class func getEmailThreadsWithRequestBuilder(htmlSelector: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getEmailThreads? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEmailThreadProjection> {
        let localVariablePath = "/emails/threads"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "htmlSelector": (wrappedValue: htmlSelector?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEmailThreadProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getEmailsOffsetPaginated: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all emails in all inboxes in paginated form. Email API list all.
     
     - parameter inboxId: (query) Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
     - parameter page: (query) Optional page index in email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter searchFilter: (query) Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body (optional)
     - parameter since: (query) Optional filter emails received after given date time (optional)
     - parameter before: (query) Optional filter emails received before given date time (optional)
     - parameter favourited: (query) Optional filter emails that are favourited (optional)
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter include: (query) Optional list of IDs to include in result (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEmailProjection>
     */
    open class func getEmailsOffsetPaginated(inboxId: [UUID]? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getEmailsOffsetPaginated? = nil, unreadOnly: Bool? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, favourited: Bool? = nil, syncConnectors: Bool? = nil, plusAddressId: UUID? = nil, include: [UUID]? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEmailProjection> {
        let deferred = Promise<PageEmailProjection>.pending()
        getEmailsOffsetPaginatedWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort, unreadOnly: unreadOnly, searchFilter: searchFilter, since: since, before: before, favourited: favourited, syncConnectors: syncConnectors, plusAddressId: plusAddressId, include: include, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all emails in all inboxes in paginated form. Email API list all.
     - GET /emails/offset-paginated
     - By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
     - parameter page: (query) Optional page index in email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter searchFilter: (query) Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body (optional)
     - parameter since: (query) Optional filter emails received after given date time (optional)
     - parameter before: (query) Optional filter emails received before given date time (optional)
     - parameter favourited: (query) Optional filter emails that are favourited (optional)
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter include: (query) Optional list of IDs to include in result (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEmailProjection> 
     */
    open class func getEmailsOffsetPaginatedWithRequestBuilder(inboxId: [UUID]? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getEmailsOffsetPaginated? = nil, unreadOnly: Bool? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, favourited: Bool? = nil, syncConnectors: Bool? = nil, plusAddressId: UUID? = nil, include: [UUID]? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEmailProjection> {
        let localVariablePath = "/emails/offset-paginated"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "unreadOnly": (wrappedValue: unreadOnly?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "favourited": (wrappedValue: favourited?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "syncConnectors": (wrappedValue: syncConnectors?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "plusAddressId": (wrappedValue: plusAddressId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEmailProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getEmailsPaginated: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all emails in all inboxes in paginated form. Email API list all.
     
     - parameter inboxId: (query) Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
     - parameter page: (query) Optional page index in email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter searchFilter: (query) Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body (optional)
     - parameter since: (query) Optional filter emails received after given date time. If unset will use time 24hours prior to now. (optional)
     - parameter before: (query) Optional filter emails received before given date time (optional)
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter favourited: (query) Optional filter emails that are favourited (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEmailProjection>
     */
    open class func getEmailsPaginated(inboxId: [UUID]? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getEmailsPaginated? = nil, unreadOnly: Bool? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, syncConnectors: Bool? = nil, plusAddressId: UUID? = nil, favourited: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEmailProjection> {
        let deferred = Promise<PageEmailProjection>.pending()
        getEmailsPaginatedWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort, unreadOnly: unreadOnly, searchFilter: searchFilter, since: since, before: before, syncConnectors: syncConnectors, plusAddressId: plusAddressId, favourited: favourited, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all emails in all inboxes in paginated form. Email API list all.
     - GET /emails
     - By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
     - parameter page: (query) Optional page index in email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter searchFilter: (query) Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body (optional)
     - parameter since: (query) Optional filter emails received after given date time. If unset will use time 24hours prior to now. (optional)
     - parameter before: (query) Optional filter emails received before given date time (optional)
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter favourited: (query) Optional filter emails that are favourited (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEmailProjection> 
     */
    open class func getEmailsPaginatedWithRequestBuilder(inboxId: [UUID]? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getEmailsPaginated? = nil, unreadOnly: Bool? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, syncConnectors: Bool? = nil, plusAddressId: UUID? = nil, favourited: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEmailProjection> {
        let localVariablePath = "/emails"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "unreadOnly": (wrappedValue: unreadOnly?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "syncConnectors": (wrappedValue: syncConnectors?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "plusAddressId": (wrappedValue: plusAddressId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "favourited": (wrappedValue: favourited?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEmailProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter emailAddress: (query)  
     - parameter size: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<GravatarUrl>
     */
    open class func getGravatarUrlForEmailAddress(emailAddress: String, size: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<GravatarUrl> {
        let deferred = Promise<GravatarUrl>.pending()
        getGravatarUrlForEmailAddressWithRequestBuilder(emailAddress: emailAddress, size: size, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /emails/gravatarFor
     - Get gravatar url for email address
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailAddress: (query)  
     - parameter size: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GravatarUrl> 
     */
    open class func getGravatarUrlForEmailAddressWithRequestBuilder(emailAddress: String, size: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<GravatarUrl> {
        let localVariablePath = "/emails/gravatarFor"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emailAddress": (wrappedValue: emailAddress.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GravatarUrl>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get latest email in all inboxes. Most recently received.
     
     - parameter inboxIds: (query) Optional set of inboxes to filter by. Only get the latest email from these inbox IDs. If not provided will search across all inboxes (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Email>
     */
    open class func getLatestEmail(inboxIds: [UUID]? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Email> {
        let deferred = Promise<Email>.pending()
        getLatestEmailWithRequestBuilder(inboxIds: inboxIds, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get latest email in all inboxes. Most recently received.
     - GET /emails/latest
     - Get the newest email in all inboxes or in a passed set of inbox IDs
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxIds: (query) Optional set of inboxes to filter by. Only get the latest email from these inbox IDs. If not provided will search across all inboxes (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Email> 
     */
    open class func getLatestEmailWithRequestBuilder(inboxIds: [UUID]? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Email> {
        let localVariablePath = "/emails/latest"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxIds": (wrappedValue: inboxIds?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Email>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get latest email in an inbox. Use `WaitForController` to get emails that may not have arrived yet.
     
     - parameter inboxId: (query) ID of the inbox you want to get the latest email from 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Email>
     */
    open class func getLatestEmailInInbox1(inboxId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Email> {
        let deferred = Promise<Email>.pending()
        getLatestEmailInInbox1WithRequestBuilder(inboxId: inboxId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get latest email in an inbox. Use `WaitForController` to get emails that may not have arrived yet.
     - GET /emails/latestIn
     - Get the newest email in all inboxes or in a passed set of inbox IDs
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) ID of the inbox you want to get the latest email from 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Email> 
     */
    open class func getLatestEmailInInbox1WithRequestBuilder(inboxId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Email> {
        let localVariablePath = "/emails/latestIn"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Email>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getOrganizationEmailsPaginated: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all organization emails. List team or shared test email accounts
     
     - parameter inboxId: (query) Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
     - parameter page: (query) Optional page index in email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter searchFilter: (query) Optional search filter search filter for emails. (optional)
     - parameter since: (query) Optional filter emails received after given date time. If unset will use time 24hours prior to now. (optional)
     - parameter before: (query) Optional filter emails received before given date time (optional)
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter favourited: (query) Search only favorited emails (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEmailProjection>
     */
    open class func getOrganizationEmailsPaginated(inboxId: [UUID]? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getOrganizationEmailsPaginated? = nil, unreadOnly: Bool? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, syncConnectors: Bool? = nil, favourited: Bool? = nil, plusAddressId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEmailProjection> {
        let deferred = Promise<PageEmailProjection>.pending()
        getOrganizationEmailsPaginatedWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort, unreadOnly: unreadOnly, searchFilter: searchFilter, since: since, before: before, syncConnectors: syncConnectors, favourited: favourited, plusAddressId: plusAddressId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all organization emails. List team or shared test email accounts
     - GET /emails/organization
     - By default returns all emails across all team inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
     - parameter page: (query) Optional page index in email list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter unreadOnly: (query) Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
     - parameter searchFilter: (query) Optional search filter search filter for emails. (optional)
     - parameter since: (query) Optional filter emails received after given date time. If unset will use time 24hours prior to now. (optional)
     - parameter before: (query) Optional filter emails received before given date time (optional)
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter favourited: (query) Search only favorited emails (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEmailProjection> 
     */
    open class func getOrganizationEmailsPaginatedWithRequestBuilder(inboxId: [UUID]? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getOrganizationEmailsPaginated? = nil, unreadOnly: Bool? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, syncConnectors: Bool? = nil, favourited: Bool? = nil, plusAddressId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEmailProjection> {
        let localVariablePath = "/emails/organization"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "unreadOnly": (wrappedValue: unreadOnly?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "syncConnectors": (wrappedValue: syncConnectors?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "favourited": (wrappedValue: favourited?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "plusAddressId": (wrappedValue: plusAddressId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEmailProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get raw email string. Returns unparsed raw SMTP message with headers and body.
     
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func getRawEmailContents(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getRawEmailContentsWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get raw email string. Returns unparsed raw SMTP message with headers and body.
     - GET /emails/{emailId}/raw
     - Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func getRawEmailContentsWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/emails/{emailId}/raw"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get raw email in JSON. Unparsed SMTP message in JSON wrapper format.
     
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<RawEmailJson>
     */
    open class func getRawEmailJson(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<RawEmailJson> {
        let deferred = Promise<RawEmailJson>.pending()
        getRawEmailJsonWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get raw email in JSON. Unparsed SMTP message in JSON wrapper format.
     - GET /emails/{emailId}/raw/json
     - Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RawEmailJson> 
     */
    open class func getRawEmailJsonWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<RawEmailJson> {
        var localVariablePath = "/emails/{emailId}/raw/json"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RawEmailJson>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get unread email count
     
     - parameter inboxId: (query) Optional inbox ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<UnreadCount>
     */
    open class func getUnreadEmailCount(inboxId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<UnreadCount> {
        let deferred = Promise<UnreadCount>.pending()
        getUnreadEmailCountWithRequestBuilder(inboxId: inboxId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get unread email count
     - GET /emails/unreadCount
     - Get number of emails unread. Unread means has not been viewed in dashboard or returned in an email API response
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UnreadCount> 
     */
    open class func getUnreadEmailCountWithRequestBuilder(inboxId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<UnreadCount> {
        let localVariablePath = "/emails/unreadCount"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnreadCount>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Mark all emails as read or unread
     
     - parameter read: (query) What value to assign to email read property. Default true. (optional, default to true)
     - parameter inboxId: (query) Optional inbox ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func markAllAsRead(read: Bool? = nil, inboxId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        markAllAsReadWithRequestBuilder(read: read, inboxId: inboxId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Mark all emails as read or unread
     - PATCH /emails/read
     - Marks all emails as read or unread. Pass boolean read flag to set value. This is useful if you want to read an email but keep it as unread
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter read: (query) What value to assign to email read property. Default true. (optional, default to true)
     - parameter inboxId: (query) Optional inbox ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func markAllAsReadWithRequestBuilder(read: Bool? = nil, inboxId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/emails/read"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "read": (wrappedValue: read?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Mark an email as read or unread
     
     - parameter emailId: (path)  
     - parameter read: (query) What value to assign to email read property. Default true. (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailPreview>
     */
    open class func markAsRead(emailId: UUID, read: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailPreview> {
        let deferred = Promise<EmailPreview>.pending()
        markAsReadWithRequestBuilder(emailId: emailId, read: read, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Mark an email as read or unread
     - PATCH /emails/{emailId}/read
     - Marks an email as read or unread. Pass boolean read flag to set value. This is useful if you want to read an email but keep it as unread
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path)  
     - parameter read: (query) What value to assign to email read property. Default true. (optional, default to true)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailPreview> 
     */
    open class func markAsReadWithRequestBuilder(emailId: UUID, read: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailPreview> {
        var localVariablePath = "/emails/{emailId}/read"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "read": (wrappedValue: read?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailPreview>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Reply to an email
     
     - parameter emailId: (path) ID of the email that should be replied to 
     - parameter replyToEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<SentEmailDto>
     */
    open class func replyToEmail(emailId: UUID, replyToEmailOptions: ReplyToEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<SentEmailDto> {
        let deferred = Promise<SentEmailDto>.pending()
        replyToEmailWithRequestBuilder(emailId: emailId, replyToEmailOptions: replyToEmailOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Reply to an email
     - PUT /emails/{emailId}
     - Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails `to`, `cc`, and `bcc`.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of the email that should be replied to 
     - parameter replyToEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SentEmailDto> 
     */
    open class func replyToEmailWithRequestBuilder(emailId: UUID, replyToEmailOptions: ReplyToEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<SentEmailDto> {
        var localVariablePath = "/emails/{emailId}"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: replyToEmailOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SentEmailDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get all emails by search criteria. Return in paginated form.
     
     - parameter searchEmailsOptions: (body)  
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter favourited: (query) Search only favourited emails (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEmailProjection>
     */
    open class func searchEmails(searchEmailsOptions: SearchEmailsOptions, syncConnectors: Bool? = nil, favourited: Bool? = nil, plusAddressId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEmailProjection> {
        let deferred = Promise<PageEmailProjection>.pending()
        searchEmailsWithRequestBuilder(searchEmailsOptions: searchEmailsOptions, syncConnectors: syncConnectors, favourited: favourited, plusAddressId: plusAddressId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all emails by search criteria. Return in paginated form.
     - POST /emails/search
     - Search emails by given criteria return matches in paginated format. Searches against email recipients, sender, subject, email address and ID. Does not search email body
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter searchEmailsOptions: (body)  
     - parameter syncConnectors: (query) Sync connectors (optional)
     - parameter favourited: (query) Search only favourited emails (optional)
     - parameter plusAddressId: (query) Optional plus address ID filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEmailProjection> 
     */
    open class func searchEmailsWithRequestBuilder(searchEmailsOptions: SearchEmailsOptions, syncConnectors: Bool? = nil, favourited: Bool? = nil, plusAddressId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEmailProjection> {
        let localVariablePath = "/emails/search"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchEmailsOptions, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "syncConnectors": (wrappedValue: syncConnectors?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "favourited": (wrappedValue: favourited?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "plusAddressId": (wrappedValue: plusAddressId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEmailProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Send email
     
     - parameter sendEmailOptions: (body)  
     - parameter inboxId: (query) ID of the inbox you want to send the email from (optional)
     - parameter useDomainPool: (query) Use domain pool. Optionally create inbox to send from using the mailslurp domain pool. (optional)
     - parameter virtualSend: (query) Optionally create inbox to send from that is a virtual inbox and won&#39;t send to external addresses (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func sendEmailSourceOptional(sendEmailOptions: SendEmailOptions, inboxId: UUID? = nil, useDomainPool: Bool? = nil, virtualSend: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        sendEmailSourceOptionalWithRequestBuilder(sendEmailOptions: sendEmailOptions, inboxId: inboxId, useDomainPool: useDomainPool, virtualSend: virtualSend, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Send email
     - POST /emails
     - Alias for `InboxController.sendEmail` method - see original method for full details. Sends an email from a given inbox that you have created. If no inbox is supplied a random inbox will be created for you and used to send the email.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter sendEmailOptions: (body)  
     - parameter inboxId: (query) ID of the inbox you want to send the email from (optional)
     - parameter useDomainPool: (query) Use domain pool. Optionally create inbox to send from using the mailslurp domain pool. (optional)
     - parameter virtualSend: (query) Optionally create inbox to send from that is a virtual inbox and won&#39;t send to external addresses (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func sendEmailSourceOptionalWithRequestBuilder(sendEmailOptions: SendEmailOptions, inboxId: UUID? = nil, useDomainPool: Bool? = nil, virtualSend: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/emails"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendEmailOptions, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "useDomainPool": (wrappedValue: useDomainPool?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "virtualSend": (wrappedValue: virtualSend?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Set email favourited state
     
     - parameter emailId: (path) ID of email to set favourite state 
     - parameter favourited: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func setEmailFavourited(emailId: UUID, favourited: Bool, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        setEmailFavouritedWithRequestBuilder(emailId: emailId, favourited: favourited, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Set email favourited state
     - PUT /emails/{emailId}/favourite
     - Set and return new favorite state for an email
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email to set favourite state 
     - parameter favourited: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func setEmailFavouritedWithRequestBuilder(emailId: UUID, favourited: Bool, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/emails/{emailId}/favourite"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "favourited": (wrappedValue: favourited.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Validate email HTML contents
     
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<ValidationDto>
     */
    open class func validateEmail(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<ValidationDto> {
        let deferred = Promise<ValidationDto>.pending()
        validateEmailWithRequestBuilder(emailId: emailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Validate email HTML contents
     - POST /emails/{emailId}/validate
     - Validate the HTML content of email if HTML is found. Considered valid if no HTML is present.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailId: (path) ID of email 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ValidationDto> 
     */
    open class func validateEmailWithRequestBuilder(emailId: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<ValidationDto> {
        var localVariablePath = "/emails/{emailId}/validate"
        let emailIdPreEscape = "\(APIHelper.mapValueToPathItem(emailId))"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ValidationDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
