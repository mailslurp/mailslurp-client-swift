//
// EmailVerificationControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class EmailVerificationControllerAPI : NSObject {

    /**
     * enum for parameter sort
     */
    public enum Sort_getValidationRequests: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Validate a list of email addresses. Per unit billing. See your plan for pricing.
     
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter isValid: (query) Filter where email is valid is true or false (optional)
     - returns: Promise<PageEmailValidationRequest>
     */
    open class func getValidationRequests( page: Int? = nil,  size: Int? = nil,  sort: Sort_getValidationRequests? = nil,  searchFilter: String? = nil,  since: Date? = nil,  before: Date? = nil,  isValid: Bool? = nil) -> Promise<PageEmailValidationRequest> {
        let deferred = Promise<PageEmailValidationRequest>.pending()
        getValidationRequestsWithRequestBuilder(page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before, isValid: isValid).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Validate a list of email addresses. Per unit billing. See your plan for pricing.
     - GET /email-verification/validation-requests
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for paginated result list. (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter isValid: (query) Filter where email is valid is true or false (optional)
     - returns: RequestBuilder<PageEmailValidationRequest> 
     */
    open class func getValidationRequestsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getValidationRequests? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, isValid: Bool? = nil) -> RequestBuilder<PageEmailValidationRequest> {
        let localVariablePath = "/email-verification/validation-requests"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
            "isValid": (wrappedValue: isValid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEmailValidationRequest>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Validate a list of email addresses. Per unit billing. See your plan for pricing.
     
     - parameter validateEmailAddressListOptions: (body)  
     - returns: Promise<ValidateEmailAddressListResult>
     */
    open class func validateEmailAddressList( validateEmailAddressListOptions: ValidateEmailAddressListOptions) -> Promise<ValidateEmailAddressListResult> {
        let deferred = Promise<ValidateEmailAddressListResult>.pending()
        validateEmailAddressListWithRequestBuilder(validateEmailAddressListOptions: validateEmailAddressListOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Validate a list of email addresses. Per unit billing. See your plan for pricing.
     - POST /email-verification/email-address-list
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter validateEmailAddressListOptions: (body)  
     - returns: RequestBuilder<ValidateEmailAddressListResult> 
     */
    open class func validateEmailAddressListWithRequestBuilder(validateEmailAddressListOptions: ValidateEmailAddressListOptions) -> RequestBuilder<ValidateEmailAddressListResult> {
        let localVariablePath = "/email-verification/email-address-list"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: validateEmailAddressListOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ValidateEmailAddressListResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
