//
// RulesetControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class RulesetControllerAPI : NSObject {

    /**
     Create a ruleset
     
     - parameter createRulesetOptions: (body)  
     - parameter inboxId: (query) Inbox id to attach ruleset to (optional)
     - parameter phoneId: (query) Phone id to attach ruleset to (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<RulesetDto>
     */
    open class func createNewRuleset(createRulesetOptions: CreateRulesetOptions, inboxId: UUID? = nil, phoneId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<RulesetDto> {
        let deferred = Promise<RulesetDto>.pending()
        createNewRulesetWithRequestBuilder(createRulesetOptions: createRulesetOptions, inboxId: inboxId, phoneId: phoneId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a ruleset
     - POST /rulesets
     - Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createRulesetOptions: (body)  
     - parameter inboxId: (query) Inbox id to attach ruleset to (optional)
     - parameter phoneId: (query) Phone id to attach ruleset to (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RulesetDto> 
     */
    open class func createNewRulesetWithRequestBuilder(createRulesetOptions: CreateRulesetOptions, inboxId: UUID? = nil, phoneId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<RulesetDto> {
        let localVariablePath = "/rulesets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createRulesetOptions, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RulesetDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a ruleset
     
     - parameter _id: (path) ID of ruleset 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteRuleset(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteRulesetWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete a ruleset
     - DELETE /rulesets/{id}
     - Delete ruleset
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path) ID of ruleset 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteRulesetWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/rulesets/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete rulesets
     
     - parameter inboxId: (query) Optional inbox id to attach ruleset to (optional)
     - parameter phoneId: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteRulesets(inboxId: UUID? = nil, phoneId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteRulesetsWithRequestBuilder(inboxId: inboxId, phoneId: phoneId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete rulesets
     - DELETE /rulesets
     - Delete rulesets. Accepts optional inboxId or phoneId filters.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to attach ruleset to (optional)
     - parameter phoneId: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteRulesetsWithRequestBuilder(inboxId: UUID? = nil, phoneId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/rulesets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a ruleset
     
     - parameter _id: (path) ID of ruleset 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<RulesetDto>
     */
    open class func getRuleset(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<RulesetDto> {
        let deferred = Promise<RulesetDto>.pending()
        getRulesetWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a ruleset
     - GET /rulesets/{id}
     - Get ruleset
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path) ID of ruleset 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RulesetDto> 
     */
    open class func getRulesetWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<RulesetDto> {
        var localVariablePath = "/rulesets/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RulesetDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getRulesets: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List rulesets block and allow lists
     
     - parameter inboxId: (query) Optional inbox id to get rulesets from (optional)
     - parameter phoneId: (query) Optional phone id to get rulesets from (optional)
     - parameter page: (query) Optional page index in inbox ruleset list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox ruleset list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageRulesetDto>
     */
    open class func getRulesets(inboxId: UUID? = nil, phoneId: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getRulesets? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageRulesetDto> {
        let deferred = Promise<PageRulesetDto>.pending()
        getRulesetsWithRequestBuilder(inboxId: inboxId, phoneId: phoneId, page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List rulesets block and allow lists
     - GET /rulesets
     - List all rulesets attached to an inbox or phone or account
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to get rulesets from (optional)
     - parameter phoneId: (query) Optional phone id to get rulesets from (optional)
     - parameter page: (query) Optional page index in inbox ruleset list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox ruleset list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageRulesetDto> 
     */
    open class func getRulesetsWithRequestBuilder(inboxId: UUID? = nil, phoneId: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getRulesets? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageRulesetDto> {
        let localVariablePath = "/rulesets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "searchFilter": (wrappedValue: searchFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageRulesetDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Test inbox rulesets for inbox
     
     - parameter inboxId: (query) ID of inbox 
     - parameter rulesetTestOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<InboxRulesetTestResult>
     */
    open class func testInboxRulesetsForInbox(inboxId: UUID, rulesetTestOptions: RulesetTestOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<InboxRulesetTestResult> {
        let deferred = Promise<InboxRulesetTestResult>.pending()
        testInboxRulesetsForInboxWithRequestBuilder(inboxId: inboxId, rulesetTestOptions: rulesetTestOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test inbox rulesets for inbox
     - PUT /rulesets
     - Test inbox rulesets for inbox
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxId: (query) ID of inbox 
     - parameter rulesetTestOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InboxRulesetTestResult> 
     */
    open class func testInboxRulesetsForInboxWithRequestBuilder(inboxId: UUID, rulesetTestOptions: RulesetTestOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<InboxRulesetTestResult> {
        let localVariablePath = "/rulesets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rulesetTestOptions, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": (wrappedValue: inboxId.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxRulesetTestResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Test new ruleset
     
     - parameter testNewInboxRulesetOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<InboxRulesetTestResult>
     */
    open class func testNewRuleset(testNewInboxRulesetOptions: TestNewInboxRulesetOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<InboxRulesetTestResult> {
        let deferred = Promise<InboxRulesetTestResult>.pending()
        testNewRulesetWithRequestBuilder(testNewInboxRulesetOptions: testNewInboxRulesetOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test new ruleset
     - PATCH /rulesets
     - Test new ruleset
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter testNewInboxRulesetOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InboxRulesetTestResult> 
     */
    open class func testNewRulesetWithRequestBuilder(testNewInboxRulesetOptions: TestNewInboxRulesetOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<InboxRulesetTestResult> {
        let localVariablePath = "/rulesets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testNewInboxRulesetOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxRulesetTestResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Test a ruleset
     
     - parameter _id: (path) ID of ruleset 
     - parameter rulesetTestOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<InboxRulesetTestResult>
     */
    open class func testRuleset(_id: UUID, rulesetTestOptions: RulesetTestOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<InboxRulesetTestResult> {
        let deferred = Promise<InboxRulesetTestResult>.pending()
        testRulesetWithRequestBuilder(_id: _id, rulesetTestOptions: rulesetTestOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test a ruleset
     - POST /rulesets/{id}/test
     - Test an inbox or phone ruleset
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path) ID of ruleset 
     - parameter rulesetTestOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InboxRulesetTestResult> 
     */
    open class func testRulesetWithRequestBuilder(_id: UUID, rulesetTestOptions: RulesetTestOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<InboxRulesetTestResult> {
        var localVariablePath = "/rulesets/{id}/test"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rulesetTestOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxRulesetTestResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Test receiving with rulesets
     
     - parameter testRulesetReceivingOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TestRulesetReceivingResult>
     */
    open class func testRulesetReceiving(testRulesetReceivingOptions: TestRulesetReceivingOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TestRulesetReceivingResult> {
        let deferred = Promise<TestRulesetReceivingResult>.pending()
        testRulesetReceivingWithRequestBuilder(testRulesetReceivingOptions: testRulesetReceivingOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test receiving with rulesets
     - POST /rulesets/test-receiving
     - Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter testRulesetReceivingOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TestRulesetReceivingResult> 
     */
    open class func testRulesetReceivingWithRequestBuilder(testRulesetReceivingOptions: TestRulesetReceivingOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TestRulesetReceivingResult> {
        let localVariablePath = "/rulesets/test-receiving"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testRulesetReceivingOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestRulesetReceivingResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Test sending with rulesets
     
     - parameter testInboxRulesetSendingOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<TestRulesetSendingResult>
     */
    open class func testRulesetSending(testInboxRulesetSendingOptions: TestInboxRulesetSendingOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<TestRulesetSendingResult> {
        let deferred = Promise<TestRulesetSendingResult>.pending()
        testRulesetSendingWithRequestBuilder(testInboxRulesetSendingOptions: testInboxRulesetSendingOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Test sending with rulesets
     - POST /rulesets/test-sending
     - Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter testInboxRulesetSendingOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TestRulesetSendingResult> 
     */
    open class func testRulesetSendingWithRequestBuilder(testInboxRulesetSendingOptions: TestInboxRulesetSendingOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<TestRulesetSendingResult> {
        let localVariablePath = "/rulesets/test-sending"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testInboxRulesetSendingOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestRulesetSendingResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
