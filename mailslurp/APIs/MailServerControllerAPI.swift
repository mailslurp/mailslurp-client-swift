//
// MailServerControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class MailServerControllerAPI : NSObject {

    /**
     Get DNS Mail Server records for a domain
     
     - parameter describeDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DescribeMailServerDomainResult>
     */
    open class func describeMailServerDomain(describeDomainOptions: DescribeDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DescribeMailServerDomainResult> {
        let deferred = Promise<DescribeMailServerDomainResult>.pending()
        describeMailServerDomainWithRequestBuilder(describeDomainOptions: describeDomainOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get DNS Mail Server records for a domain
     - POST /mail-server/describe/domain
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter describeDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DescribeMailServerDomainResult> 
     */
    open class func describeMailServerDomainWithRequestBuilder(describeDomainOptions: DescribeDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DescribeMailServerDomainResult> {
        let localVariablePath = "/mail-server/describe/domain"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: describeDomainOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DescribeMailServerDomainResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Lookup DNS records for a domain
     
     - parameter dNSLookupOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DNSLookupResults>
     */
    open class func getDnsLookup(dNSLookupOptions: DNSLookupOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DNSLookupResults> {
        let deferred = Promise<DNSLookupResults>.pending()
        getDnsLookupWithRequestBuilder(dNSLookupOptions: dNSLookupOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup DNS records for a domain
     - POST /mail-server/describe/dns-lookup
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter dNSLookupOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DNSLookupResults> 
     */
    open class func getDnsLookupWithRequestBuilder(dNSLookupOptions: DNSLookupOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DNSLookupResults> {
        let localVariablePath = "/mail-server/describe/dns-lookup"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dNSLookupOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DNSLookupResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Lookup DNS records for multiple domains
     
     - parameter dNSLookupsOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DNSLookupResults>
     */
    open class func getDnsLookups(dNSLookupsOptions: DNSLookupsOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DNSLookupResults> {
        let deferred = Promise<DNSLookupResults>.pending()
        getDnsLookupsWithRequestBuilder(dNSLookupsOptions: dNSLookupsOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup DNS records for multiple domains
     - POST /mail-server/describe/dns-lookups
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter dNSLookupsOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DNSLookupResults> 
     */
    open class func getDnsLookupsWithRequestBuilder(dNSLookupsOptions: DNSLookupsOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DNSLookupResults> {
        let localVariablePath = "/mail-server/describe/dns-lookups"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dNSLookupsOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DNSLookupResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get IP address for a domain
     
     - parameter name: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<IPAddressResult>
     */
    open class func getIpAddress(name: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<IPAddressResult> {
        let deferred = Promise<IPAddressResult>.pending()
        getIpAddressWithRequestBuilder(name: name, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get IP address for a domain
     - POST /mail-server/describe/ip-address
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter name: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<IPAddressResult> 
     */
    open class func getIpAddressWithRequestBuilder(name: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<IPAddressResult> {
        let localVariablePath = "/mail-server/describe/ip-address"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IPAddressResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
     
     - parameter verifyEmailAddressOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<EmailVerificationResult>
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func verifyEmailAddress(verifyEmailAddressOptions: VerifyEmailAddressOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<EmailVerificationResult> {
        let deferred = Promise<EmailVerificationResult>.pending()
        verifyEmailAddressWithRequestBuilder(verifyEmailAddressOptions: verifyEmailAddressOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
     - POST /mail-server/verify/email-address
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter verifyEmailAddressOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<EmailVerificationResult> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func verifyEmailAddressWithRequestBuilder(verifyEmailAddressOptions: VerifyEmailAddressOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<EmailVerificationResult> {
        let localVariablePath = "/mail-server/verify/email-address"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyEmailAddressOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailVerificationResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
