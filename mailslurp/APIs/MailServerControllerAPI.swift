//
// MailServerControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class MailServerControllerAPI {
    /**
     Get DNS Mail Server records for a domain
     
     - parameter describeDomainOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func describeMailServerDomain(describeDomainOptions: DescribeDomainOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: DescribeMailServerDomainResult?, _ error: Error?) -> Void)) {
        describeMailServerDomainWithRequestBuilder(describeDomainOptions: describeDomainOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get DNS Mail Server records for a domain
     - POST /mail-server/describe/domain
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter describeDomainOptions: (body)  
     - returns: RequestBuilder<DescribeMailServerDomainResult> 
     */
    open class func describeMailServerDomainWithRequestBuilder(describeDomainOptions: DescribeDomainOptions) -> RequestBuilder<DescribeMailServerDomainResult> {
        let path = "/mail-server/describe/domain"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: describeDomainOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DescribeMailServerDomainResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Lookup DNS records for a domain
     
     - parameter dNSLookupOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDnsLookup(dNSLookupOptions: DNSLookupOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: DNSLookupResults?, _ error: Error?) -> Void)) {
        getDnsLookupWithRequestBuilder(dNSLookupOptions: dNSLookupOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Lookup DNS records for a domain
     - POST /mail-server/describe/dns-lookup
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter dNSLookupOptions: (body)  
     - returns: RequestBuilder<DNSLookupResults> 
     */
    open class func getDnsLookupWithRequestBuilder(dNSLookupOptions: DNSLookupOptions) -> RequestBuilder<DNSLookupResults> {
        let path = "/mail-server/describe/dns-lookup"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dNSLookupOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DNSLookupResults>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get IP address for a domain
     
     - parameter name: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIpAddress(name: String, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: IPAddressResult?, _ error: Error?) -> Void)) {
        getIpAddressWithRequestBuilder(name: name).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get IP address for a domain
     - POST /mail-server/describe/ip-address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter name: (query)  
     - returns: RequestBuilder<IPAddressResult> 
     */
    open class func getIpAddressWithRequestBuilder(name: String) -> RequestBuilder<IPAddressResult> {
        let path = "/mail-server/describe/ip-address"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IPAddressResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
     
     - parameter verifyEmailAddressOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func verifyEmailAddress(verifyEmailAddressOptions: VerifyEmailAddressOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: EmailVerificationResult?, _ error: Error?) -> Void)) {
        verifyEmailAddressWithRequestBuilder(verifyEmailAddressOptions: verifyEmailAddressOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
     - POST /mail-server/verify/email-address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter verifyEmailAddressOptions: (body)  
     - returns: RequestBuilder<EmailVerificationResult> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func verifyEmailAddressWithRequestBuilder(verifyEmailAddressOptions: VerifyEmailAddressOptions) -> RequestBuilder<EmailVerificationResult> {
        let path = "/mail-server/verify/email-address"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyEmailAddressOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<EmailVerificationResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
