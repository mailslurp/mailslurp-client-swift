//
// UserControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class UserControllerAPI : NSObject {

    /**
     * enum for parameter sort
     */
    public enum Sort_getEntityAutomations: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_getEntityAutomations: String, Sendable, CaseIterable {
        case inboxForwarder = "INBOX_FORWARDER"
        case inboxReplier = "INBOX_REPLIER"
        case inboxRuleset = "INBOX_RULESET"
    }

    /**

     - parameter page: (query) Optional page index (optional, default to 0)
     - parameter size: (query) Optional page size (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inbox ID (optional)
     - parameter phoneId: (query) Optional phone ID (optional)
     - parameter filter: (query) Optional automation type filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEntityAutomationItems>
     */
    open class func getEntityAutomations(page: Int? = nil, size: Int? = nil, sort: Sort_getEntityAutomations? = nil, since: Date? = nil, before: Date? = nil, inboxId: UUID? = nil, phoneId: UUID? = nil, filter: Filter_getEntityAutomations? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEntityAutomationItems> {
        let deferred = Promise<PageEntityAutomationItems>.pending()
        getEntityAutomationsWithRequestBuilder(page: page, size: size, sort: sort, since: since, before: before, inboxId: inboxId, phoneId: phoneId, filter: filter, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /user/automations
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter page: (query) Optional page index (optional, default to 0)
     - parameter size: (query) Optional page size (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inbox ID (optional)
     - parameter phoneId: (query) Optional phone ID (optional)
     - parameter filter: (query) Optional automation type filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEntityAutomationItems> 
     */
    open class func getEntityAutomationsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getEntityAutomations? = nil, since: Date? = nil, before: Date? = nil, inboxId: UUID? = nil, phoneId: UUID? = nil, filter: Filter_getEntityAutomations? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEntityAutomationItems> {
        let localVariablePath = "/user/automations"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter": (wrappedValue: filter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEntityAutomationItems>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getEntityEvents: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_getEntityEvents: String, Sendable, CaseIterable {
        case webhookEvent = "WEBHOOK_EVENT"
        case inboxForwarderEvent = "INBOX_FORWARDER_EVENT"
        case inboxReplierEvent = "INBOX_REPLIER_EVENT"
        case inboxRulesetEvent = "INBOX_RULESET_EVENT"
        case aliasEvent = "ALIAS_EVENT"
    }

    /**

     - parameter page: (query) Optional page index (optional, default to 0)
     - parameter size: (query) Optional page size (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inbox ID (optional)
     - parameter emailId: (query) Optional email ID (optional)
     - parameter phoneId: (query) Optional phone ID (optional)
     - parameter smsId: (query) Optional SMS ID (optional)
     - parameter attachmentId: (query) Optional attachment ID (optional)
     - parameter filter: (query) Optional type filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEntityEventItems>
     */
    open class func getEntityEvents(page: Int? = nil, size: Int? = nil, sort: Sort_getEntityEvents? = nil, since: Date? = nil, before: Date? = nil, inboxId: UUID? = nil, emailId: UUID? = nil, phoneId: UUID? = nil, smsId: UUID? = nil, attachmentId: UUID? = nil, filter: Filter_getEntityEvents? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEntityEventItems> {
        let deferred = Promise<PageEntityEventItems>.pending()
        getEntityEventsWithRequestBuilder(page: page, size: size, sort: sort, since: since, before: before, inboxId: inboxId, emailId: emailId, phoneId: phoneId, smsId: smsId, attachmentId: attachmentId, filter: filter, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /user/events
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter page: (query) Optional page index (optional, default to 0)
     - parameter size: (query) Optional page size (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inbox ID (optional)
     - parameter emailId: (query) Optional email ID (optional)
     - parameter phoneId: (query) Optional phone ID (optional)
     - parameter smsId: (query) Optional SMS ID (optional)
     - parameter attachmentId: (query) Optional attachment ID (optional)
     - parameter filter: (query) Optional type filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEntityEventItems> 
     */
    open class func getEntityEventsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getEntityEvents? = nil, since: Date? = nil, before: Date? = nil, inboxId: UUID? = nil, emailId: UUID? = nil, phoneId: UUID? = nil, smsId: UUID? = nil, attachmentId: UUID? = nil, filter: Filter_getEntityEvents? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEntityEventItems> {
        let localVariablePath = "/user/events"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "emailId": (wrappedValue: emailId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "phoneId": (wrappedValue: phoneId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "smsId": (wrappedValue: smsId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attachmentId": (wrappedValue: attachmentId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter": (wrappedValue: filter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEntityEventItems>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getEntityFavorites: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_getEntityFavorites: String, Sendable, CaseIterable {
        case inbox = "INBOX"
        case email = "EMAIL"
        case attachment = "ATTACHMENT"
        case phone = "PHONE"
        case sms = "SMS"
    }

    /**

     - parameter page: (query) Optional page index (optional, default to 0)
     - parameter size: (query) Optional page size (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter filter: (query) Optional type filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageEntityFavouriteItems>
     */
    open class func getEntityFavorites(page: Int? = nil, size: Int? = nil, sort: Sort_getEntityFavorites? = nil, since: Date? = nil, before: Date? = nil, filter: Filter_getEntityFavorites? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageEntityFavouriteItems> {
        let deferred = Promise<PageEntityFavouriteItems>.pending()
        getEntityFavoritesWithRequestBuilder(page: page, size: size, sort: sort, since: since, before: before, filter: filter, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /user/favorites
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter page: (query) Optional page index (optional, default to 0)
     - parameter size: (query) Optional page size (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .desc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter filter: (query) Optional type filter (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageEntityFavouriteItems> 
     */
    open class func getEntityFavoritesWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getEntityFavorites? = nil, since: Date? = nil, before: Date? = nil, filter: Filter_getEntityFavorites? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageEntityFavouriteItems> {
        let localVariablePath = "/user/favorites"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter": (wrappedValue: filter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageEntityFavouriteItems>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter property: (query) JSON property name or dot separated path selector such as `a.b.c` 
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<String>
     */
    open class func getJsonPropertyAsString(property: String, body: JSONValue, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<String> {
        let deferred = Promise<String>.pending()
        getJsonPropertyAsStringWithRequestBuilder(property: property, body: body, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /user/json/pluck
     - Utility function to extract properties from JSON objects in language where this is cumbersome.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter property: (query) JSON property name or dot separated path selector such as `a.b.c` 
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func getJsonPropertyAsStringWithRequestBuilder(property: String, body: JSONValue, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<String> {
        let localVariablePath = "/user/json/pluck"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "property": (wrappedValue: property.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<UserInfoDto>
     */
    open class func getUserInfo(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<UserInfoDto> {
        let deferred = Promise<UserInfoDto>.pending()
        getUserInfoWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /user/info
     - Get account information for your user
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserInfoDto> 
     */
    open class func getUserInfoWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<UserInfoDto> {
        let localVariablePath = "/user/info"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserInfoDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
