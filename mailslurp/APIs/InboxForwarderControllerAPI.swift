//
// InboxForwarderControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objc open class InboxForwarderControllerAPI : NSObject {
    /**
     Create an inbox forwarder
     
     - parameter inboxId: (query) Inbox id to attach forwarder to 
     - parameter createInboxForwarderOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewInboxForwarder(inboxId: UUID, createInboxForwarderOptions: CreateInboxForwarderOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: InboxForwarderDto?, _ error: Error?) -> Void)) {
        createNewInboxForwarderWithRequestBuilder(inboxId: inboxId, createInboxForwarderOptions: createInboxForwarderOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an inbox forwarder
     - POST /forwarders
     - Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Inbox id to attach forwarder to 
     - parameter createInboxForwarderOptions: (body)  
     - returns: RequestBuilder<InboxForwarderDto> 
     */
    open class func createNewInboxForwarderWithRequestBuilder(inboxId: UUID, createInboxForwarderOptions: CreateInboxForwarderOptions) -> RequestBuilder<InboxForwarderDto> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInboxForwarderOptions)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteInboxForwarder(_id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteInboxForwarderWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an inbox forwarder
     - DELETE /forwarders/{id}
     - Delete inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxForwarderWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/forwarders/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete inbox forwarders
     
     - parameter inboxId: (query) Optional inbox id to attach forwarder to (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteInboxForwarders(inboxId: UUID? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteInboxForwardersWithRequestBuilder(inboxId: inboxId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete inbox forwarders
     - DELETE /forwarders
     - Delete inbox forwarders. Accepts optional inboxId filter.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to attach forwarder to (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteInboxForwardersWithRequestBuilder(inboxId: UUID? = nil) -> RequestBuilder<Void> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInboxForwarder(_id: UUID, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: InboxForwarderDto?, _ error: Error?) -> Void)) {
        getInboxForwarderWithRequestBuilder(_id: _id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get an inbox forwarder
     - GET /forwarders/{id}
     - Get inbox ruleset
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - returns: RequestBuilder<InboxForwarderDto> 
     */
    open class func getInboxForwarderWithRequestBuilder(_id: UUID) -> RequestBuilder<InboxForwarderDto> {
        var path = "/forwarders/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getInboxForwarders: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List inbox forwarders
     
     - parameter inboxId: (query) Optional inbox id to get forwarders from (optional)
     - parameter page: (query) Optional page index in inbox forwarder list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInboxForwarders(inboxId: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxForwarders? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: PageInboxForwarderDto?, _ error: Error?) -> Void)) {
        getInboxForwardersWithRequestBuilder(inboxId: inboxId, page: page, size: size, sort: sort, searchFilter: searchFilter, since: since, before: before).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List inbox forwarders
     - GET /forwarders
     - List all forwarders attached to an inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) Optional inbox id to get forwarders from (optional)
     - parameter page: (query) Optional page index in inbox forwarder list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox forwarder list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter searchFilter: (query) Optional search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageInboxForwarderDto> 
     */
    open class func getInboxForwardersWithRequestBuilder(inboxId: UUID? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getInboxForwarders? = nil, searchFilter: String? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageInboxForwarderDto> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "size": size?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "searchFilter": searchFilter?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "before": before?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PageInboxForwarderDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test an inbox forwarder
     
     - parameter _id: (path) ID of inbox forwarder 
     - parameter inboxForwarderTestOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testInboxForwarder(_id: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: InboxForwarderTestResult?, _ error: Error?) -> Void)) {
        testInboxForwarderWithRequestBuilder(_id: _id, inboxForwarderTestOptions: inboxForwarderTestOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Test an inbox forwarder
     - POST /forwarders/{id}/test
     - Test an inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter _id: (path) ID of inbox forwarder 
     - parameter inboxForwarderTestOptions: (body)  
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testInboxForwarderWithRequestBuilder(_id: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions) -> RequestBuilder<InboxForwarderTestResult> {
        var path = "/forwarders/{id}/test"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxForwarderTestOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test inbox forwarders for inbox
     
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxForwarderTestOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testInboxForwardersForInbox(inboxId: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: InboxForwarderTestResult?, _ error: Error?) -> Void)) {
        testInboxForwardersForInboxWithRequestBuilder(inboxId: inboxId, inboxForwarderTestOptions: inboxForwarderTestOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Test inbox forwarders for inbox
     - PUT /forwarders
     - Test inbox forwarders for inbox
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter inboxId: (query) ID of inbox 
     - parameter inboxForwarderTestOptions: (body)  
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testInboxForwardersForInboxWithRequestBuilder(inboxId: UUID, inboxForwarderTestOptions: InboxForwarderTestOptions) -> RequestBuilder<InboxForwarderTestResult> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inboxForwarderTestOptions)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Test new inbox forwarder
     
     - parameter testNewInboxForwarderOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testNewInboxForwarder(testNewInboxForwarderOptions: TestNewInboxForwarderOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: InboxForwarderTestResult?, _ error: Error?) -> Void)) {
        testNewInboxForwarderWithRequestBuilder(testNewInboxForwarderOptions: testNewInboxForwarderOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Test new inbox forwarder
     - PATCH /forwarders
     - Test new inbox forwarder
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter testNewInboxForwarderOptions: (body)  
     - returns: RequestBuilder<InboxForwarderTestResult> 
     */
    open class func testNewInboxForwarderWithRequestBuilder(testNewInboxForwarderOptions: TestNewInboxForwarderOptions) -> RequestBuilder<InboxForwarderTestResult> {
        let path = "/forwarders"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testNewInboxForwarderOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InboxForwarderTestResult>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
