//
// ConsentControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class ConsentControllerAPI : NSObject {

    /**

     - parameter emailAddress: (query) Email address to check consent for 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<OptInSendingConsentDto>
     */
    open class func checkSendingConsentForEmailAddress(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<OptInSendingConsentDto> {
        let deferred = Promise<OptInSendingConsentDto>.pending()
        checkSendingConsentForEmailAddressWithRequestBuilder(emailAddress: emailAddress, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /consent/opt-in/sending-consent
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailAddress: (query) Email address to check consent for 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OptInSendingConsentDto> 
     */
    open class func checkSendingConsentForEmailAddressWithRequestBuilder(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<OptInSendingConsentDto> {
        let localVariablePath = "/consent/opt-in/sending-consent"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emailAddress": (wrappedValue: emailAddress.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OptInSendingConsentDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getOptInIdentities: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**

     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageOptInIdentityProjection>
     */
    open class func getOptInIdentities(page: Int? = nil, size: Int? = nil, sort: Sort_getOptInIdentities? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageOptInIdentityProjection> {
        let deferred = Promise<PageOptInIdentityProjection>.pending()
        getOptInIdentitiesWithRequestBuilder(page: page, size: size, sort: sort, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /consent/opt-in
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageOptInIdentityProjection> 
     */
    open class func getOptInIdentitiesWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getOptInIdentities? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageOptInIdentityProjection> {
        let localVariablePath = "/consent/opt-in"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageOptInIdentityProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter emailAddress: (query) Email address to revoke consent for 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<OptInSendingConsentDto>
     */
    open class func revokeOptInConsentForEmailAddress(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<OptInSendingConsentDto> {
        let deferred = Promise<OptInSendingConsentDto>.pending()
        revokeOptInConsentForEmailAddressWithRequestBuilder(emailAddress: emailAddress, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /consent/opt-in
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailAddress: (query) Email address to revoke consent for 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OptInSendingConsentDto> 
     */
    open class func revokeOptInConsentForEmailAddressWithRequestBuilder(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<OptInSendingConsentDto> {
        let localVariablePath = "/consent/opt-in"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emailAddress": (wrappedValue: emailAddress.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OptInSendingConsentDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Send a verification code to a user once they have explicitly submitted their email address
     
     - parameter optInConsentOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<OptInConsentSendResult>
     */
    open class func sendOptInConsentForEmailAddress(optInConsentOptions: OptInConsentOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<OptInConsentSendResult> {
        let deferred = Promise<OptInConsentSendResult>.pending()
        sendOptInConsentForEmailAddressWithRequestBuilder(optInConsentOptions: optInConsentOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Send a verification code to a user once they have explicitly submitted their email address
     - POST /consent/opt-in/send
     - Send double-opt in consent for an email address
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter optInConsentOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<OptInConsentSendResult> 
     */
    open class func sendOptInConsentForEmailAddressWithRequestBuilder(optInConsentOptions: OptInConsentOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<OptInConsentSendResult> {
        let localVariablePath = "/consent/opt-in/send"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: optInConsentOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OptInConsentSendResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
