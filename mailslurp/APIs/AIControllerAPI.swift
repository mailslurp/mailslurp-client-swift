//
// AIControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class AIControllerAPI : NSObject {

    /**
     Create a transformer for reuse in automations
     
     - parameter aITransformCreateOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AITransformDto>
     */
    open class func createTransformer(aITransformCreateOptions: AITransformCreateOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AITransformDto> {
        let deferred = Promise<AITransformDto>.pending()
        createTransformerWithRequestBuilder(aITransformCreateOptions: aITransformCreateOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a transformer for reuse in automations
     - POST /ai/transformer
     - Save an AI transform instructions and schema for use with webhooks and automations
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter aITransformCreateOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AITransformDto> 
     */
    open class func createTransformerWithRequestBuilder(aITransformCreateOptions: AITransformCreateOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AITransformDto> {
        let localVariablePath = "/ai/transformer"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aITransformCreateOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AITransformDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create transformer mapping
     
     - parameter createAITransformerMappingOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AITransformMappingDto>
     */
    open class func createTransformerMappings(createAITransformerMappingOptions: CreateAITransformerMappingOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AITransformMappingDto> {
        let deferred = Promise<AITransformMappingDto>.pending()
        createTransformerMappingsWithRequestBuilder(createAITransformerMappingOptions: createAITransformerMappingOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create transformer mapping
     - POST /ai/transformer/mappings
     - Create AI transformer mappings to other entities
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createAITransformerMappingOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AITransformMappingDto> 
     */
    open class func createTransformerMappingsWithRequestBuilder(createAITransformerMappingOptions: CreateAITransformerMappingOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AITransformMappingDto> {
        let localVariablePath = "/ai/transformer/mappings"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAITransformerMappingOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AITransformMappingDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete all transformer mapping
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteAllTransformerMappings(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAllTransformerMappingsWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete all transformer mapping
     - DELETE /ai/transformer/mappings
     - Delete all AI transformer mappings
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllTransformerMappingsWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/ai/transformer/mappings"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a transformer
     
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteTransformer(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTransformerWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete a transformer
     - DELETE /ai/transformer/{id}
     - Delete an AI transformer and schemas by ID
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTransformerWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/ai/transformer/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete transformer mapping
     
     - parameter _id: (path) ID of transform mapping 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteTransformerMapping(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTransformerMappingWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete transformer mapping
     - DELETE /ai/transformer/mappings/{id}
     - Delete an AI transformer mapping
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path) ID of transform mapping 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTransformerMappingWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/ai/transformer/mappings/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete all transformers
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteTransformers(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTransformersWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete all transformers
     - DELETE /ai/transformer
     - Delete all AI transformers and schemas
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTransformersWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/ai/transformer"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Generate structured content for an attachment
     
     - parameter generateStructuredContentAttachmentOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<StructuredContentResultDto>
     */
    open class func generateStructuredContentFromAttachment(generateStructuredContentAttachmentOptions: GenerateStructuredContentAttachmentOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<StructuredContentResultDto> {
        let deferred = Promise<StructuredContentResultDto>.pending()
        generateStructuredContentFromAttachmentWithRequestBuilder(generateStructuredContentAttachmentOptions: generateStructuredContentAttachmentOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Generate structured content for an attachment
     - POST /ai/structured-content/attachment
     - Use output schemas to extract data from an attachment using AI
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter generateStructuredContentAttachmentOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StructuredContentResultDto> 
     */
    open class func generateStructuredContentFromAttachmentWithRequestBuilder(generateStructuredContentAttachmentOptions: GenerateStructuredContentAttachmentOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<StructuredContentResultDto> {
        let localVariablePath = "/ai/structured-content/attachment"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateStructuredContentAttachmentOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StructuredContentResultDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Generate structured content for an email
     
     - parameter generateStructuredContentEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<StructuredContentResultDto>
     */
    open class func generateStructuredContentFromEmail(generateStructuredContentEmailOptions: GenerateStructuredContentEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<StructuredContentResultDto> {
        let deferred = Promise<StructuredContentResultDto>.pending()
        generateStructuredContentFromEmailWithRequestBuilder(generateStructuredContentEmailOptions: generateStructuredContentEmailOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Generate structured content for an email
     - POST /ai/structured-content/email
     - Use output schemas to extract data from an email using AI
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter generateStructuredContentEmailOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StructuredContentResultDto> 
     */
    open class func generateStructuredContentFromEmailWithRequestBuilder(generateStructuredContentEmailOptions: GenerateStructuredContentEmailOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<StructuredContentResultDto> {
        let localVariablePath = "/ai/structured-content/email"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateStructuredContentEmailOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StructuredContentResultDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Generate structured content for a TXT message
     
     - parameter generateStructuredContentSmsOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<StructuredContentResultDto>
     */
    open class func generateStructuredContentFromSms(generateStructuredContentSmsOptions: GenerateStructuredContentSmsOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<StructuredContentResultDto> {
        let deferred = Promise<StructuredContentResultDto>.pending()
        generateStructuredContentFromSmsWithRequestBuilder(generateStructuredContentSmsOptions: generateStructuredContentSmsOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Generate structured content for a TXT message
     - POST /ai/structured-content/sms
     - Use output schemas to extract data from an SMS using AI
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter generateStructuredContentSmsOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StructuredContentResultDto> 
     */
    open class func generateStructuredContentFromSmsWithRequestBuilder(generateStructuredContentSmsOptions: GenerateStructuredContentSmsOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<StructuredContentResultDto> {
        let localVariablePath = "/ai/structured-content/sms"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateStructuredContentSmsOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StructuredContentResultDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a transformer
     
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AITransformDto>
     */
    open class func getTransformer(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AITransformDto> {
        let deferred = Promise<AITransformDto>.pending()
        getTransformerWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a transformer
     - GET /ai/transformer/{id}
     - Get AI transformer and schemas by ID
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AITransformDto> 
     */
    open class func getTransformerWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AITransformDto> {
        var localVariablePath = "/ai/transformer/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AITransformDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get transformer mapping
     
     - parameter _id: (path) ID of transform mapping 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AITransformMappingDto>
     */
    open class func getTransformerMapping(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AITransformMappingDto> {
        let deferred = Promise<AITransformMappingDto>.pending()
        getTransformerMappingWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get transformer mapping
     - GET /ai/transformer/mappings/{id}
     - Get an AI transformer mapping
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path) ID of transform mapping 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AITransformMappingDto> 
     */
    open class func getTransformerMappingWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AITransformMappingDto> {
        var localVariablePath = "/ai/transformer/mappings/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AITransformMappingDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter entityType
     */
    public enum EntityType_getTransformerMappings: String, Sendable, CaseIterable {
        case inbox = "INBOX"
        case phone = "PHONE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getTransformerMappings: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get transformer mappings
     
     - parameter aiTransformId: (query)  (optional)
     - parameter entityId: (query)  (optional)
     - parameter entityType: (query)  (optional)
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query) Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageAITransformMappingProjection>
     */
    open class func getTransformerMappings(aiTransformId: UUID? = nil, entityId: UUID? = nil, entityType: EntityType_getTransformerMappings? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getTransformerMappings? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageAITransformMappingProjection> {
        let deferred = Promise<PageAITransformMappingProjection>.pending()
        getTransformerMappingsWithRequestBuilder(aiTransformId: aiTransformId, entityId: entityId, entityType: entityType, page: page, size: size, sort: sort, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get transformer mappings
     - GET /ai/transformer/mappings
     - Get AI transformer mappings to other entities
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter aiTransformId: (query)  (optional)
     - parameter entityId: (query)  (optional)
     - parameter entityType: (query)  (optional)
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query) Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageAITransformMappingProjection> 
     */
    open class func getTransformerMappingsWithRequestBuilder(aiTransformId: UUID? = nil, entityId: UUID? = nil, entityType: EntityType_getTransformerMappings? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getTransformerMappings? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageAITransformMappingProjection> {
        let localVariablePath = "/ai/transformer/mappings"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "aiTransformId": (wrappedValue: aiTransformId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "entityId": (wrappedValue: entityId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "entityType": (wrappedValue: entityType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageAITransformMappingProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get transformer result
     
     - parameter _id: (path) ID of transform result 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AITransformResultDto>
     */
    open class func getTransformerResult(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AITransformResultDto> {
        let deferred = Promise<AITransformResultDto>.pending()
        getTransformerResultWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get transformer result
     - GET /ai/transformer/results/{id}
     - Get AI transformer result
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path) ID of transform result 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AITransformResultDto> 
     */
    open class func getTransformerResultWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AITransformResultDto> {
        var localVariablePath = "/ai/transformer/results/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AITransformResultDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter entityType
     */
    public enum EntityType_getTransformerResults: String, Sendable, CaseIterable {
        case inbox = "INBOX"
        case phone = "PHONE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getTransformerResults: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get transformer results
     
     - parameter aiTransformId: (query)  (optional)
     - parameter aiTransformMappingId: (query)  (optional)
     - parameter entityId: (query)  (optional)
     - parameter entityType: (query)  (optional)
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query) Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageAITransformResultProjection>
     */
    open class func getTransformerResults(aiTransformId: UUID? = nil, aiTransformMappingId: UUID? = nil, entityId: UUID? = nil, entityType: EntityType_getTransformerResults? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getTransformerResults? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageAITransformResultProjection> {
        let deferred = Promise<PageAITransformResultProjection>.pending()
        getTransformerResultsWithRequestBuilder(aiTransformId: aiTransformId, aiTransformMappingId: aiTransformMappingId, entityId: entityId, entityType: entityType, page: page, size: size, sort: sort, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get transformer results
     - GET /ai/transformer/results
     - Get AI transformer results
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter aiTransformId: (query)  (optional)
     - parameter aiTransformMappingId: (query)  (optional)
     - parameter entityId: (query)  (optional)
     - parameter entityType: (query)  (optional)
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query) Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageAITransformResultProjection> 
     */
    open class func getTransformerResultsWithRequestBuilder(aiTransformId: UUID? = nil, aiTransformMappingId: UUID? = nil, entityId: UUID? = nil, entityType: EntityType_getTransformerResults? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getTransformerResults? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageAITransformResultProjection> {
        let localVariablePath = "/ai/transformer/results"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "aiTransformId": (wrappedValue: aiTransformId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "aiTransformMappingId": (wrappedValue: aiTransformMappingId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "entityId": (wrappedValue: entityId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "entityType": (wrappedValue: entityType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageAITransformResultProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getTransformers: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     List transformers
     
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query) Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter include: (query) Optional list of IDs to include in result (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageAITransformProjection>
     */
    open class func getTransformers(page: Int? = nil, size: Int? = nil, sort: Sort_getTransformers? = nil, include: [UUID]? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageAITransformProjection> {
        let deferred = Promise<PageAITransformProjection>.pending()
        getTransformersWithRequestBuilder(page: page, size: size, sort: sort, include: include, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     List transformers
     - GET /ai/transformer
     - List all AI transforms
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter page: (query)  (optional, default to 0)
     - parameter size: (query) Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter include: (query) Optional list of IDs to include in result (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageAITransformProjection> 
     */
    open class func getTransformersWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getTransformers? = nil, include: [UUID]? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageAITransformProjection> {
        let localVariablePath = "/ai/transformer"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageAITransformProjection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Invoke a transformer
     
     - parameter invokeTransformerOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<ConditionalStructuredContentResult>
     */
    open class func invokeTransformer(invokeTransformerOptions: InvokeTransformerOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<ConditionalStructuredContentResult> {
        let deferred = Promise<ConditionalStructuredContentResult>.pending()
        invokeTransformerWithRequestBuilder(invokeTransformerOptions: invokeTransformerOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Invoke a transformer
     - POST /ai/transformer/invoke
     - Execute an AI transformer to generate structured content
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter invokeTransformerOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConditionalStructuredContentResult> 
     */
    open class func invokeTransformerWithRequestBuilder(invokeTransformerOptions: InvokeTransformerOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<ConditionalStructuredContentResult> {
        let localVariablePath = "/ai/transformer/invoke"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invokeTransformerOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConditionalStructuredContentResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Validate structured content schema
     
     - parameter structuredOutputSchema: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<StructuredOutputSchemaValidation>
     */
    open class func validateStructuredOutputSchema(structuredOutputSchema: StructuredOutputSchema, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<StructuredOutputSchemaValidation> {
        let deferred = Promise<StructuredOutputSchemaValidation>.pending()
        validateStructuredOutputSchemaWithRequestBuilder(structuredOutputSchema: structuredOutputSchema, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Validate structured content schema
     - POST /ai/structured-content/validate
     - Check if a schema is valid and can be used to extract data using AI
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter structuredOutputSchema: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StructuredOutputSchemaValidation> 
     */
    open class func validateStructuredOutputSchemaWithRequestBuilder(structuredOutputSchema: StructuredOutputSchema, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<StructuredOutputSchemaValidation> {
        let localVariablePath = "/ai/structured-content/validate"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: structuredOutputSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StructuredOutputSchemaValidation>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
