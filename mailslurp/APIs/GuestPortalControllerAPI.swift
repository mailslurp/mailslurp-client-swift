//
// GuestPortalControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

@objcMembers open class GuestPortalControllerAPI : NSObject {

    /**
     Create a portal page for your customers or clients to log into email accounts and view emails.
     
     - parameter createPortalOptions: (body)  
     - returns: Promise<GuestPortalDto>
     */
    open class func createGuestPortal( createPortalOptions: CreatePortalOptions) -> Promise<GuestPortalDto> {
        let deferred = Promise<GuestPortalDto>.pending()
        createGuestPortalWithRequestBuilder(createPortalOptions: createPortalOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a portal page for your customers or clients to log into email accounts and view emails.
     - POST /guest-portal
     - Create a guest login page for customers or clients to access assigned email addresses
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createPortalOptions: (body)  
     - returns: RequestBuilder<GuestPortalDto> 
     */
    open class func createGuestPortalWithRequestBuilder(createPortalOptions: CreatePortalOptions) -> RequestBuilder<GuestPortalDto> {
        let localVariablePath = "/guest-portal"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPortalOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GuestPortalDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a portal guest user
     
     - parameter portalId: (path)  
     - parameter createPortalUserOptions: (body)  
     - returns: Promise<GuestPortalUserCreateDto>
     */
    open class func createGuestPortalUser( portalId: UUID,  createPortalUserOptions: CreatePortalUserOptions) -> Promise<GuestPortalUserCreateDto> {
        let deferred = Promise<GuestPortalUserCreateDto>.pending()
        createGuestPortalUserWithRequestBuilder(portalId: portalId, createPortalUserOptions: createPortalUserOptions).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a portal guest user
     - POST /guest-portal/{portalId}/user
     - Add customer to portal
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter portalId: (path)  
     - parameter createPortalUserOptions: (body)  
     - returns: RequestBuilder<GuestPortalUserCreateDto> 
     */
    open class func createGuestPortalUserWithRequestBuilder(portalId: UUID, createPortalUserOptions: CreatePortalUserOptions) -> RequestBuilder<GuestPortalUserCreateDto> {
        var localVariablePath = "/guest-portal/{portalId}/user"
        let portalIdPreEscape = "\(APIHelper.mapValueToPathItem(portalId))"
        let portalIdPostEscape = portalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portalId}", with: portalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPortalUserOptions)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GuestPortalUserCreateDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllGuestPortalUsers: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all guest users for portal
     
     - parameter portalId: (query) Optional portal ID (optional)
     - parameter search: (query) Optional search term (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageGuestPortalUsers>
     */
    open class func getAllGuestPortalUsers( portalId: UUID? = nil,  search: String? = nil,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getAllGuestPortalUsers? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageGuestPortalUsers> {
        let deferred = Promise<PageGuestPortalUsers>.pending()
        getAllGuestPortalUsersWithRequestBuilder(portalId: portalId, search: search, page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all guest users for portal
     - GET /guest-portal/user
     - Get all customers for a portal
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter portalId: (query) Optional portal ID (optional)
     - parameter search: (query) Optional search term (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageGuestPortalUsers> 
     */
    open class func getAllGuestPortalUsersWithRequestBuilder(portalId: UUID? = nil, search: String? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getAllGuestPortalUsers? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageGuestPortalUsers> {
        let localVariablePath = "/guest-portal/user"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "portalId": (wrappedValue: portalId?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageGuestPortalUsers>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a client email portal
     
     - parameter portalId: (path)  
     - returns: Promise<GuestPortalDto>
     */
    open class func getGuestPortal( portalId: UUID) -> Promise<GuestPortalDto> {
        let deferred = Promise<GuestPortalDto>.pending()
        getGuestPortalWithRequestBuilder(portalId: portalId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a client email portal
     - GET /guest-portal/{portalId}
     - Fetch a customer guest portal
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter portalId: (path)  
     - returns: RequestBuilder<GuestPortalDto> 
     */
    open class func getGuestPortalWithRequestBuilder(portalId: UUID) -> RequestBuilder<GuestPortalDto> {
        var localVariablePath = "/guest-portal/{portalId}"
        let portalIdPreEscape = "\(APIHelper.mapValueToPathItem(portalId))"
        let portalIdPostEscape = portalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portalId}", with: portalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GuestPortalDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get guest user for portal
     
     - parameter portalId: (path)  
     - parameter guestId: (path)  
     - returns: Promise<GuestPortalUserDto>
     */
    open class func getGuestPortalUser( portalId: UUID,  guestId: UUID) -> Promise<GuestPortalUserDto> {
        let deferred = Promise<GuestPortalUserDto>.pending()
        getGuestPortalUserWithRequestBuilder(portalId: portalId, guestId: guestId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get guest user for portal
     - GET /guest-portal/{portalId}/user/{guestId}
     - Get customer for portal
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter portalId: (path)  
     - parameter guestId: (path)  
     - returns: RequestBuilder<GuestPortalUserDto> 
     */
    open class func getGuestPortalUserWithRequestBuilder(portalId: UUID, guestId: UUID) -> RequestBuilder<GuestPortalUserDto> {
        var localVariablePath = "/guest-portal/{portalId}/user/{guestId}"
        let portalIdPreEscape = "\(APIHelper.mapValueToPathItem(portalId))"
        let portalIdPostEscape = portalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portalId}", with: portalIdPostEscape, options: .literal, range: nil)
        let guestIdPreEscape = "\(APIHelper.mapValueToPathItem(guestId))"
        let guestIdPostEscape = guestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guestId}", with: guestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GuestPortalUserDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get guest user
     
     - parameter guestId: (path)  
     - returns: Promise<GuestPortalUserDto>
     */
    open class func getGuestPortalUserById( guestId: UUID) -> Promise<GuestPortalUserDto> {
        let deferred = Promise<GuestPortalUserDto>.pending()
        getGuestPortalUserByIdWithRequestBuilder(guestId: guestId).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get guest user
     - GET /guest-portal/user/{guestId}
     - Get customer by ID
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter guestId: (path)  
     - returns: RequestBuilder<GuestPortalUserDto> 
     */
    open class func getGuestPortalUserByIdWithRequestBuilder(guestId: UUID) -> RequestBuilder<GuestPortalUserDto> {
        var localVariablePath = "/guest-portal/user/{guestId}"
        let guestIdPreEscape = "\(APIHelper.mapValueToPathItem(guestId))"
        let guestIdPostEscape = guestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{guestId}", with: guestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GuestPortalUserDto>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getGuestPortalUsers: String, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all guest users for portal
     
     - parameter portalId: (path)  
     - parameter search: (query) Optional search term (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: Promise<PageGuestPortalUsers>
     */
    open class func getGuestPortalUsers( portalId: UUID,  search: String? = nil,  page: Int? = nil,  size: Int? = nil,  sort: Sort_getGuestPortalUsers? = nil,  since: Date? = nil,  before: Date? = nil) -> Promise<PageGuestPortalUsers> {
        let deferred = Promise<PageGuestPortalUsers>.pending()
        getGuestPortalUsersWithRequestBuilder(portalId: portalId, search: search, page: page, size: size, sort: sort, since: since, before: before).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all guest users for portal
     - GET /guest-portal/{portalId}/user
     - Get customers for a portal
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter portalId: (path)  
     - parameter search: (query) Optional search term (optional)
     - parameter page: (query) Optional page index in list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - returns: RequestBuilder<PageGuestPortalUsers> 
     */
    open class func getGuestPortalUsersWithRequestBuilder(portalId: UUID, search: String? = nil, page: Int? = nil, size: Int? = nil, sort: Sort_getGuestPortalUsers? = nil, since: Date? = nil, before: Date? = nil) -> RequestBuilder<PageGuestPortalUsers> {
        var localVariablePath = "/guest-portal/{portalId}/user"
        let portalIdPreEscape = "\(APIHelper.mapValueToPathItem(portalId))"
        let portalIdPostEscape = portalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portalId}", with: portalIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "since": (wrappedValue: since?.encodeToJSON(), isExplode: true),
            "before": (wrappedValue: before?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageGuestPortalUsers>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get guest portals
     
     - returns: Promise<[GuestPortalDto]>
     */
    open class func getGuestPortals() -> Promise<[GuestPortalDto]> {
        let deferred = Promise<[GuestPortalDto]>.pending()
        getGuestPortalsWithRequestBuilder().execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get guest portals
     - GET /guest-portal
     - Get portals
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - returns: RequestBuilder<[GuestPortalDto]> 
     */
    open class func getGuestPortalsWithRequestBuilder() -> RequestBuilder<[GuestPortalDto]> {
        let localVariablePath = "/guest-portal"
        let localVariableURLString = mailslurpAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GuestPortalDto]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
