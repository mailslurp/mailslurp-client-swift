//
// DomainControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class DomainControllerAPI : NSObject {

    /**
     Add catch all wild card inbox to domain
     
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DomainDto>
     */
    open class func addDomainWildcardCatchAll(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DomainDto> {
        let deferred = Promise<DomainDto>.pending()
        addDomainWildcardCatchAllWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Add catch all wild card inbox to domain
     - POST /domains/{id}/wildcard
     - Add a catch all inbox to a domain so that any emails sent to it that cannot be matched will be sent to the catch all inbox generated
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DomainDto> 
     */
    open class func addDomainWildcardCatchAllWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DomainDto> {
        var localVariablePath = "/domains/{id}/wildcard"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create Domain
     
     - parameter createDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DomainDto>
     */
    open class func createDomain(createDomainOptions: CreateDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DomainDto> {
        let deferred = Promise<DomainDto>.pending()
        createDomainWithRequestBuilder(createDomainOptions: createDomainOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create Domain
     - POST /domains
     - Link a domain that you own with MailSlurp so you can create email addresses using it. Endpoint returns DNS records used for validation. You must add these verification records to your host provider's DNS setup to verify the domain.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter createDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DomainDto> 
     */
    open class func createDomainWithRequestBuilder(createDomainOptions: CreateDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DomainDto> {
        let localVariablePath = "/domains"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDomainOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a domain
     
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[String]>
     */
    open class func deleteDomain(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[String]> {
        let deferred = Promise<[String]>.pending()
        deleteDomainWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete a domain
     - DELETE /domains/{id}
     - Delete a domain. This will disable any existing inboxes that use this domain.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[String]> 
     */
    open class func deleteDomainWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[String]> {
        var localVariablePath = "/domains/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter inboxType
     */
    public enum InboxType_getAvailableDomains: String, Sendable, CaseIterable {
        case httpInbox = "HTTP_INBOX"
        case smtpInbox = "SMTP_INBOX"
    }

    /**
     Get all usable domains
     
     - parameter inboxType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DomainGroupsDto>
     */
    open class func getAvailableDomains(inboxType: InboxType_getAvailableDomains? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DomainGroupsDto> {
        let deferred = Promise<DomainGroupsDto>.pending()
        getAvailableDomainsWithRequestBuilder(inboxType: inboxType, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get all usable domains
     - GET /domains/available-domains
     - List all domains available for use with email address creation
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DomainGroupsDto> 
     */
    open class func getAvailableDomainsWithRequestBuilder(inboxType: InboxType_getAvailableDomains? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DomainGroupsDto> {
        let localVariablePath = "/domains/available-domains"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxType": (wrappedValue: inboxType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainGroupsDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a domain
     
     - parameter _id: (path)  
     - parameter checkForErrors: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DomainDto>
     */
    open class func getDomain(_id: UUID, checkForErrors: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DomainDto> {
        let deferred = Promise<DomainDto>.pending()
        getDomainWithRequestBuilder(_id: _id, checkForErrors: checkForErrors, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a domain
     - GET /domains/{id}
     - Returns domain verification status and tokens for a given domain
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter checkForErrors: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DomainDto> 
     */
    open class func getDomainWithRequestBuilder(_id: UUID, checkForErrors: Bool? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DomainDto> {
        var localVariablePath = "/domains/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "checkForErrors": (wrappedValue: checkForErrors?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get domain issues
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DomainIssuesDto>
     */
    open class func getDomainIssues(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DomainIssuesDto> {
        let deferred = Promise<DomainIssuesDto>.pending()
        getDomainIssuesWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get domain issues
     - GET /domains/issues
     - List domain issues for domains you have created
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DomainIssuesDto> 
     */
    open class func getDomainIssuesWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DomainIssuesDto> {
        let localVariablePath = "/domains/issues"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainIssuesDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get catch all wild card inbox for domain
     
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<InboxDto>
     */
    open class func getDomainWildcardCatchAllInbox(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<InboxDto> {
        let deferred = Promise<InboxDto>.pending()
        getDomainWildcardCatchAllInboxWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get catch all wild card inbox for domain
     - GET /domains/{id}/wildcard
     - Get the catch all inbox for a domain for missed emails
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<InboxDto> 
     */
    open class func getDomainWildcardCatchAllInboxWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<InboxDto> {
        var localVariablePath = "/domains/{id}/wildcard"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InboxDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get domains
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[DomainPreview]>
     */
    open class func getDomains(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[DomainPreview]> {
        let deferred = Promise<[DomainPreview]>.pending()
        getDomainsWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get domains
     - GET /domains
     - List all custom domains you have created
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[DomainPreview]> 
     */
    open class func getDomainsWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[DomainPreview]> {
        let localVariablePath = "/domains"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DomainPreview]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter inboxType
     */
    public enum InboxType_getMailSlurpDomains: String, Sendable, CaseIterable {
        case httpInbox = "HTTP_INBOX"
        case smtpInbox = "SMTP_INBOX"
    }

    /**
     Get MailSlurp domains
     
     - parameter inboxType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DomainGroupsDto>
     */
    open class func getMailSlurpDomains(inboxType: InboxType_getMailSlurpDomains? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DomainGroupsDto> {
        let deferred = Promise<DomainGroupsDto>.pending()
        getMailSlurpDomainsWithRequestBuilder(inboxType: inboxType, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get MailSlurp domains
     - GET /domains/mailslurp-domains
     - List all MailSlurp domains used with non-custom email addresses
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter inboxType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DomainGroupsDto> 
     */
    open class func getMailSlurpDomainsWithRequestBuilder(inboxType: InboxType_getMailSlurpDomains? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DomainGroupsDto> {
        let localVariablePath = "/domains/mailslurp-domains"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxType": (wrappedValue: inboxType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainGroupsDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update a domain
     
     - parameter _id: (path)  
     - parameter updateDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DomainDto>
     */
    open class func updateDomain(_id: UUID, updateDomainOptions: UpdateDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DomainDto> {
        let deferred = Promise<DomainDto>.pending()
        updateDomainWithRequestBuilder(_id: _id, updateDomainOptions: updateDomainOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Update a domain
     - PUT /domains/{id}
     - Update values on a domain. Note you cannot change the domain name as it is immutable. Recreate the domain if you need to alter this.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (path)  
     - parameter updateDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DomainDto> 
     */
    open class func updateDomainWithRequestBuilder(_id: UUID, updateDomainOptions: UpdateDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DomainDto> {
        var localVariablePath = "/domains/{id}"
        let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateDomainOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
