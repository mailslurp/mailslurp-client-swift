//
// ToolsControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class ToolsControllerAPI : NSObject {

    /**
     Check email client support for email HTML and CSS features
     
     - parameter checkEmailFeaturesClientSupportOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<CheckEmailFeaturesClientSupportResults>
     */
    open class func checkEmailFeaturesClientSupport(checkEmailFeaturesClientSupportOptions: CheckEmailFeaturesClientSupportOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<CheckEmailFeaturesClientSupportResults> {
        let deferred = Promise<CheckEmailFeaturesClientSupportResults>.pending()
        checkEmailFeaturesClientSupportWithRequestBuilder(checkEmailFeaturesClientSupportOptions: checkEmailFeaturesClientSupportOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Check email client support for email HTML and CSS features
     - POST /tools/check-email-features-client-support
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter checkEmailFeaturesClientSupportOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CheckEmailFeaturesClientSupportResults> 
     */
    open class func checkEmailFeaturesClientSupportWithRequestBuilder(checkEmailFeaturesClientSupportOptions: CheckEmailFeaturesClientSupportOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<CheckEmailFeaturesClientSupportResults> {
        let localVariablePath = "/tools/check-email-features-client-support"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: checkEmailFeaturesClientSupportOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckEmailFeaturesClientSupportResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a new email address using the fake email domains
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<NewFakeEmailAddressResult>
     */
    open class func createNewFakeEmailAddress(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<NewFakeEmailAddressResult> {
        let deferred = Promise<NewFakeEmailAddressResult>.pending()
        createNewFakeEmailAddressWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a new email address using the fake email domains
     - POST /tools/fake-email
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NewFakeEmailAddressResult> 
     */
    open class func createNewFakeEmailAddressWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<NewFakeEmailAddressResult> {
        let localVariablePath = "/tools/fake-email"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewFakeEmailAddressResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a fake email address using the fake email domains
     
     - parameter emailAddress: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteNewFakeEmailAddress(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteNewFakeEmailAddressWithRequestBuilder(emailAddress: emailAddress, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete a fake email address using the fake email domains
     - DELETE /tools/fake-email
     - Delete a fake email address using the fake email domains
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailAddress: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteNewFakeEmailAddressWithRequestBuilder(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/tools/fake-email"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emailAddress": (wrappedValue: emailAddress.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a BIMI record policy
     
     - parameter generateBimiRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<GenerateBimiRecordResults>
     */
    open class func generateBimiRecord(generateBimiRecordOptions: GenerateBimiRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<GenerateBimiRecordResults> {
        let deferred = Promise<GenerateBimiRecordResults>.pending()
        generateBimiRecordWithRequestBuilder(generateBimiRecordOptions: generateBimiRecordOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a BIMI record policy
     - POST /tools/generate-bimi-record
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter generateBimiRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenerateBimiRecordResults> 
     */
    open class func generateBimiRecordWithRequestBuilder(generateBimiRecordOptions: GenerateBimiRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<GenerateBimiRecordResults> {
        let localVariablePath = "/tools/generate-bimi-record"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateBimiRecordOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateBimiRecordResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a DMARC record policy
     
     - parameter generateDmarcRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<GenerateDmarcRecordResults>
     */
    open class func generateDmarcRecord(generateDmarcRecordOptions: GenerateDmarcRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<GenerateDmarcRecordResults> {
        let deferred = Promise<GenerateDmarcRecordResults>.pending()
        generateDmarcRecordWithRequestBuilder(generateDmarcRecordOptions: generateDmarcRecordOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a DMARC record policy
     - POST /tools/generate-dmarc-record
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter generateDmarcRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenerateDmarcRecordResults> 
     */
    open class func generateDmarcRecordWithRequestBuilder(generateDmarcRecordOptions: GenerateDmarcRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<GenerateDmarcRecordResults> {
        let localVariablePath = "/tools/generate-dmarc-record"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateDmarcRecordOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateDmarcRecordResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a TLS reporting record policy
     
     - parameter generateMtaStsRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<GenerateMtaStsRecordResults>
     */
    open class func generateMtaStsRecord(generateMtaStsRecordOptions: GenerateMtaStsRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<GenerateMtaStsRecordResults> {
        let deferred = Promise<GenerateMtaStsRecordResults>.pending()
        generateMtaStsRecordWithRequestBuilder(generateMtaStsRecordOptions: generateMtaStsRecordOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a TLS reporting record policy
     - POST /tools/generate-mta-sts-record
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter generateMtaStsRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenerateMtaStsRecordResults> 
     */
    open class func generateMtaStsRecordWithRequestBuilder(generateMtaStsRecordOptions: GenerateMtaStsRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<GenerateMtaStsRecordResults> {
        let localVariablePath = "/tools/generate-mta-sts-record"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateMtaStsRecordOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateMtaStsRecordResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a TLS reporting record policy
     
     - parameter generateTlsReportingRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<GenerateTlsReportingRecordResults>
     */
    open class func generateTlsReportingRecord(generateTlsReportingRecordOptions: GenerateTlsReportingRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<GenerateTlsReportingRecordResults> {
        let deferred = Promise<GenerateTlsReportingRecordResults>.pending()
        generateTlsReportingRecordWithRequestBuilder(generateTlsReportingRecordOptions: generateTlsReportingRecordOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Create a TLS reporting record policy
     - POST /tools/generate-tls-reporting-record
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter generateTlsReportingRecordOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenerateTlsReportingRecordResults> 
     */
    open class func generateTlsReportingRecordWithRequestBuilder(generateTlsReportingRecordOptions: GenerateTlsReportingRecordOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<GenerateTlsReportingRecordResults> {
        let localVariablePath = "/tools/generate-tls-reporting-record"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateTlsReportingRecordOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateTlsReportingRecordResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter emailAddress: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<FakeEmailResult>
     */
    open class func getFakeEmailByEmailAddress(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<FakeEmailResult> {
        let deferred = Promise<FakeEmailResult>.pending()
        getFakeEmailByEmailAddressWithRequestBuilder(emailAddress: emailAddress, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /tools/fake-email/byEmailAddress
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailAddress: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FakeEmailResult> 
     */
    open class func getFakeEmailByEmailAddressWithRequestBuilder(emailAddress: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<FakeEmailResult> {
        let localVariablePath = "/tools/fake-email/byEmailAddress"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "emailAddress": (wrappedValue: emailAddress.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FakeEmailResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get a fake email by its ID
     
     - parameter _id: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<FakeEmailResult>
     */
    open class func getFakeEmailById(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<FakeEmailResult> {
        let deferred = Promise<FakeEmailResult>.pending()
        getFakeEmailByIdWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get a fake email by its ID
     - GET /tools/fake-email
     - Get a fake email by its ID
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FakeEmailResult> 
     */
    open class func getFakeEmailByIdWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<FakeEmailResult> {
        let localVariablePath = "/tools/fake-email"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: _id.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FakeEmailResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get raw fake email content
     
     - parameter _id: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<String>
     */
    open class func getFakeEmailRaw(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<String> {
        let deferred = Promise<String>.pending()
        getFakeEmailRawWithRequestBuilder(_id: _id, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get raw fake email content
     - GET /tools/fake-email/html
     - Retrieve the raw content of a fake email by its ID
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter _id: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func getFakeEmailRawWithRequestBuilder(_id: UUID, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<String> {
        let localVariablePath = "/tools/fake-email/html"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: _id.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get fake emails for an address
     
     - parameter emailAddress: (query)  
     - parameter page: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[FakeEmailPreview]>
     */
    open class func getFakeEmailsForAddress(emailAddress: String, page: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[FakeEmailPreview]> {
        let deferred = Promise<[FakeEmailPreview]>.pending()
        getFakeEmailsForAddressWithRequestBuilder(emailAddress: emailAddress, page: page, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get fake emails for an address
     - GET /tools/fake-emails
     - Get fake emails for an address
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter emailAddress: (query)  
     - parameter page: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[FakeEmailPreview]> 
     */
    open class func getFakeEmailsForAddressWithRequestBuilder(emailAddress: String, page: Int? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[FakeEmailPreview]> {
        let localVariablePath = "/tools/fake-emails"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "emailAddress": (wrappedValue: emailAddress.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FakeEmailPreview]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Lookup a BIMI record policy
     
     - parameter lookupBimiDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<LookupBimiDomainResults>
     */
    open class func lookupBimiDomain(lookupBimiDomainOptions: LookupBimiDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<LookupBimiDomainResults> {
        let deferred = Promise<LookupBimiDomainResults>.pending()
        lookupBimiDomainWithRequestBuilder(lookupBimiDomainOptions: lookupBimiDomainOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup a BIMI record policy
     - POST /tools/lookup-bimi-domain
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter lookupBimiDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LookupBimiDomainResults> 
     */
    open class func lookupBimiDomainWithRequestBuilder(lookupBimiDomainOptions: LookupBimiDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<LookupBimiDomainResults> {
        let localVariablePath = "/tools/lookup-bimi-domain"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lookupBimiDomainOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LookupBimiDomainResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Lookup a DMARC record policy
     
     - parameter lookupDmarcDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<LookupDmarcDomainResults>
     */
    open class func lookupDmarcDomain(lookupDmarcDomainOptions: LookupDmarcDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<LookupDmarcDomainResults> {
        let deferred = Promise<LookupDmarcDomainResults>.pending()
        lookupDmarcDomainWithRequestBuilder(lookupDmarcDomainOptions: lookupDmarcDomainOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup a DMARC record policy
     - POST /tools/lookup-dmarc-domain
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter lookupDmarcDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LookupDmarcDomainResults> 
     */
    open class func lookupDmarcDomainWithRequestBuilder(lookupDmarcDomainOptions: LookupDmarcDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<LookupDmarcDomainResults> {
        let localVariablePath = "/tools/lookup-dmarc-domain"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lookupDmarcDomainOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LookupDmarcDomainResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Lookup a MTA-STS domain policy
     
     - parameter lookupMtaStsDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<LookupMtaStsDomainResults>
     */
    open class func lookupMtaStsDomain(lookupMtaStsDomainOptions: LookupMtaStsDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<LookupMtaStsDomainResults> {
        let deferred = Promise<LookupMtaStsDomainResults>.pending()
        lookupMtaStsDomainWithRequestBuilder(lookupMtaStsDomainOptions: lookupMtaStsDomainOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup a MTA-STS domain policy
     - POST /tools/lookup-mta-sts-domain
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter lookupMtaStsDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LookupMtaStsDomainResults> 
     */
    open class func lookupMtaStsDomainWithRequestBuilder(lookupMtaStsDomainOptions: LookupMtaStsDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<LookupMtaStsDomainResults> {
        let localVariablePath = "/tools/lookup-mta-sts-domain"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lookupMtaStsDomainOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LookupMtaStsDomainResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Lookup a MX records for a domain
     
     - parameter lookupMxRecordsOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<LookupMxRecordsResults>
     */
    open class func lookupMxRecord(lookupMxRecordsOptions: LookupMxRecordsOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<LookupMxRecordsResults> {
        let deferred = Promise<LookupMxRecordsResults>.pending()
        lookupMxRecordWithRequestBuilder(lookupMxRecordsOptions: lookupMxRecordsOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup a MX records for a domain
     - POST /tools/lookup-mx-records
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter lookupMxRecordsOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LookupMxRecordsResults> 
     */
    open class func lookupMxRecordWithRequestBuilder(lookupMxRecordsOptions: LookupMxRecordsOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<LookupMxRecordsResults> {
        let localVariablePath = "/tools/lookup-mx-records"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lookupMxRecordsOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LookupMxRecordsResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Lookup a TLS reporting domain policy
     
     - parameter lookupTlsReportingDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<LookupTlsReportingDomainResults>
     */
    open class func lookupTlsReportingDomain(lookupTlsReportingDomainOptions: LookupTlsReportingDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<LookupTlsReportingDomainResults> {
        let deferred = Promise<LookupTlsReportingDomainResults>.pending()
        lookupTlsReportingDomainWithRequestBuilder(lookupTlsReportingDomainOptions: lookupTlsReportingDomainOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Lookup a TLS reporting domain policy
     - POST /tools/lookup-tls-reporting-domain
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter lookupTlsReportingDomainOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<LookupTlsReportingDomainResults> 
     */
    open class func lookupTlsReportingDomainWithRequestBuilder(lookupTlsReportingDomainOptions: LookupTlsReportingDomainOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<LookupTlsReportingDomainResults> {
        let localVariablePath = "/tools/lookup-tls-reporting-domain"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: lookupTlsReportingDomainOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LookupTlsReportingDomainResults>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
