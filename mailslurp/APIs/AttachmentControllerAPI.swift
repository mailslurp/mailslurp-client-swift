//
// AttachmentControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
@preconcurrency import PromiseKit

@objcMembers open class AttachmentControllerAPI : NSObject {

    /**
     Delete all attachments
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteAllAttachments(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAllAttachmentsWithRequestBuilder(apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete all attachments
     - DELETE /attachments
     - Delete all attachments
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAllAttachmentsWithRequestBuilder(apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/attachments"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an attachment
     
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Void>
     */
    open class func deleteAttachment(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAttachmentWithRequestBuilder(attachmentId: attachmentId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Delete an attachment
     - DELETE /attachments/{attachmentId}
     - Delete an attachment
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAttachmentWithRequestBuilder(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/attachments/{attachmentId}"
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email attachment as base64 encoded string as alternative to binary responses. To read the content decode the Base64 encoded contents.
     
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<DownloadAttachmentDto>
     */
    open class func downloadAttachmentAsBase64Encoded(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<DownloadAttachmentDto> {
        let deferred = Promise<DownloadAttachmentDto>.pending()
        downloadAttachmentAsBase64EncodedWithRequestBuilder(attachmentId: attachmentId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email attachment as base64 encoded string as alternative to binary responses. To read the content decode the Base64 encoded contents.
     - GET /attachments/{attachmentId}/base64
     - Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the `downloadAttachment` method but allows some clients to get around issues with binary responses.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DownloadAttachmentDto> 
     */
    open class func downloadAttachmentAsBase64EncodedWithRequestBuilder(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<DownloadAttachmentDto> {
        var localVariablePath = "/attachments/{attachmentId}/base64"
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DownloadAttachmentDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Download attachments. Get email attachment bytes. If you have trouble with byte responses try the `downloadAttachmentBase64` response endpoints.
     
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<Data>
     */
    open class func downloadAttachmentAsBytes(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<Data> {
        let deferred = Promise<Data>.pending()
        downloadAttachmentAsBytesWithRequestBuilder(attachmentId: attachmentId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Download attachments. Get email attachment bytes. If you have trouble with byte responses try the `downloadAttachmentBase64` response endpoints.
     - GET /attachments/{attachmentId}/bytes
     - Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Data> 
     */
    open class func downloadAttachmentAsBytesWithRequestBuilder(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<Data> {
        var localVariablePath = "/attachments/{attachmentId}/bytes"
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get an attachment entity
     
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AttachmentEntityDto>
     */
    open class func getAttachment(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AttachmentEntityDto> {
        let deferred = Promise<AttachmentEntityDto>.pending()
        getAttachmentWithRequestBuilder(attachmentId: attachmentId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get an attachment entity
     - GET /attachments/{attachmentId}
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttachmentEntityDto> 
     */
    open class func getAttachmentWithRequestBuilder(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AttachmentEntityDto> {
        var localVariablePath = "/attachments/{attachmentId}"
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttachmentEntityDto>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get email attachment metadata information
     
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<AttachmentMetaData>
     */
    open class func getAttachmentInfo(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<AttachmentMetaData> {
        let deferred = Promise<AttachmentMetaData>.pending()
        getAttachmentInfoWithRequestBuilder(attachmentId: attachmentId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email attachment metadata information
     - GET /attachments/{attachmentId}/metadata
     - Returns the metadata for an attachment. It is saved separately to the content of the attachment. Contains properties `name` and `content-type` and `content-length` in bytes for a given attachment.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter attachmentId: (path) ID of attachment 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttachmentMetaData> 
     */
    open class func getAttachmentInfoWithRequestBuilder(attachmentId: String, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<AttachmentMetaData> {
        var localVariablePath = "/attachments/{attachmentId}/metadata"
        let attachmentIdPreEscape = "\(APIHelper.mapValueToPathItem(attachmentId))"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttachmentMetaData>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAttachments: String, Sendable, CaseIterable {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get email attachments
     
     - parameter page: (query) Optional page index for list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter fileNameFilter: (query) Optional file name and content type search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inboxId to filter attachments by (optional)
     - parameter emailId: (query) Optional emailId to filter attachments by (optional)
     - parameter sentEmailId: (query) Optional sentEmailId to filter attachments by (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<PageAttachmentEntity>
     */
    open class func getAttachments(page: Int? = nil, size: Int? = nil, sort: Sort_getAttachments? = nil, fileNameFilter: String? = nil, since: Date? = nil, before: Date? = nil, inboxId: UUID? = nil, emailId: UUID? = nil, sentEmailId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<PageAttachmentEntity> {
        let deferred = Promise<PageAttachmentEntity>.pending()
        getAttachmentsWithRequestBuilder(page: page, size: size, sort: sort, fileNameFilter: fileNameFilter, since: since, before: before, inboxId: inboxId, emailId: emailId, sentEmailId: sentEmailId, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Get email attachments
     - GET /attachments
     - Get all attachments in paginated response. Each entity contains meta data for the attachment such as `name` and `content-type`. Use the `attachmentId` and the download endpoints to get the file contents.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter page: (query) Optional page index for list pagination (optional, default to 0)
     - parameter size: (query) Optional page size for list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to .asc)
     - parameter fileNameFilter: (query) Optional file name and content type search filter (optional)
     - parameter since: (query) Filter by created at after the given timestamp (optional)
     - parameter before: (query) Filter by created at before the given timestamp (optional)
     - parameter inboxId: (query) Optional inboxId to filter attachments by (optional)
     - parameter emailId: (query) Optional emailId to filter attachments by (optional)
     - parameter sentEmailId: (query) Optional sentEmailId to filter attachments by (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PageAttachmentEntity> 
     */
    open class func getAttachmentsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAttachments? = nil, fileNameFilter: String? = nil, since: Date? = nil, before: Date? = nil, inboxId: UUID? = nil, emailId: UUID? = nil, sentEmailId: UUID? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<PageAttachmentEntity> {
        let localVariablePath = "/attachments"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "fileNameFilter": (wrappedValue: fileNameFilter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "since": (wrappedValue: since?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "before": (wrappedValue: before?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "inboxId": (wrappedValue: inboxId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "emailId": (wrappedValue: emailId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sentEmailId": (wrappedValue: sentEmailId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PageAttachmentEntity>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.
     
     - parameter uploadAttachmentOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[String]>
     */
    open class func uploadAttachment(uploadAttachmentOptions: UploadAttachmentOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[String]> {
        let deferred = Promise<[String]>.pending()
        uploadAttachmentWithRequestBuilder(uploadAttachmentOptions: uploadAttachmentOptions, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.
     - POST /attachments
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter uploadAttachmentOptions: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[String]> 
     */
    open class func uploadAttachmentWithRequestBuilder(uploadAttachmentOptions: UploadAttachmentOptions, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[String]> {
        let localVariablePath = "/attachments"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uploadAttachmentOptions, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.
     
     - parameter contentType: (header)  (optional)
     - parameter contentType2: (query) Optional contentType for file. For instance `application/pdf` (optional)
     - parameter contentId: (query) Optional content ID (CID) to save upload with (optional)
     - parameter filename: (query) Optional filename to save upload with (optional)
     - parameter fileSize: (query) Optional byte length to save upload with (optional)
     - parameter filename2: (header)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[String]>
     */
    open class func uploadAttachmentBytes(contentType: String? = nil, contentType2: String? = nil, contentId: String? = nil, filename: String? = nil, fileSize: Int64? = nil, filename2: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[String]> {
        let deferred = Promise<[String]>.pending()
        uploadAttachmentBytesWithRequestBuilder(contentType: contentType, contentType2: contentType2, contentId: contentId, filename: filename, fileSize: fileSize, filename2: filename2, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.
     - POST /attachments/bytes
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter contentType: (header)  (optional)
     - parameter contentType2: (query) Optional contentType for file. For instance `application/pdf` (optional)
     - parameter contentId: (query) Optional content ID (CID) to save upload with (optional)
     - parameter filename: (query) Optional filename to save upload with (optional)
     - parameter fileSize: (query) Optional byte length to save upload with (optional)
     - parameter filename2: (header)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[String]> 
     */
    open class func uploadAttachmentBytesWithRequestBuilder(contentType: String? = nil, contentType2: String? = nil, contentId: String? = nil, filename: String? = nil, fileSize: Int64? = nil, filename2: String? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[String]> {
        let localVariablePath = "/attachments/bytes"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentType": (wrappedValue: contentType2?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "contentId": (wrappedValue: contentId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filename": (wrappedValue: filename?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "fileSize": (wrappedValue: fileSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "contentType": contentType?.asParameter(codableHelper: apiConfiguration.codableHelper),
            "filename": filename2?.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.
     
     - parameter contentId: (query) Optional content ID of attachment (optional)
     - parameter contentType: (query) Optional content type of attachment (optional)
     - parameter filename: (query) Optional name of file (optional)
     - parameter contentTypeHeader: (query) Optional content type header of attachment (optional)
     - parameter xFilename: (query) Optional filename header of attachment (optional)
     - parameter xFilenameRaw: (query) Optional raw filename header of attachment that will be converted to punycode (optional)
     - parameter xFilesize: (query) Optional content size of attachment (optional)
     - parameter uploadMultipartFormRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Promise<[String]>
     */
    open class func uploadMultipartForm(contentId: String? = nil, contentType: String? = nil, filename: String? = nil, contentTypeHeader: String? = nil, xFilename: String? = nil, xFilenameRaw: String? = nil, xFilesize: Int64? = nil, uploadMultipartFormRequest: UploadMultipartFormRequest? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> Promise<[String]> {
        let deferred = Promise<[String]>.pending()
        uploadMultipartFormWithRequestBuilder(contentId: contentId, contentType: contentType, filename: filename, contentTypeHeader: contentTypeHeader, xFilename: xFilename, xFilenameRaw: xFilenameRaw, xFilesize: xFilesize, uploadMultipartFormRequest: uploadMultipartFormRequest, apiConfiguration: apiConfiguration).execute { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.
     - POST /attachments/multipart
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: API_KEY
     - parameter contentId: (query) Optional content ID of attachment (optional)
     - parameter contentType: (query) Optional content type of attachment (optional)
     - parameter filename: (query) Optional name of file (optional)
     - parameter contentTypeHeader: (query) Optional content type header of attachment (optional)
     - parameter xFilename: (query) Optional filename header of attachment (optional)
     - parameter xFilenameRaw: (query) Optional raw filename header of attachment that will be converted to punycode (optional)
     - parameter xFilesize: (query) Optional content size of attachment (optional)
     - parameter uploadMultipartFormRequest: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[String]> 
     */
    open class func uploadMultipartFormWithRequestBuilder(contentId: String? = nil, contentType: String? = nil, filename: String? = nil, contentTypeHeader: String? = nil, xFilename: String? = nil, xFilenameRaw: String? = nil, xFilesize: Int64? = nil, uploadMultipartFormRequest: UploadMultipartFormRequest? = nil, apiConfiguration: mailslurpAPIConfiguration = mailslurpAPIConfiguration.shared) -> RequestBuilder<[String]> {
        let localVariablePath = "/attachments/multipart"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uploadMultipartFormRequest, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentId": (wrappedValue: contentId?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "contentType": (wrappedValue: contentType?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filename": (wrappedValue: filename?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "contentTypeHeader": (wrappedValue: contentTypeHeader?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "x-filename": (wrappedValue: xFilename?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "x-filename-raw": (wrappedValue: xFilenameRaw?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "x-filesize": (wrappedValue: xFilesize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
