//
// BulkActionsControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objc open class BulkActionsControllerAPI : NSObject {
    /**
     Bulk create Inboxes (email addresses)
     
     - parameter count: (query) Number of inboxes to be created in bulk 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bulkCreateInboxes(count: Int, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: [InboxDto]?, _ error: Error?) -> Void)) {
        bulkCreateInboxesWithRequestBuilder(count: count).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Bulk create Inboxes (email addresses)
     - POST /bulk/inboxes
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter count: (query) Number of inboxes to be created in bulk 
     - returns: RequestBuilder<[InboxDto]> 
     */
    open class func bulkCreateInboxesWithRequestBuilder(count: Int) -> RequestBuilder<[InboxDto]> {
        let path = "/bulk/inboxes"
        let URLString = mailslurpAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": count.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[InboxDto]>.Type = mailslurpAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Bulk Delete Inboxes
     
     - parameter requestBody: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bulkDeleteInboxes(requestBody: [UUID], apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        bulkDeleteInboxesWithRequestBuilder(requestBody: requestBody).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Bulk Delete Inboxes
     - DELETE /bulk/inboxes
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func bulkDeleteInboxesWithRequestBuilder(requestBody: [UUID]) -> RequestBuilder<Void> {
        let path = "/bulk/inboxes"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Bulk Send Emails
     
     - parameter bulkSendEmailOptions: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bulkSendEmails(bulkSendEmailOptions: BulkSendEmailOptions, apiResponseQueue: DispatchQueue = mailslurpAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        bulkSendEmailsWithRequestBuilder(bulkSendEmailOptions: bulkSendEmailOptions).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Bulk Send Emails
     - POST /bulk/send
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - parameter bulkSendEmailOptions: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func bulkSendEmailsWithRequestBuilder(bulkSendEmailOptions: BulkSendEmailOptions) -> RequestBuilder<Void> {
        let path = "/bulk/send"
        let URLString = mailslurpAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bulkSendEmailOptions)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = mailslurpAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
