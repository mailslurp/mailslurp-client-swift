//
// AITransformMappingProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objcMembers public class AITransformMappingProjection: NSObject, Codable, ParameterConvertible {

    public enum EntityType: String, Sendable, Codable, CaseIterable {
        case inbox = "INBOX"
        case phone = "PHONE"
    }
    public enum ContentSelector: String, Sendable, Codable, CaseIterable {
        case raw = "RAW"
        case body = "BODY"
        case bodyAttachments = "BODY_ATTACHMENTS"
    }
    public enum TriggerSelector: String, Sendable, Codable, CaseIterable {
        case perMessage = "PER_MESSAGE"
        case perAttachment = "PER_ATTACHMENT"
    }
    public var userId: UUID
    public var aiTransformId: UUID
    public var entityId: UUID
    public var entityType: EntityType
    public var contentSelector: ContentSelector?
    public var triggerSelector: TriggerSelector?
    public var name: String?
    public var _id: UUID

    public init(userId: UUID, aiTransformId: UUID, entityId: UUID, entityType: EntityType, contentSelector: ContentSelector? = nil, triggerSelector: TriggerSelector? = nil, name: String? = nil, _id: UUID) {
        self.userId = userId
        self.aiTransformId = aiTransformId
        self.entityId = entityId
        self.entityType = entityType
        self.contentSelector = contentSelector
        self.triggerSelector = triggerSelector
        self.name = name
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case aiTransformId
        case entityId
        case entityType
        case contentSelector
        case triggerSelector
        case name
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(aiTransformId, forKey: .aiTransformId)
        try container.encode(entityId, forKey: .entityId)
        try container.encode(entityType, forKey: .entityType)
        try container.encodeIfPresent(contentSelector, forKey: .contentSelector)
        try container.encodeIfPresent(triggerSelector, forKey: .triggerSelector)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(_id, forKey: ._id)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AITransformMappingProjection: Identifiable {}
