//
// ConnectorSmtpConnectionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objcMembers public class ConnectorSmtpConnectionDto: NSObject, Codable, JSONEncodable {

    public var connectorId: UUID
    public var smtpHost: String
    public var smtpPort: Int?
    public var smtpPortNum: NSNumber? {
        get {
            return smtpPort as NSNumber?
        }
    }
    public var smtpUsername: String?
    public var smtpPassword: String?
    public var smtpSsl: Bool?
    public var smtpSslNum: NSNumber? {
        get {
            return smtpSsl as NSNumber?
        }
    }
    public var startTls: Bool?
    public var startTlsNum: NSNumber? {
        get {
            return startTls as NSNumber?
        }
    }
    public var smtpMechanisms: [String]?
    public var localHostName: String?
    public var proxyHost: String?
    public var proxyPort: Int?
    public var proxyPortNum: NSNumber? {
        get {
            return proxyPort as NSNumber?
        }
    }
    public var proxyEnabled: Bool?
    public var proxyEnabledNum: NSNumber? {
        get {
            return proxyEnabled as NSNumber?
        }
    }
    public var enabled: Bool?
    public var enabledNum: NSNumber? {
        get {
            return enabled as NSNumber?
        }
    }
    public var sslTrust: String?
    public var sslProtocols: [String]?
    public var createdAt: Date
    public var _id: UUID

    public init(connectorId: UUID, smtpHost: String, smtpPort: Int? = nil, smtpUsername: String? = nil, smtpPassword: String? = nil, smtpSsl: Bool? = nil, startTls: Bool? = nil, smtpMechanisms: [String]? = nil, localHostName: String? = nil, proxyHost: String? = nil, proxyPort: Int? = nil, proxyEnabled: Bool? = nil, enabled: Bool? = nil, sslTrust: String? = nil, sslProtocols: [String]? = nil, createdAt: Date, _id: UUID) {
        self.connectorId = connectorId
        self.smtpHost = smtpHost
        self.smtpPort = smtpPort
        self.smtpUsername = smtpUsername
        self.smtpPassword = smtpPassword
        self.smtpSsl = smtpSsl
        self.startTls = startTls
        self.smtpMechanisms = smtpMechanisms
        self.localHostName = localHostName
        self.proxyHost = proxyHost
        self.proxyPort = proxyPort
        self.proxyEnabled = proxyEnabled
        self.enabled = enabled
        self.sslTrust = sslTrust
        self.sslProtocols = sslProtocols
        self.createdAt = createdAt
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case connectorId
        case smtpHost
        case smtpPort
        case smtpUsername
        case smtpPassword
        case smtpSsl
        case startTls
        case smtpMechanisms
        case localHostName
        case proxyHost
        case proxyPort
        case proxyEnabled
        case enabled
        case sslTrust
        case sslProtocols
        case createdAt
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(connectorId, forKey: .connectorId)
        try container.encode(smtpHost, forKey: .smtpHost)
        try container.encodeIfPresent(smtpPort, forKey: .smtpPort)
        try container.encodeIfPresent(smtpUsername, forKey: .smtpUsername)
        try container.encodeIfPresent(smtpPassword, forKey: .smtpPassword)
        try container.encodeIfPresent(smtpSsl, forKey: .smtpSsl)
        try container.encodeIfPresent(startTls, forKey: .startTls)
        try container.encodeIfPresent(smtpMechanisms, forKey: .smtpMechanisms)
        try container.encodeIfPresent(localHostName, forKey: .localHostName)
        try container.encodeIfPresent(proxyHost, forKey: .proxyHost)
        try container.encodeIfPresent(proxyPort, forKey: .proxyPort)
        try container.encodeIfPresent(proxyEnabled, forKey: .proxyEnabled)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(sslTrust, forKey: .sslTrust)
        try container.encodeIfPresent(sslProtocols, forKey: .sslProtocols)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(_id, forKey: ._id)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ConnectorSmtpConnectionDto: Identifiable {}
