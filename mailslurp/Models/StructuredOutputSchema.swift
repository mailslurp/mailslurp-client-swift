//
// StructuredOutputSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** JSON output schema for structured content repsonses. This schema dictates the format that an AI should use when responding to your instructions. */
@objcMembers public class StructuredOutputSchema: NSObject, Codable, ParameterConvertible {

    public enum ModelType: String, Sendable, Codable, CaseIterable {
        case string = "string"
        case number = "number"
        case integer = "integer"
        case boolean = "boolean"
        case object = "object"
        case array = "array"
        case null = "null"
    }
    public static let maxItemsRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let minItemsRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let maxLengthRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let minLengthRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let maxPropertiesRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let minPropertiesRule = NumericRule<Int64>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var anyOf: [StructuredOutputSchema]?
    public var _default: JSONValue?
    /** Provide a description of the schema to help the AI understand the schema. */
    public var _description: String?
    /** When using type string and format enum pass a collection of enum values here. */
    public var enumValues: [String]?
    public var example: JSONValue?
    /** Format for string types. Can be null, date-time or enum. */
    public var format: String?
    public var items: StructuredOutputSchema?
    public var maxItems: Int64?
    public var maxItemsNum: NSNumber? {
        get {
            return maxItems as NSNumber?
        }
    }
    public var minItems: Int64?
    public var minItemsNum: NSNumber? {
        get {
            return minItems as NSNumber?
        }
    }
    public var maxLength: Int64?
    public var maxLengthNum: NSNumber? {
        get {
            return maxLength as NSNumber?
        }
    }
    public var minLength: Int64?
    public var minLengthNum: NSNumber? {
        get {
            return minLength as NSNumber?
        }
    }
    /** Regex pattern for STRING type */
    public var pattern: String?
    /** Properties of an OBJECT schema. These are key value pairs where the key is the property name and the value is the schema for that property. */
    public var properties: [String: StructuredOutputSchema]?
    /** Pass an array of property names to specify the order of properties in the generated JSON object if required. */
    public var propertyOrdering: [String]?
    /** Is field required */
    public var _required: [String]?
    public var maxProperties: Int64?
    public var maxPropertiesNum: NSNumber? {
        get {
            return maxProperties as NSNumber?
        }
    }
    public var minProperties: Int64?
    public var minPropertiesNum: NSNumber? {
        get {
            return minProperties as NSNumber?
        }
    }
    public var maximum: Double?
    public var minimum: Double?
    public var nullable: Bool?
    public var nullableNum: NSNumber? {
        get {
            return nullable as NSNumber?
        }
    }
    public var title: String?
    /** Primitive JSON schema types with a fallback CUSTOM for unknown values. */
    public var type: ModelType?

    public init(anyOf: [StructuredOutputSchema]? = nil, _default: JSONValue? = nil, _description: String? = nil, enumValues: [String]? = nil, example: JSONValue? = nil, format: String? = nil, items: StructuredOutputSchema? = nil, maxItems: Int64? = nil, minItems: Int64? = nil, maxLength: Int64? = nil, minLength: Int64? = nil, pattern: String? = nil, properties: [String: StructuredOutputSchema]? = nil, propertyOrdering: [String]? = nil, _required: [String]? = nil, maxProperties: Int64? = nil, minProperties: Int64? = nil, maximum: Double? = nil, minimum: Double? = nil, nullable: Bool? = nil, title: String? = nil, type: ModelType? = nil) {
        self.anyOf = anyOf
        self._default = _default
        self._description = _description
        self.enumValues = enumValues
        self.example = example
        self.format = format
        self.items = items
        self.maxItems = maxItems
        self.minItems = minItems
        self.maxLength = maxLength
        self.minLength = minLength
        self.pattern = pattern
        self.properties = properties
        self.propertyOrdering = propertyOrdering
        self._required = _required
        self.maxProperties = maxProperties
        self.minProperties = minProperties
        self.maximum = maximum
        self.minimum = minimum
        self.nullable = nullable
        self.title = title
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case anyOf
        case _default = "default"
        case _description = "description"
        case enumValues
        case example
        case format
        case items
        case maxItems
        case minItems
        case maxLength
        case minLength
        case pattern
        case properties
        case propertyOrdering
        case _required = "required"
        case maxProperties
        case minProperties
        case maximum
        case minimum
        case nullable
        case title
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(anyOf, forKey: .anyOf)
        try container.encodeIfPresent(_default, forKey: ._default)
        try container.encodeIfPresent(_description, forKey: ._description)
        try container.encodeIfPresent(enumValues, forKey: .enumValues)
        try container.encodeIfPresent(example, forKey: .example)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(maxItems, forKey: .maxItems)
        try container.encodeIfPresent(minItems, forKey: .minItems)
        try container.encodeIfPresent(maxLength, forKey: .maxLength)
        try container.encodeIfPresent(minLength, forKey: .minLength)
        try container.encodeIfPresent(pattern, forKey: .pattern)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(propertyOrdering, forKey: .propertyOrdering)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(maxProperties, forKey: .maxProperties)
        try container.encodeIfPresent(minProperties, forKey: .minProperties)
        try container.encodeIfPresent(maximum, forKey: .maximum)
        try container.encodeIfPresent(minimum, forKey: .minimum)
        try container.encodeIfPresent(nullable, forKey: .nullable)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

