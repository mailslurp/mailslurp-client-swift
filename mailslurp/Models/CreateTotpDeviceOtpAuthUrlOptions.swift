//
// CreateTotpDeviceOtpAuthUrlOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objcMembers public class CreateTotpDeviceOtpAuthUrlOptions: NSObject, Codable, ParameterConvertible {

    public var otpAuthUrl: String
    public var name: String?
    public var username: String?
    public var issuer: String?
    public var digits: Int?
    public var digitsNum: NSNumber? {
        get {
            return digits as NSNumber?
        }
    }
    public var period: Int?
    public var periodNum: NSNumber? {
        get {
            return period as NSNumber?
        }
    }
    public var algorithm: String?

    public init(otpAuthUrl: String, name: String? = nil, username: String? = nil, issuer: String? = nil, digits: Int? = nil, period: Int? = nil, algorithm: String? = nil) {
        self.otpAuthUrl = otpAuthUrl
        self.name = name
        self.username = username
        self.issuer = issuer
        self.digits = digits
        self.period = period
        self.algorithm = algorithm
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case otpAuthUrl
        case name
        case username
        case issuer
        case digits
        case period
        case algorithm
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(otpAuthUrl, forKey: .otpAuthUrl)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(digits, forKey: .digits)
        try container.encodeIfPresent(period, forKey: .period)
        try container.encodeIfPresent(algorithm, forKey: .algorithm)
    }
}

