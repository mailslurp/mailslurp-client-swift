//
// ConnectorDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class ConnectorDto: NSObject, Codable, JSONEncodable {

    public enum ConnectorType: String, Codable, CaseIterable {
        case imap = "IMAP"
    }
    public enum ConnectorAuthType: String, Codable, CaseIterable {
        case plainText = "PLAIN_TEXT"
    }
    public enum SyncScheduleType: String, Codable, CaseIterable {
        case interval = "INTERVAL"
    }
    public var _id: UUID
    public var userId: UUID
    public var connectorType: ConnectorType
    public var connectorAuthType: ConnectorAuthType
    public var syncEnabled: Bool
    public var syncScheduleType: SyncScheduleType
    public var syncInterval: Int?
    public var syncIntervalNum: NSNumber? {
        get {
            return syncInterval as NSNumber?
        }
    }
    public var imapHost: String?
    public var imapPort: Int?
    public var imapPortNum: NSNumber? {
        get {
            return imapPort as NSNumber?
        }
    }
    public var imapUsername: String?
    public var imapPassword: String?
    public var imapSsl: Bool?
    public var imapSslNum: NSNumber? {
        get {
            return imapSsl as NSNumber?
        }
    }
    public var createdAt: Date

    public init(_id: UUID, userId: UUID, connectorType: ConnectorType, connectorAuthType: ConnectorAuthType, syncEnabled: Bool, syncScheduleType: SyncScheduleType, syncInterval: Int? = nil, imapHost: String? = nil, imapPort: Int? = nil, imapUsername: String? = nil, imapPassword: String? = nil, imapSsl: Bool? = nil, createdAt: Date) {
        self._id = _id
        self.userId = userId
        self.connectorType = connectorType
        self.connectorAuthType = connectorAuthType
        self.syncEnabled = syncEnabled
        self.syncScheduleType = syncScheduleType
        self.syncInterval = syncInterval
        self.imapHost = imapHost
        self.imapPort = imapPort
        self.imapUsername = imapUsername
        self.imapPassword = imapPassword
        self.imapSsl = imapSsl
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case connectorType
        case connectorAuthType
        case syncEnabled
        case syncScheduleType
        case syncInterval
        case imapHost
        case imapPort
        case imapUsername
        case imapPassword
        case imapSsl
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encode(connectorType, forKey: .connectorType)
        try container.encode(connectorAuthType, forKey: .connectorAuthType)
        try container.encode(syncEnabled, forKey: .syncEnabled)
        try container.encode(syncScheduleType, forKey: .syncScheduleType)
        try container.encodeIfPresent(syncInterval, forKey: .syncInterval)
        try container.encodeIfPresent(imapHost, forKey: .imapHost)
        try container.encodeIfPresent(imapPort, forKey: .imapPort)
        try container.encodeIfPresent(imapUsername, forKey: .imapUsername)
        try container.encodeIfPresent(imapPassword, forKey: .imapPassword)
        try container.encodeIfPresent(imapSsl, forKey: .imapSsl)
        try container.encode(createdAt, forKey: .createdAt)
    }
}

