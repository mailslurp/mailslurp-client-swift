//
// InboxReplierEventProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Inbox replier event */
@objc public class InboxReplierEventProjection: NSObject, Codable, JSONEncodable {

    public enum Status: String, Codable, CaseIterable {
        case success = "SUCCESS"
        case failure = "FAILURE"
    }
    public var message: String?
    public var _id: UUID?
    public var status: Status?
    public var emailId: UUID?
    public var inboxId: UUID?
    public var userId: UUID?
    public var recipients: [String]?
    public var createdAt: Date
    public var sentId: UUID?
    public var replierId: UUID?

    public init(message: String? = nil, _id: UUID? = nil, status: Status? = nil, emailId: UUID? = nil, inboxId: UUID? = nil, userId: UUID? = nil, recipients: [String]? = nil, createdAt: Date, sentId: UUID? = nil, replierId: UUID? = nil) {
        self.message = message
        self._id = _id
        self.status = status
        self.emailId = emailId
        self.inboxId = inboxId
        self.userId = userId
        self.recipients = recipients
        self.createdAt = createdAt
        self.sentId = sentId
        self.replierId = replierId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case message
        case _id = "id"
        case status
        case emailId
        case inboxId
        case userId
        case recipients
        case createdAt
        case sentId
        case replierId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(_id, forKey: ._id)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(emailId, forKey: .emailId)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(recipients, forKey: .recipients)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(sentId, forKey: .sentId)
        try container.encodeIfPresent(replierId, forKey: .replierId)
    }
}

