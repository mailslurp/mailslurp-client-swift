//
// TrackingPixelDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Tracking pixel */
public struct TrackingPixelDto: Codable, Hashable {

    public var id: UUID
    public var seen: Bool
    public var recipient: String?
    public var html: String
    public var url: String
    public var inboxId: UUID?
    public var sentEmailId: UUID?
    public var seenAt: Date?
    public var createdAt: Date

    public init(id: UUID, seen: Bool, recipient: String? = nil, html: String, url: String, inboxId: UUID? = nil, sentEmailId: UUID? = nil, seenAt: Date? = nil, createdAt: Date) {
        self.id = id
        self.seen = seen
        self.recipient = recipient
        self.html = html
        self.url = url
        self.inboxId = inboxId
        self.sentEmailId = sentEmailId
        self.seenAt = seenAt
        self.createdAt = createdAt
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case seen
        case recipient
        case html
        case url
        case inboxId
        case sentEmailId
        case seenAt
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(seen, forKey: .seen)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encode(html, forKey: .html)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(sentEmailId, forKey: .sentEmailId)
        try container.encodeIfPresent(seenAt, forKey: .seenAt)
        try container.encode(createdAt, forKey: .createdAt)
    }



}
