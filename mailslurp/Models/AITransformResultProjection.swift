//
// AITransformResultProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objcMembers public class AITransformResultProjection: NSObject, Codable, ParameterConvertible {

    public enum EntityType: String, Sendable, Codable, CaseIterable {
        case inbox = "INBOX"
        case phone = "PHONE"
    }
    public var userId: UUID
    public var aiTransformId: UUID
    public var entityId: UUID
    public var entityType: EntityType
    public var aiTransformMappingId: UUID
    public var value: String?
    public var _id: UUID

    public init(userId: UUID, aiTransformId: UUID, entityId: UUID, entityType: EntityType, aiTransformMappingId: UUID, value: String? = nil, _id: UUID) {
        self.userId = userId
        self.aiTransformId = aiTransformId
        self.entityId = entityId
        self.entityType = entityType
        self.aiTransformMappingId = aiTransformMappingId
        self.value = value
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case aiTransformId
        case entityId
        case entityType
        case aiTransformMappingId
        case value
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(aiTransformId, forKey: .aiTransformId)
        try container.encode(entityId, forKey: .entityId)
        try container.encode(entityType, forKey: .entityType)
        try container.encode(aiTransformMappingId, forKey: .aiTransformMappingId)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encode(_id, forKey: ._id)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AITransformResultProjection: Identifiable {}
