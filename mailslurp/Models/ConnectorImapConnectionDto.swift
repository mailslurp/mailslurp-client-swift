//
// ConnectorImapConnectionDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objcMembers public class ConnectorImapConnectionDto: NSObject, Codable, ParameterConvertible {

    public var connectorId: UUID
    public var imapHost: String
    public var imapPort: Int?
    public var imapPortNum: NSNumber? {
        get {
            return imapPort as NSNumber?
        }
    }
    public var imapUsername: String?
    public var imapPassword: String?
    public var imapSsl: Bool?
    public var imapSslNum: NSNumber? {
        get {
            return imapSsl as NSNumber?
        }
    }
    public var selectFolder: String?
    public var searchTerms: String?
    public var startTls: Bool?
    public var startTlsNum: NSNumber? {
        get {
            return startTls as NSNumber?
        }
    }
    public var proxyHost: String?
    public var proxyPort: Int?
    public var proxyPortNum: NSNumber? {
        get {
            return proxyPort as NSNumber?
        }
    }
    public var proxyEnabled: Bool?
    public var proxyEnabledNum: NSNumber? {
        get {
            return proxyEnabled as NSNumber?
        }
    }
    public var localHostName: String?
    public var mechanisms: [String]?
    public var sslProtocols: [String]?
    public var sslTrust: String?
    public var enabled: Bool?
    public var enabledNum: NSNumber? {
        get {
            return enabled as NSNumber?
        }
    }
    public var createdAt: Date
    public var _id: UUID

    public init(connectorId: UUID, imapHost: String, imapPort: Int? = nil, imapUsername: String? = nil, imapPassword: String? = nil, imapSsl: Bool? = nil, selectFolder: String? = nil, searchTerms: String? = nil, startTls: Bool? = nil, proxyHost: String? = nil, proxyPort: Int? = nil, proxyEnabled: Bool? = nil, localHostName: String? = nil, mechanisms: [String]? = nil, sslProtocols: [String]? = nil, sslTrust: String? = nil, enabled: Bool? = nil, createdAt: Date, _id: UUID) {
        self.connectorId = connectorId
        self.imapHost = imapHost
        self.imapPort = imapPort
        self.imapUsername = imapUsername
        self.imapPassword = imapPassword
        self.imapSsl = imapSsl
        self.selectFolder = selectFolder
        self.searchTerms = searchTerms
        self.startTls = startTls
        self.proxyHost = proxyHost
        self.proxyPort = proxyPort
        self.proxyEnabled = proxyEnabled
        self.localHostName = localHostName
        self.mechanisms = mechanisms
        self.sslProtocols = sslProtocols
        self.sslTrust = sslTrust
        self.enabled = enabled
        self.createdAt = createdAt
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case connectorId
        case imapHost
        case imapPort
        case imapUsername
        case imapPassword
        case imapSsl
        case selectFolder
        case searchTerms
        case startTls
        case proxyHost
        case proxyPort
        case proxyEnabled
        case localHostName
        case mechanisms
        case sslProtocols
        case sslTrust
        case enabled
        case createdAt
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(connectorId, forKey: .connectorId)
        try container.encode(imapHost, forKey: .imapHost)
        try container.encodeIfPresent(imapPort, forKey: .imapPort)
        try container.encodeIfPresent(imapUsername, forKey: .imapUsername)
        try container.encodeIfPresent(imapPassword, forKey: .imapPassword)
        try container.encodeIfPresent(imapSsl, forKey: .imapSsl)
        try container.encodeIfPresent(selectFolder, forKey: .selectFolder)
        try container.encodeIfPresent(searchTerms, forKey: .searchTerms)
        try container.encodeIfPresent(startTls, forKey: .startTls)
        try container.encodeIfPresent(proxyHost, forKey: .proxyHost)
        try container.encodeIfPresent(proxyPort, forKey: .proxyPort)
        try container.encodeIfPresent(proxyEnabled, forKey: .proxyEnabled)
        try container.encodeIfPresent(localHostName, forKey: .localHostName)
        try container.encodeIfPresent(mechanisms, forKey: .mechanisms)
        try container.encodeIfPresent(sslProtocols, forKey: .sslProtocols)
        try container.encodeIfPresent(sslTrust, forKey: .sslTrust)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(_id, forKey: ._id)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ConnectorImapConnectionDto: Identifiable {}
