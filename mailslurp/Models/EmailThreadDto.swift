//
// EmailThreadDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objcMembers public class EmailThreadDto: NSObject, Codable, ParameterConvertible {

    /** ID of email thread */
    public var _id: UUID
    /** User ID */
    public var userId: UUID
    /** Inbox ID */
    public var inboxId: UUID?
    /** From sender */
    public var from: String?
    /** To recipients */
    public var to: [String]
    /** CC recipients */
    public var cc: [String]?
    /** BCC recipients */
    public var bcc: [String]?
    public var sender: Sender?
    public var recipients: EmailRecipients?
    /** Thread topic subject */
    public var subject: String?
    /** Created at DateTime */
    public var createdAt: Date
    /** Updated at DateTime */
    public var updatedAt: Date

    public init(_id: UUID, userId: UUID, inboxId: UUID? = nil, from: String? = nil, to: [String], cc: [String]? = nil, bcc: [String]? = nil, sender: Sender? = nil, recipients: EmailRecipients? = nil, subject: String? = nil, createdAt: Date, updatedAt: Date) {
        self._id = _id
        self.userId = userId
        self.inboxId = inboxId
        self.from = from
        self.to = to
        self.cc = cc
        self.bcc = bcc
        self.sender = sender
        self.recipients = recipients
        self.subject = subject
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case inboxId
        case from
        case to
        case cc
        case bcc
        case sender
        case recipients
        case subject
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encode(to, forKey: .to)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encodeIfPresent(sender, forKey: .sender)
        try container.encodeIfPresent(recipients, forKey: .recipients)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension EmailThreadDto: Identifiable {}
