//
// EmailThreadItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objcMembers public class EmailThreadItem: NSObject, Codable, JSONEncodable {

    public enum ItemType: String, Codable, CaseIterable {
        case receivedEmail = "RECEIVED_EMAIL"
        case sentEmail = "SENT_EMAIL"
    }
    public var itemType: ItemType
    public var entityId: UUID
    public var bodyExcerpt: String?
    public var textExcerpt: String?
    public var subject: String?
    public var to: [String]
    public var from: String?
    public var bcc: [String]?
    public var cc: [String]?
    public var attachments: [String]?
    public var createdAt: Date
    public var read: Bool
    public var inReplyTo: String?
    public var messageId: String?
    public var threadId: UUID?
    public var sender: Sender?
    public var recipients: EmailRecipients?

    public init(itemType: ItemType, entityId: UUID, bodyExcerpt: String? = nil, textExcerpt: String? = nil, subject: String? = nil, to: [String], from: String? = nil, bcc: [String]? = nil, cc: [String]? = nil, attachments: [String]? = nil, createdAt: Date, read: Bool, inReplyTo: String? = nil, messageId: String? = nil, threadId: UUID? = nil, sender: Sender? = nil, recipients: EmailRecipients? = nil) {
        self.itemType = itemType
        self.entityId = entityId
        self.bodyExcerpt = bodyExcerpt
        self.textExcerpt = textExcerpt
        self.subject = subject
        self.to = to
        self.from = from
        self.bcc = bcc
        self.cc = cc
        self.attachments = attachments
        self.createdAt = createdAt
        self.read = read
        self.inReplyTo = inReplyTo
        self.messageId = messageId
        self.threadId = threadId
        self.sender = sender
        self.recipients = recipients
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemType
        case entityId
        case bodyExcerpt
        case textExcerpt
        case subject
        case to
        case from
        case bcc
        case cc
        case attachments
        case createdAt
        case read
        case inReplyTo
        case messageId
        case threadId
        case sender
        case recipients
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(itemType, forKey: .itemType)
        try container.encode(entityId, forKey: .entityId)
        try container.encodeIfPresent(bodyExcerpt, forKey: .bodyExcerpt)
        try container.encodeIfPresent(textExcerpt, forKey: .textExcerpt)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encode(to, forKey: .to)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(read, forKey: .read)
        try container.encodeIfPresent(inReplyTo, forKey: .inReplyTo)
        try container.encodeIfPresent(messageId, forKey: .messageId)
        try container.encodeIfPresent(threadId, forKey: .threadId)
        try container.encodeIfPresent(sender, forKey: .sender)
        try container.encodeIfPresent(recipients, forKey: .recipients)
    }
}

