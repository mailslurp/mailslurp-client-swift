//
// ConnectorSyncSettingsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objcMembers public class ConnectorSyncSettingsDto: NSObject, Codable, JSONEncodable {

    public enum SyncScheduleType: String, Codable, CaseIterable {
        case interval = "INTERVAL"
    }
    public var _id: UUID
    public var userId: UUID
    public var connectorId: UUID
    public var syncEnabled: Bool
    public var syncScheduleType: SyncScheduleType?
    public var syncInterval: Int?
    public var syncIntervalNum: NSNumber? {
        get {
            return syncInterval as NSNumber?
        }
    }

    public init(_id: UUID, userId: UUID, connectorId: UUID, syncEnabled: Bool, syncScheduleType: SyncScheduleType? = nil, syncInterval: Int? = nil) {
        self._id = _id
        self.userId = userId
        self.connectorId = connectorId
        self.syncEnabled = syncEnabled
        self.syncScheduleType = syncScheduleType
        self.syncInterval = syncInterval
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _id = "id"
        case userId
        case connectorId
        case syncEnabled
        case syncScheduleType
        case syncInterval
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_id, forKey: ._id)
        try container.encode(userId, forKey: .userId)
        try container.encode(connectorId, forKey: .connectorId)
        try container.encode(syncEnabled, forKey: .syncEnabled)
        try container.encodeIfPresent(syncScheduleType, forKey: .syncScheduleType)
        try container.encodeIfPresent(syncInterval, forKey: .syncInterval)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ConnectorSyncSettingsDto: Identifiable {}
