//
// WebhookProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Representation of a webhook */
@objcMembers public class WebhookProjection: NSObject, Codable, ParameterConvertible {

    public enum EventName: String, Sendable, Codable, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newAiTransformResult = "NEW_AI_TRANSFORM_RESULT"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
        case newGuestUser = "NEW_GUEST_USER"
    }
    public enum HealthStatus: String, Sendable, Codable, CaseIterable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
    }
    public var url: String
    public var password: String?
    public var username: String?
    public var inboxId: UUID?
    public var userId: UUID
    public var eventName: EventName?
    public var updatedAt: Date
    public var createdAt: Date
    public var aiTransformId: UUID?
    public var healthStatus: HealthStatus?
    public var phoneNumberId: UUID?
    public var name: String?
    public var _id: UUID

    public init(url: String, password: String? = nil, username: String? = nil, inboxId: UUID? = nil, userId: UUID, eventName: EventName? = nil, updatedAt: Date, createdAt: Date, aiTransformId: UUID? = nil, healthStatus: HealthStatus? = nil, phoneNumberId: UUID? = nil, name: String? = nil, _id: UUID) {
        self.url = url
        self.password = password
        self.username = username
        self.inboxId = inboxId
        self.userId = userId
        self.eventName = eventName
        self.updatedAt = updatedAt
        self.createdAt = createdAt
        self.aiTransformId = aiTransformId
        self.healthStatus = healthStatus
        self.phoneNumberId = phoneNumberId
        self.name = name
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case password
        case username
        case inboxId
        case userId
        case eventName
        case updatedAt
        case createdAt
        case aiTransformId
        case healthStatus
        case phoneNumberId
        case name
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(aiTransformId, forKey: .aiTransformId)
        try container.encodeIfPresent(healthStatus, forKey: .healthStatus)
        try container.encodeIfPresent(phoneNumberId, forKey: .phoneNumberId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(_id, forKey: ._id)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension WebhookProjection: Identifiable {}
