//
// EmailThreadProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers */
@objcMembers public class EmailThreadProjection: NSObject, Codable, JSONEncodable {

    public var sender: SenderProjection?
    public var recipients: EmailRecipientsProjection?
    /** Inbox ID */
    public var inboxId: UUID?
    /** User ID */
    public var userId: UUID
    /** Updated at DateTime */
    public var updatedAt: Date
    /** Created at DateTime */
    public var createdAt: Date
    /** To recipients */
    public var to: [String]
    /** CC recipients */
    public var cc: [String]?
    /** BCC recipients */
    public var bcc: [String]?
    /** Has attachments */
    public var hasAttachments: Bool
    /** Has unread */
    public var unread: Bool
    /** Number of messages in the thread */
    public var messageCount: Int
    /** Last body excerpt */
    public var lastBodyExcerpt: String?
    /** Last text excerpt */
    public var lastTextExcerpt: String?
    /** Last email created time */
    public var lastCreatedAt: Date?
    /** Last sender */
    public var lastFrom: String?
    public var lastSender: SenderProjection?
    /** Thread topic subject */
    public var subject: String?
    /** ID of email thread */
    public var _id: UUID
    /** From sender */
    public var from: String?

    public init(sender: SenderProjection? = nil, recipients: EmailRecipientsProjection? = nil, inboxId: UUID? = nil, userId: UUID, updatedAt: Date, createdAt: Date, to: [String], cc: [String]? = nil, bcc: [String]? = nil, hasAttachments: Bool, unread: Bool, messageCount: Int, lastBodyExcerpt: String? = nil, lastTextExcerpt: String? = nil, lastCreatedAt: Date? = nil, lastFrom: String? = nil, lastSender: SenderProjection? = nil, subject: String? = nil, _id: UUID, from: String? = nil) {
        self.sender = sender
        self.recipients = recipients
        self.inboxId = inboxId
        self.userId = userId
        self.updatedAt = updatedAt
        self.createdAt = createdAt
        self.to = to
        self.cc = cc
        self.bcc = bcc
        self.hasAttachments = hasAttachments
        self.unread = unread
        self.messageCount = messageCount
        self.lastBodyExcerpt = lastBodyExcerpt
        self.lastTextExcerpt = lastTextExcerpt
        self.lastCreatedAt = lastCreatedAt
        self.lastFrom = lastFrom
        self.lastSender = lastSender
        self.subject = subject
        self._id = _id
        self.from = from
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sender
        case recipients
        case inboxId
        case userId
        case updatedAt
        case createdAt
        case to
        case cc
        case bcc
        case hasAttachments
        case unread
        case messageCount
        case lastBodyExcerpt
        case lastTextExcerpt
        case lastCreatedAt
        case lastFrom
        case lastSender
        case subject
        case _id = "id"
        case from
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sender, forKey: .sender)
        try container.encodeIfPresent(recipients, forKey: .recipients)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encode(userId, forKey: .userId)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(to, forKey: .to)
        try container.encodeIfPresent(cc, forKey: .cc)
        try container.encodeIfPresent(bcc, forKey: .bcc)
        try container.encode(hasAttachments, forKey: .hasAttachments)
        try container.encode(unread, forKey: .unread)
        try container.encode(messageCount, forKey: .messageCount)
        try container.encodeIfPresent(lastBodyExcerpt, forKey: .lastBodyExcerpt)
        try container.encodeIfPresent(lastTextExcerpt, forKey: .lastTextExcerpt)
        try container.encodeIfPresent(lastCreatedAt, forKey: .lastCreatedAt)
        try container.encodeIfPresent(lastFrom, forKey: .lastFrom)
        try container.encodeIfPresent(lastSender, forKey: .lastSender)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encode(_id, forKey: ._id)
        try container.encodeIfPresent(from, forKey: .from)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension EmailThreadProjection: Identifiable {}
