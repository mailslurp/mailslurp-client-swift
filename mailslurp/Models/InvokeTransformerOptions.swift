//
// InvokeTransformerOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objcMembers public class InvokeTransformerOptions: NSObject, Codable, ParameterConvertible {

    public enum EntityType: String, Sendable, Codable, CaseIterable {
        case email = "EMAIL"
        case sms = "SMS"
        case attachment = "ATTACHMENT"
    }
    public enum ContentSelector: String, Sendable, Codable, CaseIterable {
        case raw = "RAW"
        case body = "BODY"
        case bodyAttachments = "BODY_ATTACHMENTS"
    }
    public var aiTransformId: UUID?
    public var aiTransformMappingId: UUID?
    public var rawInput: String?
    public var entityId: String?
    public var entityType: EntityType?
    public var rawConditions: [String]?
    public var rawInstructions: [String]?
    public var rawOutputSchema: StructuredOutputSchema?
    public var contentSelector: ContentSelector?

    public init(aiTransformId: UUID? = nil, aiTransformMappingId: UUID? = nil, rawInput: String? = nil, entityId: String? = nil, entityType: EntityType? = nil, rawConditions: [String]? = nil, rawInstructions: [String]? = nil, rawOutputSchema: StructuredOutputSchema? = nil, contentSelector: ContentSelector? = nil) {
        self.aiTransformId = aiTransformId
        self.aiTransformMappingId = aiTransformMappingId
        self.rawInput = rawInput
        self.entityId = entityId
        self.entityType = entityType
        self.rawConditions = rawConditions
        self.rawInstructions = rawInstructions
        self.rawOutputSchema = rawOutputSchema
        self.contentSelector = contentSelector
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case aiTransformId
        case aiTransformMappingId
        case rawInput
        case entityId
        case entityType
        case rawConditions
        case rawInstructions
        case rawOutputSchema
        case contentSelector
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(aiTransformId, forKey: .aiTransformId)
        try container.encodeIfPresent(aiTransformMappingId, forKey: .aiTransformMappingId)
        try container.encodeIfPresent(rawInput, forKey: .rawInput)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encodeIfPresent(entityType, forKey: .entityType)
        try container.encodeIfPresent(rawConditions, forKey: .rawConditions)
        try container.encodeIfPresent(rawInstructions, forKey: .rawInstructions)
        try container.encodeIfPresent(rawOutputSchema, forKey: .rawOutputSchema)
        try container.encodeIfPresent(contentSelector, forKey: .contentSelector)
    }
}

