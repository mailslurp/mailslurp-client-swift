//
// WebhookNewAITransformResultPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** NEW_AI_TRANSFORM_RESULT webhook payload. Sent to your webhook url endpoint via HTTP POST when a structured data result is generated by the AI Transformer that your webhook is attached to. Use the AI Transform Result ID to fetch the full details. */
@objcMembers public class WebhookNewAITransformResultPayload: NSObject, Codable, ParameterConvertible {

    public enum EventName: String, Sendable, Codable, CaseIterable {
        case emailReceived = "EMAIL_RECEIVED"
        case newAiTransformResult = "NEW_AI_TRANSFORM_RESULT"
        case newEmail = "NEW_EMAIL"
        case newContact = "NEW_CONTACT"
        case newAttachment = "NEW_ATTACHMENT"
        case emailOpened = "EMAIL_OPENED"
        case emailRead = "EMAIL_READ"
        case deliveryStatus = "DELIVERY_STATUS"
        case bounce = "BOUNCE"
        case bounceRecipient = "BOUNCE_RECIPIENT"
        case newSms = "NEW_SMS"
        case newGuestUser = "NEW_GUEST_USER"
    }
    public enum EntityType: String, Sendable, Codable, CaseIterable {
        case inbox = "INBOX"
        case phone = "PHONE"
    }
    /** Idempotent message ID. Store this ID locally or in a database to prevent message duplication. */
    public var messageId: String
    /** ID of webhook entity being triggered */
    public var webhookId: UUID
    /** Name of the event type webhook is being triggered for. */
    public var eventName: EventName
    /** Name of the webhook being triggered */
    public var webhookName: String?
    /** AI Transform ID of event */
    public var aiTransformResultId: UUID
    /** User ID of event */
    public var userId: UUID
    /** ID of AI Transform */
    public var aiTransformId: UUID
    /** ID of AI Transform mapping */
    public var aiTransformMappingId: UUID?
    /** ID of entity that triggered the transformation */
    public var entityId: UUID?
    /** Entity type that triggered the transformation */
    public var entityType: EntityType?
    /** JSON string result of the AI transformation */
    public var result: String?

    public init(messageId: String, webhookId: UUID, eventName: EventName, webhookName: String? = nil, aiTransformResultId: UUID, userId: UUID, aiTransformId: UUID, aiTransformMappingId: UUID? = nil, entityId: UUID? = nil, entityType: EntityType? = nil, result: String? = nil) {
        self.messageId = messageId
        self.webhookId = webhookId
        self.eventName = eventName
        self.webhookName = webhookName
        self.aiTransformResultId = aiTransformResultId
        self.userId = userId
        self.aiTransformId = aiTransformId
        self.aiTransformMappingId = aiTransformMappingId
        self.entityId = entityId
        self.entityType = entityType
        self.result = result
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messageId
        case webhookId
        case eventName
        case webhookName
        case aiTransformResultId
        case userId
        case aiTransformId
        case aiTransformMappingId
        case entityId
        case entityType
        case result
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(messageId, forKey: .messageId)
        try container.encode(webhookId, forKey: .webhookId)
        try container.encode(eventName, forKey: .eventName)
        try container.encodeIfPresent(webhookName, forKey: .webhookName)
        try container.encode(aiTransformResultId, forKey: .aiTransformResultId)
        try container.encode(userId, forKey: .userId)
        try container.encode(aiTransformId, forKey: .aiTransformId)
        try container.encodeIfPresent(aiTransformMappingId, forKey: .aiTransformMappingId)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encodeIfPresent(entityType, forKey: .entityType)
        try container.encodeIfPresent(result, forKey: .result)
    }
}

