//
// ImapSmtpAccessDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Access details for inbox using SMTP or IMAP */
@objc public class ImapSmtpAccessDetails: NSObject, Codable, JSONEncodable {

    /** Secure TLS SMTP server host domain */
    public var secureSmtpServerHost: String
    /** Secure TLS SMTP server host port */
    public var secureSmtpServerPort: Int
    /** Secure TLS SMTP username for login */
    public var secureSmtpUsername: String
    /** Secure TLS SMTP password for login */
    public var secureSmtpPassword: String
    /** SMTP server host domain */
    public var smtpServerHost: String
    /** SMTP server host port */
    public var smtpServerPort: Int
    /** SMTP username for login */
    public var smtpUsername: String
    /** SMTP password for login */
    public var smtpPassword: String
    /** IMAP server host domain */
    public var imapServerHost: String
    /** IMAP server host port */
    public var imapServerPort: Int
    /** IMAP username for login */
    public var imapUsername: String
    /** IMAP password for login */
    public var imapPassword: String
    /** IMAP mailbox to SELECT */
    public var imapMailbox: String
    /** Mail from domain or SMTP HELO value */
    public var mailFromDomain: String?

    public init(secureSmtpServerHost: String, secureSmtpServerPort: Int, secureSmtpUsername: String, secureSmtpPassword: String, smtpServerHost: String, smtpServerPort: Int, smtpUsername: String, smtpPassword: String, imapServerHost: String, imapServerPort: Int, imapUsername: String, imapPassword: String, imapMailbox: String, mailFromDomain: String? = nil) {
        self.secureSmtpServerHost = secureSmtpServerHost
        self.secureSmtpServerPort = secureSmtpServerPort
        self.secureSmtpUsername = secureSmtpUsername
        self.secureSmtpPassword = secureSmtpPassword
        self.smtpServerHost = smtpServerHost
        self.smtpServerPort = smtpServerPort
        self.smtpUsername = smtpUsername
        self.smtpPassword = smtpPassword
        self.imapServerHost = imapServerHost
        self.imapServerPort = imapServerPort
        self.imapUsername = imapUsername
        self.imapPassword = imapPassword
        self.imapMailbox = imapMailbox
        self.mailFromDomain = mailFromDomain
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case secureSmtpServerHost
        case secureSmtpServerPort
        case secureSmtpUsername
        case secureSmtpPassword
        case smtpServerHost
        case smtpServerPort
        case smtpUsername
        case smtpPassword
        case imapServerHost
        case imapServerPort
        case imapUsername
        case imapPassword
        case imapMailbox
        case mailFromDomain
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(secureSmtpServerHost, forKey: .secureSmtpServerHost)
        try container.encode(secureSmtpServerPort, forKey: .secureSmtpServerPort)
        try container.encode(secureSmtpUsername, forKey: .secureSmtpUsername)
        try container.encode(secureSmtpPassword, forKey: .secureSmtpPassword)
        try container.encode(smtpServerHost, forKey: .smtpServerHost)
        try container.encode(smtpServerPort, forKey: .smtpServerPort)
        try container.encode(smtpUsername, forKey: .smtpUsername)
        try container.encode(smtpPassword, forKey: .smtpPassword)
        try container.encode(imapServerHost, forKey: .imapServerHost)
        try container.encode(imapServerPort, forKey: .imapServerPort)
        try container.encode(imapUsername, forKey: .imapUsername)
        try container.encode(imapPassword, forKey: .imapPassword)
        try container.encode(imapMailbox, forKey: .imapMailbox)
        try container.encodeIfPresent(mailFromDomain, forKey: .mailFromDomain)
    }
}

