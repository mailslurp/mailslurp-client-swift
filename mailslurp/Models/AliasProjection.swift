//
// AliasProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Representation of a alias */
@objc public class AliasProjection: NSObject, Codable, JSONEncodable {

    public var userId: UUID
    public var emailAddress: String
    public var inboxId: UUID
    public var useThreads: Bool?
    public var useThreadsNum: NSNumber? {
        get {
            return useThreads as NSNumber?
        }
    }
    public var createdAt: Date
    public var updatedAt: Date
    public var name: String?
    public var _id: UUID

    public init(userId: UUID, emailAddress: String, inboxId: UUID, useThreads: Bool? = nil, createdAt: Date, updatedAt: Date, name: String? = nil, _id: UUID) {
        self.userId = userId
        self.emailAddress = emailAddress
        self.inboxId = inboxId
        self.useThreads = useThreads
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.name = name
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case emailAddress
        case inboxId
        case useThreads
        case createdAt
        case updatedAt
        case name
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(emailAddress, forKey: .emailAddress)
        try container.encode(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(useThreads, forKey: .useThreads)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(_id, forKey: ._id)
    }
}

