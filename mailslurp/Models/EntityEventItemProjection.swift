//
// EntityEventItemProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objcMembers public class EntityEventItemProjection: NSObject, Codable, JSONEncodable {

    public enum EventType: String, Codable, CaseIterable {
        case webhookEvent = "WEBHOOK_EVENT"
        case inboxForwarderEvent = "INBOX_FORWARDER_EVENT"
        case inboxReplierEvent = "INBOX_REPLIER_EVENT"
        case inboxRulesetEvent = "INBOX_RULESET_EVENT"
        case aliasEvent = "ALIAS_EVENT"
    }
    public enum Severity: String, Codable, CaseIterable {
        case info = "INFO"
        case success = "SUCCESS"
        case warning = "WARNING"
        case danger = "DANGER"
    }
    public var eventType: EventType
    public var inboxId: UUID?
    public var phoneId: UUID?
    public var _id: UUID
    public var severity: Severity

    public init(eventType: EventType, inboxId: UUID? = nil, phoneId: UUID? = nil, _id: UUID, severity: Severity) {
        self.eventType = eventType
        self.inboxId = inboxId
        self.phoneId = phoneId
        self._id = _id
        self.severity = severity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventType
        case inboxId
        case phoneId
        case _id = "id"
        case severity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventType, forKey: .eventType)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(phoneId, forKey: .phoneId)
        try container.encode(_id, forKey: ._id)
        try container.encode(severity, forKey: .severity)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension EntityEventItemProjection: Identifiable {}
