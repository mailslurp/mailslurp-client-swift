//
// CreateConnectorImapConnectionOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Options for IMAP connection to external email inbox. Allows syncing emails via IMAP. */
@objcMembers public class CreateConnectorImapConnectionOptions: NSObject, Codable, ParameterConvertible {

    public var imapSsl: Bool?
    public var imapSslNum: NSNumber? {
        get {
            return imapSsl as NSNumber?
        }
    }
    public var imapUsername: String?
    public var imapPassword: String?
    /** Optional folder to select during IMAP connection */
    public var selectFolder: String?
    public var searchTerms: String?
    /** IMAP server port */
    public var imapPort: Int?
    public var imapPortNum: NSNumber? {
        get {
            return imapPort as NSNumber?
        }
    }
    /** IMAP server host */
    public var imapHost: String
    /** IMAP server enabled */
    public var enabled: Bool?
    public var enabledNum: NSNumber? {
        get {
            return enabled as NSNumber?
        }
    }
    public var startTls: Bool?
    public var startTlsNum: NSNumber? {
        get {
            return startTls as NSNumber?
        }
    }
    public var proxyEnabled: Bool?
    public var proxyEnabledNum: NSNumber? {
        get {
            return proxyEnabled as NSNumber?
        }
    }
    public var proxyPort: Int?
    public var proxyPortNum: NSNumber? {
        get {
            return proxyPort as NSNumber?
        }
    }
    public var proxyHost: String?
    public var localHostName: String?
    /** List of IMAP mechanisms */
    public var mechanisms: [String]?
    public var sslTrust: String?
    /** List of SSL protocols */
    public var sslProtocols: [String]?

    public init(imapSsl: Bool? = nil, imapUsername: String? = nil, imapPassword: String? = nil, selectFolder: String? = nil, searchTerms: String? = nil, imapPort: Int? = nil, imapHost: String, enabled: Bool? = nil, startTls: Bool? = nil, proxyEnabled: Bool? = nil, proxyPort: Int? = nil, proxyHost: String? = nil, localHostName: String? = nil, mechanisms: [String]? = nil, sslTrust: String? = nil, sslProtocols: [String]? = nil) {
        self.imapSsl = imapSsl
        self.imapUsername = imapUsername
        self.imapPassword = imapPassword
        self.selectFolder = selectFolder
        self.searchTerms = searchTerms
        self.imapPort = imapPort
        self.imapHost = imapHost
        self.enabled = enabled
        self.startTls = startTls
        self.proxyEnabled = proxyEnabled
        self.proxyPort = proxyPort
        self.proxyHost = proxyHost
        self.localHostName = localHostName
        self.mechanisms = mechanisms
        self.sslTrust = sslTrust
        self.sslProtocols = sslProtocols
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imapSsl
        case imapUsername
        case imapPassword
        case selectFolder
        case searchTerms
        case imapPort
        case imapHost
        case enabled
        case startTls
        case proxyEnabled
        case proxyPort
        case proxyHost
        case localHostName
        case mechanisms
        case sslTrust
        case sslProtocols
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(imapSsl, forKey: .imapSsl)
        try container.encodeIfPresent(imapUsername, forKey: .imapUsername)
        try container.encodeIfPresent(imapPassword, forKey: .imapPassword)
        try container.encodeIfPresent(selectFolder, forKey: .selectFolder)
        try container.encodeIfPresent(searchTerms, forKey: .searchTerms)
        try container.encodeIfPresent(imapPort, forKey: .imapPort)
        try container.encode(imapHost, forKey: .imapHost)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(startTls, forKey: .startTls)
        try container.encodeIfPresent(proxyEnabled, forKey: .proxyEnabled)
        try container.encodeIfPresent(proxyPort, forKey: .proxyPort)
        try container.encodeIfPresent(proxyHost, forKey: .proxyHost)
        try container.encodeIfPresent(localHostName, forKey: .localHostName)
        try container.encodeIfPresent(mechanisms, forKey: .mechanisms)
        try container.encodeIfPresent(sslTrust, forKey: .sslTrust)
        try container.encodeIfPresent(sslProtocols, forKey: .sslProtocols)
    }
}

