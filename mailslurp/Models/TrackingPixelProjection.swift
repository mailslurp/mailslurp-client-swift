//
// TrackingPixelProjection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Tracking pixel data */
@objc public class TrackingPixelProjection: NSObject, Codable, JSONEncodable {

    public var userId: UUID
    public var inboxId: UUID?
    public var sentEmailId: UUID?
    public var recipient: String?
    public var seen: Bool
    public var seenAt: Date?
    public var createdAt: Date
    public var name: String?
    public var _id: UUID

    public init(userId: UUID, inboxId: UUID? = nil, sentEmailId: UUID? = nil, recipient: String? = nil, seen: Bool, seenAt: Date? = nil, createdAt: Date, name: String? = nil, _id: UUID) {
        self.userId = userId
        self.inboxId = inboxId
        self.sentEmailId = sentEmailId
        self.recipient = recipient
        self.seen = seen
        self.seenAt = seenAt
        self.createdAt = createdAt
        self.name = name
        self._id = _id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case inboxId
        case sentEmailId
        case recipient
        case seen
        case seenAt
        case createdAt
        case name
        case _id = "id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encodeIfPresent(inboxId, forKey: .inboxId)
        try container.encodeIfPresent(sentEmailId, forKey: .sentEmailId)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encode(seen, forKey: .seen)
        try container.encodeIfPresent(seenAt, forKey: .seenAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(_id, forKey: ._id)
    }
}

