//
// ProviderSettings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objcMembers public class ProviderSettings: NSObject, Codable, JSONEncodable {

    public enum MailProvider: String, Codable, CaseIterable {
        case google = "GOOGLE"
        case microsoft = "MICROSOFT"
    }
    public var mailProvider: MailProvider
    public var imapHost: String
    public var imapPort: Int
    public var imapSsl: Bool
    public var imapStartTls: Bool?
    public var imapStartTlsNum: NSNumber? {
        get {
            return imapStartTls as NSNumber?
        }
    }
    public var smtpHost: String
    public var smtpPort: Int
    public var smtpSsl: Bool
    public var smtpStartTls: Bool?
    public var smtpStartTlsNum: NSNumber? {
        get {
            return smtpStartTls as NSNumber?
        }
    }

    public init(mailProvider: MailProvider, imapHost: String, imapPort: Int, imapSsl: Bool, imapStartTls: Bool? = nil, smtpHost: String, smtpPort: Int, smtpSsl: Bool, smtpStartTls: Bool? = nil) {
        self.mailProvider = mailProvider
        self.imapHost = imapHost
        self.imapPort = imapPort
        self.imapSsl = imapSsl
        self.imapStartTls = imapStartTls
        self.smtpHost = smtpHost
        self.smtpPort = smtpPort
        self.smtpSsl = smtpSsl
        self.smtpStartTls = smtpStartTls
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mailProvider
        case imapHost
        case imapPort
        case imapSsl
        case imapStartTls
        case smtpHost
        case smtpPort
        case smtpSsl
        case smtpStartTls
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mailProvider, forKey: .mailProvider)
        try container.encode(imapHost, forKey: .imapHost)
        try container.encode(imapPort, forKey: .imapPort)
        try container.encode(imapSsl, forKey: .imapSsl)
        try container.encodeIfPresent(imapStartTls, forKey: .imapStartTls)
        try container.encode(smtpHost, forKey: .smtpHost)
        try container.encode(smtpPort, forKey: .smtpPort)
        try container.encode(smtpSsl, forKey: .smtpSsl)
        try container.encodeIfPresent(smtpStartTls, forKey: .smtpStartTls)
    }
}

